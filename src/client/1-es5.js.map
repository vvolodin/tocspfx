{"version":3,"sources":["webpack:///src/app/create/components/create-chart.component.html","webpack:///src/app/create/components/create-chart.component.ts","webpack:///src/app/create/components/sql-source.component.html","webpack:///src/app/create/components/sql-source.component.ts","webpack:///src/app/create/create-chart.service.ts","webpack:///src/app/create/create-routing.module.ts","webpack:///src/app/create/create.actions.ts","webpack:///src/app/create/create.effects.ts","webpack:///src/app/create/create.models.ts","webpack:///src/app/create/create.module.ts","webpack:///src/app/create/create.reducers.ts"],"names":["CreateChartComponent","locale","store","translation","router","analytics","Resources","dataSources","dataSourcesHighlight","createChartModel","placeholder","isPublic","name","placeholderName","unsubscribe","Subject","send","combineLatest","onChange","select","fromRoot","getPreloadedData","pipe","takeUntil","subscribe","_","data","translate","CreateChartStrings","TXT","ChartNamePlaceholder","preloadedData","sources","sqlSource","excelSource","manualSource","azureTableSource","demoSource","isSharePointOnline","unshift","spListSource","upsSource","spListSourceDisabled","upsSourceDisabled","isWAADTenant","waadSource","waadSourceDisabled","map","x","i","replace","String","fullChartList","findIndex","chart","fromCreate","selectCreatedChart","filter","dispatch","InsertChartDescription","dataSourceType","navigateByUrl","id","navigate","window","location","href","ToastError","ResetSaveStatus","isCreating$","selectIsCreating","console","log","type","CreateChart","model","ChartName","IsPublic","DataSourceType","$event","index","value","idx","next","complete","L10N_LOCALE","Component","selector","templateUrl","styleUrls","Inject","SqlSourceComponent","ConnectionString","ParentColumn","PrimaryKeyColumn","SearchQuery","SelectQuery","connectionFail","connectionSuccess","chartId$","getChartId","LoadDataSource","chartId","dataSource$","selectDataSource","hasConnectionTestFailed$","selectHasConnectionTestFailed","hasConnectionTestSucceeded$","selectHasConnectionTestSucceeded","selectSaveSqlSourceSuccess","withLatestFrom","TestSqlConnection","dataSource","SaveSqlDataSource","save","testConnection","CreateChartService","http","post","get","Injectable","routes","path","component","CreateRoutingModule","RouterModule","forChild","NgModule","imports","exports","createAction","props","LoadDataSourceSuccess","LoadDataSourceFailure","SaveSqlDataSourceSuccess","SaveSqlDataSourceFailure","TestSqlConnectionSuccess","TestSqlConnectionFailure","CreateChartSuccess","CreateChartFailure","CreateEffects","actions$","createChartService","createChart$","createEffect","ofType","switchMap","action","createChart","catchError","error","of","loadDataSource$","getDataSource","saveSqlDataSource$","saveSqlDataSource","mergeMap","ToastSuccess","testSqlConnnection$","testSqlConnection","title","desc","imageUrl","warning","warningLink","errorLink","isEnabled","guideLink","guideLinkText","isSharePointWarning","errorText","CreateModule","FormsModule","L10nTranslationModule","CommonModule","StoreModule","forFeature","featureKey","reducer","EffectsModule","declarations","providers","initialState","isTestingConnection","hasConnectionTestFailed","hasConnectionTestSucceeded","saveSqlSourceSuccess","createdChart","isCreating","createChartReducer","createReducer","on","state","selectCreate","createFeatureSelector","selectIsTestingConnection","createSelector","s"],"mappings":"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","file":"1-es5.js","sourcesContent":["<div class=\"container\">\r\n    <div class=\"row\">\r\n        <div class=\"col-12\">\r\n            <section>\r\n                <div class=\"card\">\r\n                    <div class=\"section-heading\">\r\n                        {{Resources.CreateChartStrings.TXT.Title2|translate:locale.language}}\r\n                    </div>\r\n                    <div class=\"suffix\">{{Resources.CreateChartStrings.TXT.TitleDesc|translate:locale.language}}</div>\r\n                    <div class=\"row\">\r\n                        <div class=\"col-12\">\r\n                            <div class=\"form-group\">\r\n                                <label>{{Resources.CreateChartStrings.TXT.ChartName|translate:locale.language}}</label>\r\n                                <input class=\"form-control\" type=\"text\" autocomplete=\"off\"\r\n                                    [disabled]=\"isCreating$|async\" [(ngModel)]=\"createChartModel.name\"\r\n                                    [placeholder]=\"createChartModel.placeholder\" />\r\n                            </div>\r\n                            <div class=\"form-group form-check\">\r\n                                <input class=\"form-check-input\" type=\"checkbox\" [disabled]=\"isCreating$|async\"\r\n                                    [checked]=\"createChartModel.isPublic\" id=\"ispublic-checkbox\" />\r\n                                <label class=\"form-check-label\" for=\"ispublic-checkbox\"><span class=\"font-weight-bold\">{{Resources.CreateChartStrings.TXT.Published|translate:locale.language}}</span>\r\n                                    - {{Resources.CreateChartStrings.TXT.PublishedDesc|translate:locale.language}}</label>\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n                <div class=\"card\">\r\n                    <div class=\"section-heading\">\r\n                        {{Resources.CreateChartStrings.TXT.ChooseSource|translate:locale.language}}\r\n                    </div>\r\n                    <div class=\"suffix\">{{Resources.CreateChartStrings.TXT.ChooseDesc|translate:locale.language}}</div>\r\n                    <div class=\"dataSources\">\r\n                        <div *ngFor=\"let source of dataSources; index as i\"\r\n                            class=\"card p-3 flex-row align-items-center data-source\" [class.disabled]=\"!source.isEnabled\"\r\n                            [class.active]=\"source.isEnabled\" [class.inactive]=\"dataSourcesHighlight[i]\"\r\n                            (mouseenter)=\"onMouseEnter($event, i)\" (mouseleave)=\"onMouseLeave()\">\r\n                            <div class=\"featured-content d-flex flex-grow-1 flex-wrap flex-md-nowrap\">\r\n                                <div class=\"avatar-container fixed-width\">\r\n                                    <div class=\"avatar large\">\r\n                                        <img [src]=\"source.imageUrl\" />\r\n                                    </div>\r\n                                </div>\r\n                                <div class=\"content-container flex-grow-1 align-items-center\">\r\n                                    <div class=\"\">\r\n                                        <div class=\"t-style-three title\">{{source.title|translate:locale.language}}<span\r\n                                                *ngIf=\"!source.isEnabled\">\r\n                                                {{Resources.CreateChartStrings.TXT.NotEnabled|translate:locale.language}}</span>\r\n                                        </div>\r\n                                        <div *ngIf=\"!source.warning && !source.isSharePointWarning\"\r\n                                            class=\"t-style-four suffix\">\r\n                                            {{source.desc|translate:locale.language}}</div>\r\n                                        <div *ngIf=\"source.warning\" class=\"t-style-four suffix errorText\">\r\n                                            <a class=\"text-info\" [href]=\"source.warningLink\"><i\r\n                                                    class=\"fa fa-info-circle\" aria-hidden=\"true\"></i>\r\n                                                {{source.warning|translate:locale.language}}</a>\r\n                                        </div>\r\n                                        <div *ngIf=\"source.isSharePointWarning\"\r\n                                            class=\"t-style-four suffix errorLink text-info\">\r\n                                            <a *ngIf=\"preloadedData?.sharePointRedirectLink\"\r\n                                                [href]=\"preloadedData?.sharePointRedirectLink\" class=\"text-info\"><i\r\n                                                    class=\"fa fa-info-circle\" aria-hidden=\"true\"></i>\r\n                                                {{Resources.CreateChartStrings.SPWarning|translate:locale.language}}</a>\r\n                                            <span *ngIf=\"!preloadedData?.sharePointRedirectLink\" class=\"text-info\">\r\n                                                <i class=\"fa fa-info-circle\" aria-hidden=\"true\"></i>\r\n                                                {{Resources.CreateChartStrings.SPWarning|translate:locale.language}}\r\n                                            </span>\r\n                                        </div>\r\n                                        <p *ngIf=\"source.errorLink\">\r\n                                            <i class=\"fa fa-exclamation-triangle\" aria-hidden=\"true\"></i>\r\n                                            <a [href]=\"source.errorLink\" target=\"_blank\">\r\n                                                {{Resources.CreateChartStrings.TXT.WhyAmISeeing|translate:locale.language}}\r\n                                            </a>\r\n                                        </p>\r\n                                        <p *ngIf=\"source.guideLink\">\r\n                                            <i class=\"fa fa-paperclip\" aria-hidden=\"true\"></i>\r\n                                            <a [href]=\"source.guideLink\" target=\"_blank\">\r\n                                                {{source.guideLinkText|translate:locale.language}}\r\n                                            </a>\r\n                                        </p>\r\n                                    </div>\r\n                                </div>\r\n                                <div class=\"icon-container d-flex align-items-center flex-grow-1 flex-md-grow-0\">\r\n                                    <button class=\"btn btn-sm dSource flex-grow-1 flex-md-grow-0\" [class.btn-success]=\"source.isEnabled\"\r\n                                        [class.btn-default]=\"!source.isEnabled\"\r\n                                        [disabled]=\"!source.isEnabled || (isCreating$|async)\"\r\n                                        (click)=\"createChart(source.type)\">{{Resources.CreateChartStrings.BTN.ChooseThisSource|translate:locale.language}}\r\n                                        »</button>\r\n                                </div>\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            </section>\r\n        </div>\r\n    </div>\r\n</div>\r\n","import { Component, OnInit, OnDestroy, Inject } from '@angular/core';\r\nimport { Store, select } from '@ngrx/store';\r\nimport { Subject, combineLatest, Observable } from 'rxjs';\r\nimport * as fromRoot from '../../reducers';\r\nimport * as fromCreate from '../create.reducers';\r\nimport * as Resources from '../../strings';\r\nimport { DataSourceDescription, demoSource, manualSource, azureTableSource, excelSource, sqlSource, upsSourceDisabled, upsSource, spListSourceDisabled, spListSource, waadSource, waadSourceDisabled } from '../create.models';\r\nimport { PreloadedData } from 'src/app/models';\r\nimport { takeUntil, filter } from 'rxjs/operators';\r\nimport { CreateChart, ResetSaveStatus } from '../create.actions';\r\nimport { Router } from '@angular/router';\r\nimport { ToastError } from 'src/app/shared/shared.actions';\r\nimport { ChartDescription } from 'src/app/shared/shared.models';\r\nimport { InsertChartDescription } from 'src/app/actions';\r\nimport { AnalyticsService } from 'src/app/core/services/analytics.service';\r\nimport { L10nTranslationService, L10N_LOCALE, L10nLocale } from 'angular-l10n';\r\n\r\n@Component({\r\n    selector: 'toc-create-chart',\r\n    templateUrl: './create-chart.component.html',\r\n    styleUrls: ['./create-chart.component.scss']\r\n})\r\nexport class CreateChartComponent implements OnInit, OnDestroy {\r\n    Resources = Resources;\r\n    dataSources: DataSourceDescription[] = [];\r\n    dataSourcesHighlight: boolean[] = [];\r\n    preloadedData: PreloadedData;\r\n    createChartModel = {\r\n        placeholder: '',\r\n        isPublic: true,\r\n        name: ''\r\n    };\r\n    placeholderName = 'Chart #{0}';\r\n    isCreating$: Observable<boolean>;\r\n    private unsubscribe: Subject<void> = new Subject();\r\n\r\n    constructor(@Inject(L10N_LOCALE) public locale: L10nLocale, private store: Store<fromRoot.State>, private translation: L10nTranslationService, private router: Router, private analytics: AnalyticsService) {\r\n        this.analytics.send('Create chart', {});\r\n        combineLatest([this.translation.onChange(), this.store.select(fromRoot.getPreloadedData)])\r\n            .pipe(takeUntil(this.unsubscribe))\r\n            .subscribe(([_, data]) => {\r\n                this.placeholderName = this.translation.translate(Resources.CreateChartStrings.TXT.ChartNamePlaceholder);\r\n                this.preloadedData = data;\r\n                const sources: DataSourceDescription[] = [sqlSource, excelSource, manualSource, azureTableSource, demoSource];\r\n                if (this.preloadedData.isSharePointOnline) {\r\n                    sources.unshift(spListSource);\r\n                    sources.unshift(upsSource);\r\n                } else {\r\n                    sources.unshift(spListSourceDisabled);\r\n                    sources.unshift(upsSourceDisabled);\r\n                }\r\n                if (this.preloadedData.isWAADTenant) {\r\n                    sources.unshift(waadSource);\r\n                } else {\r\n                    sources.unshift(waadSourceDisabled);\r\n                }\r\n                this.dataSources = sources;\r\n                this.dataSourcesHighlight = this.dataSources.map(x => false);\r\n\r\n                for (let i = 1; i < 256; i++) {\r\n                    const placeholderName = this.placeholderName.replace('{0}', String(i));\r\n                    if (this.preloadedData.fullChartList.findIndex(chart => chart.name === placeholderName) === -1) {\r\n                        this.createChartModel = {\r\n                            ...this.createChartModel,\r\n                            placeholder: placeholderName\r\n                        };\r\n                        break;\r\n                    }\r\n                }\r\n            });\r\n        this.store.pipe(takeUntil(this.unsubscribe), select(fromCreate.selectCreatedChart), filter(x => x !== null)).subscribe(chart => {\r\n            //proceed further based on chart type\r\n            this.store.dispatch(new InsertChartDescription(chart));\r\n            switch (chart.dataSourceType) {\r\n                case 13: { //JSON\r\n                    this.router.navigateByUrl(`/chart/${chart.id}?EditMode=1`);\r\n                    break;\r\n                }\r\n                case 2: { //SQL\r\n                    this.router.navigate(['/create/sql', chart.id]);\r\n                    break;\r\n                }\r\n                case 5: { //WAAD\r\n                    window.location.href = `/PickTop/${chart.id}?create=create`;\r\n                    break;\r\n                }\r\n                case 6: { //SP List\r\n                    window.location.href = `/sharepointlist/${chart.id}`;\r\n                    break;\r\n                }\r\n                case 7: { //UPS\r\n                    window.location.href = `/PickTop/${chart.id}?create=create`;\r\n                    break;\r\n                }\r\n                case 8: { //Demo\r\n                    this.router.navigate(['/chart', chart.id]);\r\n                    break;\r\n                }\r\n                case 12: { //Azure Table\r\n                    window.location.href = `/CreateChart/AzureTable?OrgChartDefinitionId=${chart.id}`;\r\n                    break;\r\n                }\r\n                default: {\r\n                    this.store.dispatch(new ToastError('Unknown data source type'));\r\n                }\r\n            }\r\n            this.store.dispatch(ResetSaveStatus());\r\n        });\r\n        this.isCreating$ = store.pipe(select(fromCreate.selectIsCreating));\r\n    }\r\n\r\n    ngOnInit() {\r\n        console.log('on init');\r\n        this.store.dispatch(ResetSaveStatus());\r\n    }\r\n\r\n    createChart(type: number) {\r\n        this.store.dispatch(CreateChart({\r\n            model: {\r\n                ChartName: this.createChartModel.name || this.createChartModel.placeholder,\r\n                IsPublic: this.createChartModel.isPublic,\r\n                DataSourceType: type\r\n            }\r\n        }));\r\n    }\r\n\r\n    onMouseEnter($event: any, index: number) {\r\n        this.dataSourcesHighlight = this.dataSources.map((value, idx) => idx !== index);\r\n    }\r\n\r\n    onMouseLeave() {\r\n        this.dataSourcesHighlight = this.dataSources.map(x => false);\r\n    }\r\n\r\n    ngOnDestroy(): void {\r\n        this.unsubscribe.next();\r\n        this.unsubscribe.complete();\r\n    }\r\n}\r\n","<div class=\"container\">\r\n    <form name=\"sqlForm\" (ngSubmit)=\"f.form.valid && save()\" #f=\"ngForm\" novalidate [class.submitted]=\"f.submitted\">\r\n        <div class=\"card\">\r\n            <div class=\"section-heading\">{{Resources.CreateChartStrings.SQL.Title2|translate:locale.language}}</div>\r\n            <div class=\"suffix\">{{Resources.CreateChartStrings.SQL.TitleDesc|translate:locale.language}}</div>\r\n            <div class=\"row horizontal-form\">\r\n                <div class=\"col-3\"><label>{{Resources.Strings.TXT.ConnectionString|translate:locale.language}}</label></div>\r\n                <div class=\"col-9\">\r\n                    <input type=\"text\" class=\"form-control\" required [(ngModel)]=\"model.ConnectionString\" name=\"connectionString\">\r\n                </div>\r\n            </div>\r\n            <div class=\"row horizontal-form\">\r\n                <div class=\"col-3\"><label>{{Resources.Strings.TXT.SELECTquery|translate:locale.language}}</label></div>\r\n                <div class=\"col-9\">\r\n                    <input type=\"text\" class=\"form-control\" required [(ngModel)]=\"model.SelectQuery\" name=\"selectQuery\">\r\n                </div>\r\n            </div>\r\n            <div class=\"row horizontal-form\">\r\n                <div class=\"col-3\"><label>{{Resources.Strings.TXT.PrimaryKeyColumn|translate:locale.language}}</label></div>\r\n                <div class=\"col-9\">\r\n                    <input type=\"text\" class=\"form-control\" required [(ngModel)]=\"model.PrimaryKeyColumn\" name=\"primaryKey\">\r\n                </div>\r\n            </div>\r\n            <div class=\"row horizontal-form\">\r\n                <div class=\"col-3\"><label>{{Resources.Strings.TXT.ParentColumn|translate:locale.language}}</label></div>\r\n                <div class=\"col-9\">\r\n                    <input type=\"text\" class=\"form-control\" required [(ngModel)]=\"model.ParentColumn\" name=\"parentKey\">\r\n                </div>\r\n            </div>\r\n            <div class=\"row horizontal-form\">\r\n                <div class=\"col-3\"><label>{{Resources.Strings.TXT.SearchQuery|translate:locale.language}}</label></div>\r\n                <div class=\"col-9\">\r\n                    <input type=\"text\" class=\"form-control\" [(ngModel)]=\"model.SearchQuery\" name=\"searchQuery\">\r\n                </div>\r\n            </div>\r\n            <div class=\"form-group hidden alert alert-danger\" *ngIf=\"connectionFail\"></div>\r\n            <div class=\"form-group hidden alert alert-success\" *ngIf=\"connectionSuccess\">\r\n                {{Resources.CreateChartStrings.SQL.ConnectionSuccess|translate:locale.language}}\r\n            </div>\r\n            <div class=\"row pull-right\">\r\n                <div class=\"col-12\">\r\n                    <button type=\"submit\" class=\"btn\"\r\n                        [ngClass]=\"{'btn-info': !(hasConnectionTestFailed$|async) && !(hasConnectionTestSucceeded$|async), 'btn-danger': (hasConnectionTestFailed$|async), 'btn-success': (hasConnectionTestSucceeded$|async), 'disabled': (isTestingConnection$|async) }\"\r\n                        (click)=\"testConnection()\">{{Resources.CreateChartStrings.SQL.TestConnection|translate:locale.language}}</button>\r\n                    <button type=\"submit\"\r\n                        class=\"btn btn-success\">{{Resources.Strings.BUTTON.SAVE|translate:locale.language}}</button>\r\n                </div>\r\n            </div>\r\n            <div class=\"clearfix\"></div>\r\n        </div>\r\n    </form>\r\n</div>\r\n","import { Component, OnInit, OnDestroy, Inject } from '@angular/core';\r\nimport { Subject, Observable } from 'rxjs';\r\nimport { L10N_LOCALE, L10nLocale } from 'angular-l10n';\r\nimport * as fromRoot from '../../reducers';\r\nimport * as Resources from '../../strings';\r\nimport * as fromCreate from '../create.reducers';\r\nimport { Store, select } from '@ngrx/store';\r\nimport { takeUntil, filter, withLatestFrom } from 'rxjs/operators';\r\nimport { LoadDataSource, TestSqlConnection, SaveSqlDataSource, ResetSaveStatus } from '../create.actions';\r\nimport { ExternalSqlSourceViewModel } from '../create.models';\r\nimport { Router } from '@angular/router';\r\n\r\n@Component({\r\n    selector: 'toc-sql-source',\r\n    templateUrl: './sql-source.component.html',\r\n    styleUrls: ['./sql-source.component.scss']\r\n})\r\nexport class SqlSourceComponent implements OnInit, OnDestroy {\r\n    Resources = Resources;\r\n    chartId$: Observable<string>;\r\n    chartId: string;\r\n    dataSource$: Observable<ExternalSqlSourceViewModel>;\r\n    hasConnectionTestSucceeded$: Observable<boolean>;\r\n    hasConnectionTestFailed$: Observable<boolean>;\r\n    isTestingConnection$: Observable<boolean>;\r\n    model: ExternalSqlSourceViewModel = {\r\n        ConnectionString: '',\r\n        ParentColumn: '',\r\n        PrimaryKeyColumn: '',\r\n        SearchQuery: '',\r\n        SelectQuery: ''\r\n    };\r\n    connectionFail = false;\r\n    connectionSuccess = false;\r\n    private unsubscribe: Subject<void> = new Subject();\r\n\r\n    constructor(@Inject(L10N_LOCALE) public locale: L10nLocale, private store: Store<fromRoot.State>, private router: Router) {\r\n        this.chartId$ = this.store.pipe(select(fromRoot.getChartId));\r\n        this.chartId$.pipe(takeUntil(this.unsubscribe), filter(x => x !== '')).subscribe(x => {\r\n            store.dispatch(LoadDataSource({ chartId: x }));\r\n            this.chartId = x;\r\n        });\r\n        this.dataSource$ = this.store.pipe(select(fromCreate.selectDataSource));\r\n        this.dataSource$.pipe(takeUntil(this.unsubscribe)).subscribe(x => {\r\n            this.model = { ...x };\r\n        });\r\n        this.hasConnectionTestFailed$ = this.store.pipe(select(fromCreate.selectHasConnectionTestFailed));\r\n        this.hasConnectionTestSucceeded$ = this.store.pipe(select(fromCreate.selectHasConnectionTestSucceeded));\r\n        this.store.pipe(\r\n            select(fromCreate.selectSaveSqlSourceSuccess),\r\n            takeUntil(this.unsubscribe),\r\n            filter(x => x),\r\n            withLatestFrom(this.chartId$)\r\n        ).subscribe(([_, chartId]) => {\r\n            this.router.navigate(['/chart', chartId]);\r\n            this.store.dispatch(ResetSaveStatus());\r\n        });\r\n    }\r\n\r\n    ngOnInit() {\r\n    }\r\n\r\n    testConnection() {\r\n        this.store.dispatch(TestSqlConnection({ dataSource: this.model }));\r\n    }\r\n\r\n    save() {\r\n        this.store.dispatch(SaveSqlDataSource({ chartId: this.chartId, dataSource: this.model }));\r\n    }\r\n\r\n    ngOnDestroy(): void {\r\n        this.unsubscribe.next();\r\n        this.unsubscribe.complete();\r\n    }\r\n}\r\n","import { Injectable } from '@angular/core';\r\nimport { HttpClient } from '@angular/common/http';\r\nimport { ExternalSqlSourceViewModel, CreateChartViewModel } from './create.models';\r\nimport { ChartDescription } from '../shared/shared.models';\r\n\r\n@Injectable()\r\nexport class CreateChartService {\r\n    constructor(private http: HttpClient) {}\r\n\r\n    createChart(model: CreateChartViewModel) {\r\n        return this.http.post<ChartDescription>('/api/create/chart', model);\r\n    }\r\n\r\n    getDataSource(chartId: string) {\r\n        return this.http.get<any>(`/api/create/sql/${chartId}`);\r\n    }\r\n\r\n    saveSqlDataSource(chartId: string, model: ExternalSqlSourceViewModel) {\r\n        return this.http.post<ExternalSqlSourceViewModel>(`/api/create/sql/${chartId}`, model);\r\n    }\r\n\r\n    testSqlConnection(dataSource: ExternalSqlSourceViewModel) {\r\n        return this.http.post<string>('/api/testconnection', dataSource);\r\n    }\r\n}\r\n","import { NgModule } from '@angular/core';\r\nimport { Routes, RouterModule } from '@angular/router';\r\nimport { CreateChartComponent } from './components/create-chart.component';\r\nimport { SqlSourceComponent } from './components/sql-source.component';\r\n\r\nconst routes: Routes = [\r\n    { path: '', component: CreateChartComponent },\r\n    { path: 'sql/:chartId', component: SqlSourceComponent }\r\n];\r\n\r\n@NgModule({\r\n    imports: [RouterModule.forChild(routes)],\r\n    exports: [RouterModule]\r\n})\r\nexport class CreateRoutingModule { }\r\n","import { createAction, props } from '@ngrx/store';\r\nimport { ExternalSqlSourceViewModel, CreateChartViewModel } from './create.models';\r\nimport { ChartDescription } from '../shared/shared.models';\r\n\r\nexport const LoadDataSource = createAction(\r\n    '[Create] Load data source',\r\n    props<{ chartId: string }>()\r\n);\r\n\r\nexport const LoadDataSourceSuccess = createAction(\r\n    '[Create] Load data source success',\r\n    props<{ dataSource: any }>()\r\n);\r\n\r\nexport const LoadDataSourceFailure = createAction(\r\n    '[Create] Load data source failure'\r\n);\r\n\r\nexport const SaveSqlDataSource = createAction(\r\n    '[Create] Save SQL data source',\r\n    props<{ chartId: string, dataSource: ExternalSqlSourceViewModel }>()\r\n);\r\n\r\nexport const SaveSqlDataSourceSuccess = createAction(\r\n    '[Create] Save SQL data source success',\r\n    props<{ dataSource: ExternalSqlSourceViewModel }>()\r\n);\r\n\r\nexport const SaveSqlDataSourceFailure = createAction(\r\n    '[Create] Save SQL data source failure'\r\n);\r\n\r\nexport const TestSqlConnection = createAction(\r\n    '[Create] Test sql connection',\r\n    props<{ dataSource: ExternalSqlSourceViewModel }>()\r\n);\r\n\r\nexport const TestSqlConnectionSuccess = createAction(\r\n    '[Create] Test sql connection success'\r\n);\r\n\r\nexport const TestSqlConnectionFailure = createAction(\r\n    '[Create] Test sql connection failure'\r\n);\r\n\r\nexport const ResetSaveStatus = createAction(\r\n    '[Create] Reset save status'\r\n);\r\n\r\nexport const CreateChart = createAction(\r\n    '[Create] Create chart',\r\n    props<{ model: CreateChartViewModel }>()\r\n);\r\n\r\nexport const CreateChartSuccess = createAction(\r\n    '[Create] Create chart success',\r\n    props<ChartDescription>()\r\n);\r\n\r\nexport const CreateChartFailure = createAction(\r\n    '[Create] Create chart failure'\r\n);\r\n","import { Injectable } from '@angular/core';\r\nimport { Actions, Effect, ofType, createEffect } from '@ngrx/effects';\r\nimport { EMPTY, of } from 'rxjs';\r\nimport { map, mergeMap, catchError, exhaustMap, switchMap } from 'rxjs/operators';\r\nimport { CreateChartService } from './create-chart.service';\r\nimport { LoadDataSource, LoadDataSourceSuccess, LoadDataSourceFailure, TestSqlConnection, TestSqlConnectionSuccess, TestSqlConnectionFailure, SaveSqlDataSource, SaveSqlDataSourceSuccess, SaveSqlDataSourceFailure, CreateChart, CreateChartSuccess, CreateChartFailure } from './create.actions';\r\nimport { ToastSuccess, ToastError } from '../shared/shared.actions';\r\n\r\n@Injectable()\r\nexport class CreateEffects {\r\n    constructor(private actions$: Actions, private createChartService: CreateChartService) {}\r\n\r\n    createChart$ = createEffect(() => this.actions$.pipe(\r\n        ofType(CreateChart),\r\n        switchMap(action => this.createChartService.createChart(action.model).pipe(map(data => CreateChartSuccess(data)))),\r\n        catchError(error => of(CreateChartFailure()))\r\n    ));\r\n\r\n    loadDataSource$ = createEffect(() => this.actions$.pipe(\r\n        ofType(LoadDataSource),\r\n        switchMap(action => this.createChartService.getDataSource(action.chartId).pipe(map(data => LoadDataSourceSuccess({ dataSource: data })))),\r\n        catchError(error => of(LoadDataSourceFailure()))\r\n    ));\r\n\r\n    saveSqlDataSource$ = createEffect(() => this.actions$.pipe(\r\n        ofType(SaveSqlDataSource),\r\n        switchMap(action => this.createChartService.saveSqlDataSource(action.chartId, action.dataSource).pipe(mergeMap(data =>\r\n            [SaveSqlDataSourceSuccess({ dataSource: data }), new ToastSuccess('Data source saved.')]\r\n        ))),\r\n        catchError(error => of(SaveSqlDataSourceFailure()).pipe(mergeMap(x => [x, new ToastError('Could not save data source.')])))\r\n    ));\r\n\r\n    testSqlConnnection$ = createEffect(() => this.actions$.pipe(\r\n        ofType(TestSqlConnection),\r\n        switchMap(action => this.createChartService.testSqlConnection(action.dataSource).pipe(mergeMap(data => {\r\n            if (data === 'OK') {\r\n                return [TestSqlConnectionSuccess(), new ToastSuccess('Connection test succeeded.')];\r\n            } else {\r\n                return [TestSqlConnectionFailure(), new ToastError('Connection test failed.')];\r\n            }\r\n        }))),\r\n        catchError(error => of(TestSqlConnectionFailure()).pipe(mergeMap(x => [x, new ToastError('Connection test failed on the server.')])))\r\n    ));\r\n}\r\n","export interface DataSourceDescription {\r\n    isEnabled: boolean;\r\n    imageUrl: string;\r\n    title: string;\r\n    desc: string;\r\n    warning?: string;\r\n    warningLink?: string;\r\n    isSharePointWarning?: boolean;\r\n    errorLink?: string;\r\n    errorText?: string;\r\n    guideLink?: string;\r\n    guideLinkText?: string;\r\n    type: number;\r\n}\r\n\r\nexport const waadSourceDisabled: DataSourceDescription = {\r\n    title: 'CreateChartStrings.TXT.SourceTitleAD',\r\n    desc: 'CreateChartStrings.TXT.SourceDescAD',\r\n    imageUrl: '/Images/ux/dataSources/WAAD.png',\r\n    warning: 'CreateChartStrings.ADWarning',\r\n    warningLink: '/Tenant/SimpleConsent',\r\n    errorLink: '/website/guides/aad-offline-error.cshtml',\r\n    isEnabled: false,\r\n    type: 5\r\n};\r\nexport const waadSource: DataSourceDescription = {\r\n    title: 'CreateChartStrings.TXT.SourceTitleAD',\r\n    desc: 'CreateChartStrings.TXT.SourceDescAD',\r\n    imageUrl: '/Images/ux/dataSources/WAAD.png',\r\n    guideLink: '/website/guides/creating-from-aad.cshtml',\r\n    guideLinkText: 'View our Getting Started guide for Azure Active Directory',\r\n    isEnabled: true,\r\n    type: 5\r\n};\r\nexport const upsSourceDisabled: DataSourceDescription = {\r\n    title: 'CreateChartStrings.TXT.SourceTitleUPS',\r\n    desc: 'CreateChartStrings.TXT.SourceDescUPS',\r\n    imageUrl: '/Images/ux/dataSources/SharePointUPS.png',\r\n    isSharePointWarning: true,\r\n    errorLink: '/website/guides/sharepoint-offline-error.cshtml',\r\n    errorText: 'Why am I seeing this error message and how do I resolve it?',\r\n    isEnabled: false,\r\n    type: 7\r\n};\r\nexport const upsSource: DataSourceDescription = {\r\n    title: 'CreateChartStrings.TXT.SourceTitleUPS',\r\n    desc: 'CreateChartStrings.TXT.SourceDescUPS',\r\n    imageUrl: '/Images/ux/dataSources/SharePointUPS.png',\r\n    guideLink: '/website/guides/creating-from-ups.cshtml',\r\n    guideLinkText: 'View our Getting Started guide for SharePoint User Profile Service',\r\n    isEnabled: true,\r\n    type: 7\r\n};\r\nexport const spListSourceDisabled: DataSourceDescription = {\r\n    title: 'CreateChartStrings.TXT.SourceTitleSPList',\r\n    desc: 'CreateChartStrings.TXT.SourceDescSPList',\r\n    imageUrl: '/Images/ux/dataSources/SharePointList.png',\r\n    isSharePointWarning: true,\r\n    errorLink: '/website/guides/sharepoint-offline-error.cshtml',\r\n    errorText: 'Why am I seeing this error message and how do I resolve it?',\r\n    isEnabled: false,\r\n    type: 6\r\n};\r\nexport const spListSource: DataSourceDescription = {\r\n    title: 'CreateChartStrings.TXT.SourceTitleSPList',\r\n    desc: 'CreateChartStrings.TXT.SourceDescSPList',\r\n    imageUrl: '/Images/ux/dataSources/SharePointList.png',\r\n    guideLink: '/website/guides/creating-from-sharepoint-list.cshtml',\r\n    guideLinkText: 'View our Getting Started guide for SharePoint List',\r\n    isEnabled: true,\r\n    type: 6\r\n};\r\nexport const sqlSource: DataSourceDescription = {\r\n    title: 'CreateChartStrings.TXT.SourceTitleSQL',\r\n    desc: 'CreateChartStrings.TXT.SourceDescSQL',\r\n    imageUrl: '/Images/ux/dataSources/SQLServer.png',\r\n    guideLink: '/website/guides/creating-from-database.cshtml',\r\n    guideLinkText: 'View our Getting Started guide for the SQL server data source',\r\n    isEnabled: true,\r\n    type: 2\r\n};\r\nexport const excelSource: DataSourceDescription = {\r\n    title: 'CreateChartStrings.TXT.SourceTitleExcel',\r\n    desc: 'CreateChartStrings.TXT.SourceDescExcel',\r\n    imageUrl: '/Images/ux/dataSources/Excel.png',\r\n    isEnabled: true,\r\n    type: 13\r\n};\r\nexport const manualSource: DataSourceDescription = {\r\n    title: 'CreateChartStrings.TXT.SourceTitleManual',\r\n    desc: 'CreateChartStrings.TXT.SourceDescManual',\r\n    imageUrl: '/Images/ux/dataSources/manualChart.png',\r\n    guideLink: '/website/guides/manually-drawing-an-orgchart.cshtml',\r\n    guideLinkText: 'View our Getting Started guide for the Manual data source',\r\n    isEnabled: true,\r\n    type: 13\r\n};\r\nexport const azureTableSource: DataSourceDescription = {\r\n    title: 'Azure Table',\r\n    desc: 'Create chart from Azure Table Storage',\r\n    imageUrl: '/Images/ux/dataSources/AzureTable.png',\r\n    guideLink: '/website/guides/creating-an-orgchart-from-azuretable.cshtml',\r\n    guideLinkText: 'View our guide for the Azure Table source',\r\n    isEnabled: true,\r\n    type: 12\r\n};\r\nexport const demoSource: DataSourceDescription = {\r\n    title: 'CreateChartStrings.TXT.SourceTitleDemo',\r\n    desc: 'CreateChartStrings.TXT.SourceDescDemo',\r\n    imageUrl: '/Images/ux/dataSources/demochart.png',\r\n    isEnabled: true,\r\n    type: 8\r\n};\r\n\r\nexport interface ExternalSqlSourceViewModel {\r\n    ConnectionString: string;\r\n    SelectQuery: string;\r\n    PrimaryKeyColumn: string;\r\n    ParentColumn: string;\r\n    SearchQuery?: string;\r\n}\r\n\r\nexport interface CreateChartViewModel {\r\n    ChartName?: string;\r\n    IsPublic: boolean;\r\n    DataSourceType: number;\r\n}\r\n","import { NgModule } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\n\r\nimport { CreateRoutingModule } from './create-routing.module';\r\nimport { CreateChartComponent } from './components/create-chart.component';\r\nimport { L10nTranslationModule } from 'angular-l10n';\r\nimport { FormsModule } from '@angular/forms';\r\nimport { StoreModule } from '@ngrx/store';\r\nimport * as fromCreate from './create.reducers';\r\nimport { SqlSourceComponent } from './components/sql-source.component';\r\nimport { EffectsModule } from '@ngrx/effects';\r\nimport { CreateEffects } from './create.effects';\r\nimport { CreateChartService } from './create-chart.service';\r\n\r\n@NgModule({\r\n    declarations: [CreateChartComponent, SqlSourceComponent],\r\n    imports: [\r\n        FormsModule,\r\n        L10nTranslationModule,\r\n        CommonModule,\r\n        CreateRoutingModule,\r\n        StoreModule.forFeature(fromCreate.featureKey, fromCreate.reducer),\r\n        EffectsModule.forFeature([CreateEffects])\r\n    ],\r\n    providers: [\r\n        CreateChartService\r\n    ]\r\n})\r\nexport class CreateModule { }\r\n","import { createFeatureSelector, createSelector, createReducer, Action, on } from '@ngrx/store';\r\n\r\nimport * as fromRoot from '../reducers';\r\nimport { LoadDataSourceSuccess, TestSqlConnection, TestSqlConnectionSuccess, TestSqlConnectionFailure, SaveSqlDataSourceSuccess, ResetSaveStatus, CreateChartSuccess, CreateChart, CreateChartFailure } from './create.actions';\r\nimport { ExternalSqlSourceViewModel } from './create.models';\r\nimport { ChartDescription } from '../shared/shared.models';\r\n\r\nexport const featureKey = 'create';\r\n\r\nexport interface CreateState {\r\n    dataSource: ExternalSqlSourceViewModel;\r\n    isTestingConnection: boolean;\r\n    hasConnectionTestFailed: boolean;\r\n    hasConnectionTestSucceeded: boolean;\r\n    saveSqlSourceSuccess: boolean;\r\n    createdChart: ChartDescription;\r\n    isCreating: boolean;\r\n}\r\n\r\nexport interface State extends fromRoot.State {\r\n    create: CreateState;\r\n}\r\n\r\nexport const initialState: CreateState = {\r\n    dataSource: null,\r\n    isTestingConnection: false,\r\n    hasConnectionTestFailed: false,\r\n    hasConnectionTestSucceeded: false,\r\n    saveSqlSourceSuccess: false,\r\n    createdChart: null,\r\n    isCreating: false\r\n};\r\n\r\nconst createChartReducer = createReducer(initialState,\r\n    on(LoadDataSourceSuccess, (state, action) => ({ ...state, dataSource: action.dataSource, hasConnectionTestFailed: false, hasConnectionTestSucceeded: false })),\r\n    on(TestSqlConnection, (state) => ({ ...state, isTestingConnection: true })),\r\n    on(TestSqlConnectionSuccess, (state) => ({ ...state, isTestingConnection: true, hasConnectionTestFailed: false, hasConnectionTestSucceeded: true })),\r\n    on(TestSqlConnectionFailure, (state) => ({ ...state, isTestingConnection: true, hasConnectionTestFailed: true, hasConnectionTestSucceeded: false })),\r\n    on(SaveSqlDataSourceSuccess, (state) => ({ ...state, saveSqlSourceSuccess: true })),\r\n    on(CreateChart, (state) => ({ ...state, isCreating: true })),\r\n    on(CreateChartSuccess, (state, action) => ({ ...state, createdChart: action })),\r\n    on(CreateChartFailure, (state) => ({ ...state, isCreating: false })),\r\n    on(ResetSaveStatus, (state) => ({ ...state, saveSqlSourceSuccess: false, createdChart: null, isCreating: false }))\r\n);\r\n\r\nexport function reducer(state: CreateState | undefined, action: Action) {\r\n    return createChartReducer(state, action);\r\n}\r\n\r\nexport const selectCreate = createFeatureSelector<State, CreateState>(featureKey);\r\n\r\nexport const selectIsTestingConnection = createSelector(selectCreate, state => state.isTestingConnection);\r\nexport const selectDataSource = createSelector(selectCreate, state => state.dataSource);\r\nexport const selectHasConnectionTestFailed = createSelector(selectCreate, state => state.hasConnectionTestFailed);\r\nexport const selectHasConnectionTestSucceeded = createSelector(selectCreate, state => state.hasConnectionTestSucceeded);\r\nexport const selectSaveSqlSourceSuccess = createSelector(selectCreate, s => s.saveSqlSourceSuccess);\r\nexport const selectCreatedChart = createSelector(selectCreate, s => s.createdChart);\r\nexport const selectIsCreating = createSelector(selectCreate, s => s.isCreating);\r\n"]}