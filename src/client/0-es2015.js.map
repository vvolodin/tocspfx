{"version":3,"sources":["./src/app/admin/admin-routing.module.ts","./src/app/admin/admin.actions.ts","./src/app/admin/admin.effects.ts","./src/app/admin/admin.module.ts","./src/app/admin/admin.reducers.ts","./src/app/admin/components/account.component.ts","./src/app/admin/components/account.component.html","./src/app/admin/components/api-guide.component.ts","./src/app/admin/components/api-guide.component.html","./src/app/admin/components/api.component.html","./src/app/admin/components/api.component.ts","./src/app/admin/components/appearance.component.html","./src/app/admin/components/appearance.component.ts","./src/app/admin/components/information-sources.component.html","./src/app/admin/components/information-sources.component.ts","./src/app/admin/components/security.component.html","./src/app/admin/components/security.component.ts","./src/app/admin/services/admin.service.ts"],"names":[],"mappings":"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","file":"0-es2015.js","sourcesContent":["import { NgModule } from '@angular/core';\r\nimport { Routes, RouterModule } from '@angular/router';\r\nimport { AppearanceComponent } from './components/appearance.component';\r\nimport { SecurityComponent } from './components/security.component';\r\nimport { InformationSourcesComponent } from './components/information-sources.component';\r\nimport { AccountComponent } from './components/account.component';\r\nimport { ApiComponent } from './components/api.component';\r\nimport { ApiGuideComponent } from './components/api-guide.component';\r\n\r\nconst routes: Routes = [\r\n    {\r\n        path: '',\r\n        children: [\r\n            {\r\n                path: '',\r\n                children: [\r\n                    { path: '', component: AppearanceComponent },\r\n                    { path: 'security', component: SecurityComponent },\r\n                    { path: 'informationsources', component: InformationSourcesComponent },\r\n                    { path: 'account', component: AccountComponent },\r\n                    { path: 'api', component: ApiComponent },\r\n                    { path: 'api-guide', component: ApiGuideComponent }\r\n                ]\r\n            }\r\n        ]\r\n    }\r\n];\r\n\r\n@NgModule({\r\n    imports: [RouterModule.forChild(routes)],\r\n    exports: [RouterModule]\r\n})\r\nexport class AdminRoutingModule {}\r\n","import { createAction, props } from '@ngrx/store';\r\nimport {\r\n    CompositeModel,\r\n    SecurityGroup,\r\n    AvailableEntries,\r\n    SecurityGroupEntry,\r\n    SecurityChartViewModel,\r\n    InformationSourceViewModel,\r\n    SharePointListInfo,\r\n    ApiKey\r\n} from './admin.models';\r\nimport { AppearanceFormValue } from './admin.reducers';\r\nimport { string } from 'parsimmon';\r\n\r\nexport const loadCompositeModel = createAction('[Admin] Load composite model');\r\n\r\nexport const loadCompositeModelSuccess = createAction(\r\n    '[Admin] Load composite model success',\r\n    props<{ model: CompositeModel }>()\r\n);\r\n\r\nexport const loadCompositeModelFailure = createAction('[Admin] Load composite model failure');\r\n\r\nexport const loadCompanyGroups = createAction('[Admin] Load company groups');\r\n\r\nexport const loadCompanyGroupsSuccess = createAction(\r\n    '[Admin] Load company groups success',\r\n    props<{ entries: AvailableEntries }>()\r\n);\r\n\r\nexport const loadCompanyGroupsFailure = createAction('[Admin] Load company groups failure');\r\n\r\nexport const loadCharts = createAction('[Admin] Load charts');\r\n\r\nexport const loadChartsSuccess = createAction(\r\n    '[Admin] Load charts success',\r\n    props<{ charts: SecurityChartViewModel[] }>()\r\n);\r\n\r\nexport const loadChartsFailure = createAction('[Admin] Load charts failure');\r\n\r\nexport const loadCacheSetting = createAction('[Admin] Load cache setting');\r\n\r\nexport const loadCacheSettingSuccess = createAction('[Admin] Load cache setting success', props<{ value: boolean }>());\r\n\r\nexport const loadCacheSettingFailure = createAction('[Admin] Load cache setting failure');\r\n\r\nexport const setAppearanceFormFromCompositeModel = createAction(\r\n    '[Admin] Set appearance form from model',\r\n    props<{ model: CompositeModel }>()\r\n);\r\n\r\nexport const saveAppearance = createAction('[Admin] Save appearance', props<{ form: AppearanceFormValue }>());\r\n\r\nexport const saveAppearanceFailure = createAction('[Admin] Save appearance failure');\r\n\r\nexport const saveAppearanceSuccess = createAction('[Admin] Save appearance success');\r\n\r\nexport const saveCreators = createAction('[Admin] Save chart creators', props<{ creators: string[] }>());\r\n\r\nexport const saveCreatorsSuccess = createAction('[Admin] Save chart creators success', props<{ creators: string[] }>());\r\n\r\nexport const saveCreatorsFailure = createAction('[Admin] Save chart creators failure');\r\n\r\nexport const createSecurityGroup = createAction('[Admin] Create security group', props<{ name: string }>());\r\n\r\nexport const createSecurityGroupSuccess = createAction(\r\n    '[Admin] Create security group success',\r\n    props<{ group: SecurityGroup }>()\r\n);\r\n\r\nexport const createSecurityGroupFailure = createAction('[Admin] Create security group failure');\r\n\r\nexport const removeSecurityGroup = createAction('[Admin] Remove security group', props<{ id: number }>());\r\n\r\nexport const removeSecurityGroupSuccess = createAction(\r\n    '[Admin] Remove security group success',\r\n    props<{ groups: SecurityGroup[] }>()\r\n);\r\n\r\nexport const removeSecurityGroupFailure = createAction('[Admin] Remove security group failure');\r\n\r\nexport const addSecurityGroupEntry = createAction(\r\n    '[Admin] Add security group entry',\r\n    props<{ entry: SecurityGroupEntry }>()\r\n);\r\n\r\nexport const addSecurityGroupEntrySuccess = createAction(\r\n    '[Admin] Add security group entry success',\r\n    props<{ group: SecurityGroup }>()\r\n);\r\n\r\nexport const addSecurityGroupEntryFailure = createAction('[Admin] Add security group entry failure');\r\n\r\nexport const removeSecurityGroupEntry = createAction('[Admin] Remove security group entry', props<{ id: number }>());\r\n\r\nexport const removeSecurityGroupEntrySuccess = createAction(\r\n    '[Admin] Remove security group entry success',\r\n    props<{ group: SecurityGroup }>()\r\n);\r\n\r\nexport const removeSecurityGroupEntryFailure = createAction('[Admin] Remove security group entry failure');\r\n\r\nexport const saveGlobalExternalSetting = createAction(\r\n    '[Admin] Save global external users setting',\r\n    props<{ value: boolean }>()\r\n);\r\n\r\nexport const saveGlobalExternalSettingSuccess = createAction(\r\n    '[Admin] Save global external users setting success',\r\n    props<{ value: boolean }>()\r\n);\r\n\r\nexport const saveGlobalExternalSettingFailure = createAction('[Admin] Save global external users setting failure');\r\n\r\nexport const saveExternalUsersSetting = createAction(\r\n    '[Admin] Save external users setting',\r\n    props<{ chart: SecurityChartViewModel }>()\r\n);\r\n\r\nexport const saveExternalUsersSettingSuccess = createAction(\r\n    '[Admin] Save external users setting success',\r\n    props<{ chart: SecurityChartViewModel }>()\r\n);\r\n\r\nexport const saveExternalUsersSettingFailure = createAction(\r\n    '[Admin] Save external users setting failure',\r\n    props<{ chart: SecurityChartViewModel }>()\r\n);\r\n\r\nexport const saveChart = createAction('[Admin] Save security chart', props<{ chart: SecurityChartViewModel }>());\r\n\r\nexport const saveChartSuccess = createAction(\r\n    '[Admin] Save security chart success',\r\n    props<{ chart: SecurityChartViewModel }>()\r\n);\r\n\r\nexport const saveChartFailure = createAction(\r\n    '[Admin] Save security chart failure',\r\n    props<{ chart: SecurityChartViewModel }>()\r\n);\r\n\r\nexport const saveAdminEmail = createAction(\r\n    '[Admin] Save admin email',\r\n    props<{ AdminEmail: string; CompanyName: string }>()\r\n);\r\n\r\nexport const saveAdminEmailSuccess = createAction(\r\n    '[Admin] Save admin email success',\r\n    props<{ AdminEmail: string; CompanyName: string }>()\r\n);\r\n\r\nexport const saveAdminEmailFailure = createAction('[Admin] Save admin email failure');\r\n\r\nexport const saveCacheSetting = createAction('[Admin] Save cache setting', props<{ value: boolean }>());\r\n\r\nexport const saveCacheSettingSuccess = createAction('[Admin] Save cache setting success', props<{ value: boolean }>());\r\n\r\nexport const saveCacheSettingFailure = createAction('[Admin] Save cache setting failure');\r\n\r\nexport const loadInformationSource = createAction('[Admin] Load information source', props<{ sourceId: string }>());\r\n\r\nexport const loadInformationSourceSuccess = createAction(\r\n    '[Admin] Load information source success',\r\n    props<{ source: InformationSourceViewModel }>()\r\n);\r\n\r\nexport const loadInformationSourceFailure = createAction('[Admin] Load information source failure');\r\n\r\nexport const getSharePointLists = createAction('[Admin] Get SP lists');\r\n\r\nexport const getSharePointListsSuccess = createAction('[Admin] Get SP lists success', props<{ lists: SharePointListInfo[]}>());\r\n\r\nexport const getSharePointListsFailure = createAction('[Admin] Get SP lists failure');\r\n\r\nexport const getSharePointListFields = createAction('[Admin] Get SP list fields', props<{ id: string }>());\r\nexport const getSharePointListFieldsSuccess = createAction(\r\n    '[Admin] Get SP list fields success',\r\n    props<{ fields: Array<{ [paramName: string]: string }> }>()\r\n);\r\nexport const getSharePointListFieldsFailure = createAction('[Admin] Get SP list fields failure');\r\n\r\nexport const saveInformationSource = createAction(\r\n    '[Admin] Save information source',\r\n    props<{ source: InformationSourceViewModel }>()\r\n);\r\nexport const saveInformationSourceSuccess = createAction(\r\n    '[Admin] Save information source success',\r\n    props<{ id: string, result: boolean }>()\r\n);\r\nexport const saveInformationSourceFailure = createAction('[Admin] Save information source failure');\r\n\r\nexport const deleteInformationSource = createAction('[Admin] Delete information source', props<{ id: string }>());\r\nexport const deleteInformationSourceSuccess = createAction(\r\n    '[Admin] Delete information source success',\r\n    props<{ id: string, result: boolean }>()\r\n);\r\nexport const deleteInformationSourceFailure = createAction('[Admin] Delete information source failure');\r\n\r\nexport const testInformationSource = createAction('[Admin] Test information source', props<{ id: string }>());\r\nexport const testInformationSourceSuccess = createAction('[Admin] Test information source success', props<{ result: string }>());\r\nexport const testInformationSourceFailure = createAction('[Admin] Test information source failure');\r\n\r\nexport const clearSavedSourceId = createAction('[Admin] Clear saved source id');\r\n\r\nexport const loadApiKeys = createAction('[Admin] Load API keys');\r\nexport const loadApiKeysSuccess = createAction(\r\n    '[Admin] Load API keys success',\r\n    props<{ apiKeys: ApiKey[] }>()\r\n);\r\nexport const loadApiKeysFailure = createAction('[Admin] Load API keys failure');\r\n\r\nexport const createApiKey = createAction('[Admin] Create API key');\r\nexport const createApiKeySuccess = createAction(\r\n    '[Admin] Create API key success',\r\n    props<{ apiKey: ApiKey }>()\r\n);\r\nexport const createApiKeyFailure = createAction('[Admin] Create API key failure');\r\n\r\nexport const revokeApiKey = createAction('[Admin] Revoke API key',\r\n    props<{ id: number }>()\r\n);\r\nexport const revokeApiKeySuccess = createAction(\r\n    '[Admin] Revoke API key success',\r\n    props<{ id: number }>()\r\n);\r\nexport const revokeApiKeyFailure = createAction('[Admin] Revoke API key failure');\r\n","import { Actions, ofType, createEffect } from '@ngrx/effects';\r\nimport { Injectable } from '@angular/core';\r\nimport * as fromAdmin from './admin.reducers';\r\nimport * as AdminActions from './admin.actions';\r\nimport { of } from 'rxjs';\r\nimport { switchMap, catchError, map, mergeMap } from 'rxjs/operators';\r\nimport { ToastError, ToastSuccess } from '../shared/shared.actions';\r\nimport { AdminService } from './services/admin.service';\r\nimport { ActionCreator, Creator, resultMemoize, Action } from '@ngrx/store';\r\n\r\n@Injectable()\r\nexport class AdminEffects {\r\n    constructor(\r\n        private actions$: Actions,\r\n        private adminService: AdminService\r\n    ) { }\r\n\r\n    loadCompositeModel$ = createEffect(() => this.actions$.pipe(\r\n        ofType(AdminActions.loadCompositeModel),\r\n        switchMap(() => this.adminService.loadAdminCompositeData().pipe(map(data => AdminActions.loadCompositeModelSuccess({ model: data })))),\r\n        catchError(() => of(AdminActions.loadCompositeModelFailure()).pipe(mergeMap(x => [x, new ToastError('Failed to load page data')])))\r\n    ));\r\n\r\n    loadCompanyGroups$ = createEffect(() => this.actions$.pipe(\r\n        ofType(AdminActions.loadCompanyGroups),\r\n        switchMap(() => this.adminService.loadCompanyGroups().pipe(map(data => AdminActions.loadCompanyGroupsSuccess({ entries: data })))),\r\n        catchError(() => of(AdminActions.loadCompanyGroupsFailure()).pipe(mergeMap(x => [x, new ToastError('Failed to load company groups list')])))\r\n    ));\r\n\r\n    loadCharts$ = createEffect(() => this.actions$.pipe(\r\n        ofType(AdminActions.loadCharts),\r\n        switchMap(() => this.adminService.loadSecurityCharts().pipe(map(data => AdminActions.loadChartsSuccess({ charts: data })))),\r\n        catchError(() => of(AdminActions.loadChartsFailure()).pipe(mergeMap(x => [x, new ToastError('Failed to load charts list')])))\r\n    ));\r\n\r\n    loadCacheSetting$ = createEffect(() => this.actions$.pipe(\r\n        ofType(AdminActions.loadCacheSetting),\r\n        switchMap(() => this.adminService.loadCacheSetting().pipe(\r\n            map(data => AdminActions.loadCacheSettingSuccess({ value: data })),\r\n            catchError(() => of(AdminActions.loadCacheSettingFailure()).pipe(mergeMap(x => [x, new ToastError('Failed to load cache setting')])))\r\n        ))\r\n    ));\r\n\r\n    saveAppearance$ = createEffect(() => this.actions$.pipe(\r\n        ofType(AdminActions.saveAppearance),\r\n        switchMap(action => this.adminService.saveAppearance(action.form).pipe(map(data => AdminActions.saveAppearanceSuccess())))\r\n    ));\r\n\r\n    saveCreators$ = createEffect(() => this.actions$.pipe(\r\n        ofType(AdminActions.saveCreators),\r\n        switchMap(action => this.adminService.postCreators(action.creators).pipe(map(data => AdminActions.saveCreatorsSuccess({ creators: data }))))\r\n    ));\r\n\r\n    createSecurityGroup$ = createEffect(() => this.actions$.pipe(\r\n        ofType(AdminActions.createSecurityGroup),\r\n        mergeMap(action => this.adminService.addSecurityGroup(action.name).pipe(map(data => AdminActions.createSecurityGroupSuccess({ group: data })))),\r\n        catchError(() => of(AdminActions.createSecurityGroupFailure()).pipe(mergeMap(x => [x, new ToastError('Could not save security group')])))\r\n    ));\r\n\r\n    removeSecurityGroup$ = createEffect(() => this.actions$.pipe(\r\n        ofType(AdminActions.removeSecurityGroup),\r\n        mergeMap(action => this.adminService.removeSecurityGroup(action.id).pipe(map(data => AdminActions.removeSecurityGroupSuccess({ groups: data })))),\r\n        catchError(() => of(AdminActions.removeSecurityGroupFailure()).pipe(mergeMap(x => [x, new ToastError('Failed to remove security group')])))\r\n    ));\r\n\r\n    addSecurityGroupEntry$ = createEffect(() => this.actions$.pipe(\r\n        ofType(AdminActions.addSecurityGroupEntry),\r\n        mergeMap(action => this.adminService.addSecurityGroupEntry(action.entry).pipe(map(data => AdminActions.addSecurityGroupEntrySuccess({ group: data })))),\r\n        catchError(() => of(AdminActions.addSecurityGroupEntryFailure()).pipe(mergeMap(x => [x, new ToastError('Failed to add security group entry')])))\r\n    ));\r\n\r\n    removeSecurityGroupEntry$ = createEffect(() => this.actions$.pipe(\r\n        ofType(AdminActions.removeSecurityGroupEntry),\r\n        mergeMap(action => this.adminService.removeSecurityGroupEntry(action.id).pipe(map(data => AdminActions.removeSecurityGroupEntrySuccess({ group: data })))),\r\n        catchError(() => of(AdminActions.removeSecurityGroupEntryFailure()).pipe(mergeMap(x => [x, new ToastError('Failed to remove security group entry')])))\r\n    ));\r\n\r\n    saveGlobalExternalUsersSetting$ = createEffect(() => this.actions$.pipe(\r\n        ofType(AdminActions.saveGlobalExternalSetting),\r\n        switchMap(action => this.adminService.saveGlobalExternalUsersSetting(action.value).pipe(map(data => AdminActions.saveGlobalExternalSettingSuccess({ value: data })))),\r\n        catchError(() => of(AdminActions.saveGlobalExternalSettingFailure()).pipe(mergeMap(x => [x, new ToastError('Failed to save settings')])))\r\n    ));\r\n\r\n    saveExternalUsersSetting$ = createEffect(() => this.actions$.pipe(\r\n        ofType(AdminActions.saveExternalUsersSetting),\r\n        mergeMap(action => this.adminService.saveExternalUsersSetting(action.chart).pipe(\r\n            map(data => AdminActions.saveExternalUsersSettingSuccess({ chart: data })),\r\n            catchError(() => of(AdminActions.saveExternalUsersSettingFailure({ chart: action.chart })).pipe(mergeMap(x => [x, new ToastError('Failed to save settings')])))\r\n        )\r\n    )));\r\n\r\n    saveSecurityChart$ = createEffect(() => this.actions$.pipe(\r\n        ofType(AdminActions.saveChart),\r\n        mergeMap(action => this.adminService.saveSecurityChart(action.chart).pipe(\r\n            map(data => AdminActions.saveChartSuccess({ chart: data })),\r\n            catchError(() => of(AdminActions.saveChartFailure({ chart: action.chart })).pipe(mergeMap(x => [x, new ToastError('Failed to save settings')])))\r\n        )\r\n    )));\r\n\r\n    saveAdminEmail$ = createEffect(() => this.actions$.pipe(\r\n        ofType(AdminActions.saveAdminEmail),\r\n        mergeMap(action => this.adminService.saveAdminEmail(action.AdminEmail, action.CompanyName).pipe(\r\n            map(data => AdminActions.saveAdminEmailSuccess({ AdminEmail: action.AdminEmail, CompanyName: action.CompanyName })),\r\n            catchError(() => of(AdminActions.saveAdminEmailFailure()).pipe(mergeMap(x => [x, new ToastError('Failed to save settings')])))\r\n        ))\r\n    ));\r\n\r\n    saveCacheSetting$ = createEffect(() => this.actions$.pipe(\r\n        ofType(AdminActions.saveCacheSetting),\r\n        mergeMap(action => this.adminService.saveCacheSetting(action.value).pipe(\r\n            mergeMap(data => [AdminActions.saveCacheSettingSuccess({ value: data }), new ToastSuccess('')]),\r\n            catchError(() => of(AdminActions.saveCacheSettingFailure()).pipe(mergeMap(x => [x, new ToastError('Failed to save settings')])))\r\n        ))\r\n    ));\r\n\r\n    loadInformationSource$ = createEffect(() => this.actions$.pipe(\r\n        ofType(AdminActions.loadInformationSource),\r\n        mergeMap(action =>\r\n            this.adminService.getInfoSource(action.sourceId).pipe(\r\n                map(data => AdminActions.loadInformationSourceSuccess({ source: data })),\r\n                catchError(error => of(AdminActions.loadInformationSourceFailure()).pipe(mergeMap(x => [x, new ToastError('Failed to load information source')]))))\r\n            )\r\n        )\r\n    );\r\n\r\n    getSharePointLists$ = createEffect(() => this.actions$.pipe(\r\n        ofType(AdminActions.getSharePointLists),\r\n        switchMap(() =>\r\n            this.adminService.getSharePointLists().pipe(\r\n                map(data => AdminActions.getSharePointListsSuccess({ lists: data })),\r\n                catchError(error => of(AdminActions.getSharePointListsFailure()).pipe(mergeMap(x => [x, new ToastError('Failed to load SharePoint lists')]))))\r\n            )\r\n        )\r\n    );\r\n\r\n    getSharePointListFields$ = createEffect(() => this.actions$.pipe(\r\n        ofType(AdminActions.getSharePointListFields),\r\n        mergeMap((action) =>\r\n            this.adminService.getSharePointListFields(action.id).pipe(\r\n                map(data => AdminActions.getSharePointListFieldsSuccess({ fields: data })),\r\n                catchError(error => of(AdminActions.getSharePointListFieldsFailure()).pipe(mergeMap(x => [x, new ToastError('Failed to load SharePoint list fields')]))))\r\n            )\r\n        )\r\n    );\r\n\r\n    saveInformationSource$ = createEffect(() => this.actions$.pipe(\r\n        ofType(AdminActions.saveInformationSource),\r\n        mergeMap((action) =>\r\n            this.adminService.saveInformationSource(action.source).pipe(\r\n                mergeMap(data => [AdminActions.saveInformationSourceSuccess({ id: action.source.InformationSourceId, result: data }), AdminActions.loadCompositeModel()]),\r\n                catchError(error => of(AdminActions.saveInformationSourceFailure()).pipe(mergeMap(x => [x, new ToastError('Failed to save information source')]))))\r\n            )\r\n        )\r\n    );\r\n\r\n    deleteInformationSource$ = createEffect(() => this.actions$.pipe(\r\n        ofType(AdminActions.deleteInformationSource),\r\n        mergeMap((action) =>\r\n            this.adminService.deleteInformationSource(action.id).pipe(\r\n                map(data => AdminActions.deleteInformationSourceSuccess({ id: action.id, result: data })),\r\n                catchError(error => of(AdminActions.deleteInformationSourceFailure()).pipe(mergeMap(x => [x, new ToastError('Failed to delete information source')]))))\r\n            )\r\n        )\r\n    );\r\n\r\n    testInformationSource$ = createEffect(() => this.actions$.pipe(\r\n        ofType(AdminActions.testInformationSource),\r\n        switchMap((action) =>\r\n            this.adminService.testInformationSource(action.id).pipe(\r\n                mergeMap(data => {\r\n                    const actions: Action[] = [AdminActions.testInformationSourceSuccess({ result: data })];\r\n                    if (data.startsWith('ERROR')) {\r\n                        actions.push(new ToastError(data));\r\n                    } else {\r\n                        actions.push(new ToastSuccess(data));\r\n                    }\r\n                    return actions;\r\n                }),\r\n                catchError(error => of(AdminActions.testInformationSourceFailure()).pipe(mergeMap(x => [x, new ToastError('Failed to test information source')]))))\r\n            )\r\n        )\r\n    );\r\n\r\n    loadApiKeys$ = createEffect(() => this.actions$.pipe(\r\n        ofType(AdminActions.loadApiKeys),\r\n        switchMap((action) =>\r\n        this.adminService.loadApiKeys().pipe(\r\n            map(data => AdminActions.loadApiKeysSuccess({ apiKeys: data })),\r\n            catchError(error => of(AdminActions.loadApiKeysFailure()).pipe(mergeMap(x => [x, new ToastError('Failed to load API keys')]))))\r\n        )\r\n    ));\r\n\r\n    createApiKey$ = createEffect(() => this.actions$.pipe(\r\n        ofType(AdminActions.createApiKey),\r\n        switchMap((action) =>\r\n        this.adminService.createApiKey().pipe(\r\n            map(data => AdminActions.createApiKeySuccess({ apiKey: data })),\r\n            catchError(error => of(AdminActions.createApiKeyFailure()).pipe(mergeMap(x => [x, new ToastError('Failed to create an API key')]))))\r\n        )\r\n    ));\r\n\r\n    revokeApiKey$ = createEffect(() => this.actions$.pipe(\r\n        ofType(AdminActions.revokeApiKey),\r\n        switchMap((action) =>\r\n        this.adminService.revokeApiKey(action.id).pipe(\r\n            map(data => AdminActions.revokeApiKeySuccess({ id: action.id })),\r\n            catchError(error => of(AdminActions.revokeApiKeyFailure()).pipe(mergeMap(x => [x, new ToastError('Failed to revoke an API key')]))))\r\n        )\r\n    ));\r\n}\r\n","import { NgModule } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\nimport { RouterModule } from '@angular/router';\r\nimport { StoreModule } from '@ngrx/store';\r\nimport { EffectsModule } from '@ngrx/effects';\r\nimport { FormsModule } from '@angular/forms';\r\nimport { FileUploadModule } from 'ng2-file-upload';\r\nimport { TypeaheadModule } from 'ngx-bootstrap/typeahead';\r\nimport * as fromAdmin from './admin.reducers';\r\nimport { ColorPickerModule } from 'ngx-color-picker';\r\nimport { SharedModule } from '../shared/shared.module';\r\nimport { AppearanceComponent } from './components/appearance.component';\r\nimport { SecurityComponent } from './components/security.component';\r\nimport { AdminEffects } from './admin.effects';\r\nimport { AdminService } from './services/admin.service';\r\nimport { AdminRoutingModule } from './admin-routing.module';\r\nimport { NgrxFormsModule } from 'ngrx-forms';\r\nimport { AccountComponent } from './components/account.component';\r\nimport { InformationSourcesComponent } from './components/information-sources.component';\r\nimport { ApiComponent } from './components/api.component';\r\nimport { TooltipModule } from 'ngx-bootstrap/tooltip';\r\nimport { ClipboardModule } from 'ngx-clipboard';\r\nimport { ApiGuideComponent } from './components/api-guide.component';\r\n\r\n@NgModule({\r\n    imports: [\r\n        CommonModule,\r\n        AdminRoutingModule,\r\n        StoreModule.forFeature('admin', fromAdmin.reducer),\r\n        EffectsModule.forFeature([AdminEffects]),\r\n        TooltipModule.forRoot(),\r\n        FileUploadModule,\r\n        FormsModule,\r\n        NgrxFormsModule,\r\n        SharedModule,\r\n        TypeaheadModule,\r\n        ColorPickerModule,\r\n        ClipboardModule\r\n    ],\r\n    declarations: [\r\n        AppearanceComponent,\r\n        SecurityComponent,\r\n        AccountComponent,\r\n        InformationSourcesComponent,\r\n        ApiComponent,\r\n        ApiGuideComponent\r\n    ],\r\n    providers: [\r\n        AdminService\r\n    ]\r\n})\r\nexport class AdminModule {}\r\n","import { createSelector, createFeatureSelector, createReducer, on, Action } from '@ngrx/store';\r\nimport * as AdminActions from './admin.actions';\r\nimport * as fromRoot from '../reducers';\r\nimport { CompositeModel, AvailableEntries, SecurityChartViewModel, InformationSourceViewModel, SharePointListInfo, ApiKey } from './admin.models';\r\nimport { FormGroupState, createFormGroupState, onNgrxForms, wrapReducerWithFormStateUpdate } from 'ngrx-forms';\r\n\r\nexport interface AdminState {\r\n    compositeModel: CompositeModel;\r\n    availableEntries: AvailableEntries;\r\n    isFetching: boolean;\r\n    appearanceForm: FormGroupState<AppearanceFormValue>;\r\n    selectedSecurityGroupId: number;\r\n    charts: SecurityChartViewModel[];\r\n    chartRequests: { [paramName: string]: any };\r\n    chartExternalRequests: { [paramName: string]: any };\r\n    disableCacheSetting: boolean;\r\n    selectedSourceInfo: InformationSourceViewModel;\r\n    deletedSourceId: string;\r\n    savedSourceId: string;\r\n    sharePointLists: SharePointListInfo[];\r\n    sharePointListFields: Array<{ [paramName: string]: string }>;\r\n    apiKeys: ApiKey[];\r\n}\r\n\r\nexport interface AppearanceFormValue {\r\n    theme: string;\r\n    brandColor: string;\r\n    footerText: string;\r\n}\r\n\r\nexport interface State extends fromRoot.State {\r\n    admin: AdminState;\r\n}\r\n\r\nconst APPEARANCE_FORM_ID = 'appearance_form_id';\r\n\r\nexport const initialAppearanceFormState = createFormGroupState<AppearanceFormValue>(APPEARANCE_FORM_ID, {\r\n    brandColor: '#000000',\r\n    theme: 'Light',\r\n    footerText: ''\r\n});\r\n\r\nexport const initialState: AdminState = {\r\n    compositeModel: null,\r\n    isFetching: false,\r\n    appearanceForm: initialAppearanceFormState,\r\n    selectedSecurityGroupId: 0,\r\n    availableEntries: null,\r\n    charts: null,\r\n    chartRequests: {},\r\n    chartExternalRequests: {},\r\n    disableCacheSetting: null,\r\n    selectedSourceInfo: null,\r\n    deletedSourceId: null,\r\n    savedSourceId: null,\r\n    sharePointLists: [],\r\n    sharePointListFields: [],\r\n    apiKeys: []\r\n};\r\n\r\nconst adminReducer = createReducer(\r\n    initialState,\r\n    onNgrxForms(),\r\n    on(AdminActions.setAppearanceFormFromCompositeModel, (state, { model }) => {\r\n        return {\r\n            ...state,\r\n            appearanceForm: createFormGroupState<AppearanceFormValue>(APPEARANCE_FORM_ID, {\r\n                ...initialAppearanceFormState,\r\n                brandColor: model.Settings.CustomColour,\r\n                theme: model.Settings.CustomThemeName,\r\n                footerText: model.Settings.CustomFooterText\r\n            })\r\n        };\r\n    }),\r\n    on(AdminActions.saveAppearanceSuccess, state => {\r\n        window.location.reload();\r\n        return state;\r\n    }),\r\n    on(AdminActions.loadCompositeModel, state => ({ ...state, isFetching: true })),\r\n    on(AdminActions.loadCompositeModelFailure, state => ({ ...state, isFetching: false })),\r\n    on(AdminActions.loadCompositeModelSuccess, (state, { model }) => ({\r\n        ...state,\r\n        compositeModel: model,\r\n        isFetching: false\r\n    })),\r\n    on(AdminActions.saveCreatorsSuccess, (state, { creators }) => ({\r\n        ...state,\r\n        compositeModel: { ...state.compositeModel, Creators: creators }\r\n    })),\r\n    on(AdminActions.createSecurityGroupSuccess, (state, { group }) => ({\r\n        ...state,\r\n        selectedSecurityGroupId: group.Id,\r\n        compositeModel: { ...state.compositeModel, SecurityGroups: [...state.compositeModel.SecurityGroups, group] }\r\n    })),\r\n    on(AdminActions.removeSecurityGroupSuccess, (state, { groups }) => ({\r\n        ...state,\r\n        compositeModel: { ...state.compositeModel, SecurityGroups: groups }\r\n    })),\r\n    on(AdminActions.loadCompanyGroupsSuccess, (state, { entries }) => ({ ...state, availableEntries: entries })),\r\n    on(AdminActions.addSecurityGroupEntrySuccess, AdminActions.removeSecurityGroupEntrySuccess, (state, { group }) => {\r\n        return {\r\n            ...state,\r\n            compositeModel: {\r\n                ...state.compositeModel,\r\n                SecurityGroups: state.compositeModel.SecurityGroups.map(x => {\r\n                    if (x.Id === group.Id) {\r\n                        return group;\r\n                    }\r\n                    return x;\r\n                })\r\n            }\r\n        };\r\n    }),\r\n    on(AdminActions.saveGlobalExternalSettingSuccess, (state, { value }) => ({\r\n        ...state,\r\n        compositeModel: { ...state.compositeModel, GlobalExternalUsersSetting: value }\r\n    })),\r\n    on(AdminActions.saveExternalUsersSettingSuccess, (state, { chart }) => {\r\n        const { [chart.id]: value, ...requests } = state.chartExternalRequests;\r\n        return {\r\n            ...state,\r\n            charts: state.charts.map(x => {\r\n                if (x.id === chart.id) {\r\n                    //this particular API does not return the full chart view model, only id and areExternalUsersAllowed fields\r\n                    return { ...x, areExternalUsersAllowed: chart.areExternalUsersAllowed };\r\n                }\r\n                return x;\r\n            }),\r\n            chartExternalRequests: requests\r\n        };\r\n    }),\r\n    on(AdminActions.saveExternalUsersSetting, (state, { chart }) => {\r\n        return { ...state, chartExternalRequests: { ...state.chartExternalRequests, [chart.id]: {} } };\r\n    }),\r\n    on(AdminActions.saveChart, (state, { chart }) => {\r\n        return { ...state, chartRequests: { ...state.chartExternalRequests, [chart.id]: {} } };\r\n    }),\r\n    on(AdminActions.saveChartSuccess, AdminActions.saveChartFailure, (state, { chart }) => {\r\n        const { [chart.id]: value, ...requests } = state.chartRequests;\r\n        return {\r\n            ...state,\r\n            chartRequests: requests,\r\n            charts: state.charts.map(x => {\r\n                if (x.id === chart.id) {\r\n                    return chart;\r\n                }\r\n                return x;\r\n            })\r\n        };\r\n    }),\r\n    on(AdminActions.loadChartsSuccess, (state, { charts }) => ({\r\n        ...state,\r\n        charts: charts.map(x => {\r\n            const chart = { ...x };\r\n            return chart;\r\n        })\r\n    })),\r\n    on(AdminActions.saveAdminEmailSuccess, (state, { AdminEmail, CompanyName }) => ({\r\n        ...state,\r\n        compositeModel: {\r\n            ...state.compositeModel,\r\n            AdminEmailAndCompanyName: {\r\n                AdminEmail,\r\n                CompanyName\r\n            }\r\n        }\r\n    })),\r\n    on(AdminActions.loadCacheSettingSuccess, (state, { value }) => ({ ...state, disableCacheSetting: value })),\r\n    on(AdminActions.saveCacheSettingSuccess, (state, { value }) => ({ ...state, disableCacheSetting: value })),\r\n    on(AdminActions.loadInformationSourceSuccess, (state, { source }) => ({ ...state, selectedSourceInfo: source })),\r\n    on(AdminActions.deleteInformationSourceSuccess, (state, { id, result }) => ({\r\n        ...state,\r\n        deletedSourceId: result ? id : null\r\n    })),\r\n    on(AdminActions.saveInformationSourceSuccess, (state, { id, result }) => {\r\n        if (result) {\r\n            return { ...state, savedSourceId: id };\r\n        }\r\n        return state;\r\n    }),\r\n    on(AdminActions.clearSavedSourceId, (state) => ({ ...state, savedSourceId: null })),\r\n    on(AdminActions.getSharePointListsSuccess, (state, { lists }) => ({ ...state, sharePointLists: lists })),\r\n    on(AdminActions.getSharePointListFieldsSuccess, (state, { fields }) => ({ ...state, sharePointListFields: fields })),\r\n    on(AdminActions.loadApiKeysSuccess, (state, { apiKeys }) => ({ ...state, apiKeys })),\r\n    on(AdminActions.createApiKeySuccess, (state, { apiKey }) => ({ ...state, apiKeys: [...state.apiKeys, apiKey] })),\r\n    on(AdminActions.revokeApiKeySuccess, (state, { id }) => ({ ...state, apiKeys: state.apiKeys.filter(x => x.Id !== id) }))\r\n);\r\n\r\nexport function reducer(state: AdminState | undefined, action: Action) {\r\n    return adminReducer(state, action);\r\n}\r\n\r\nexport const selectAdmin = (state: State) => state.admin;\r\n\r\nexport const selectCompositeModel = createSelector(selectAdmin, state => state.compositeModel);\r\n\r\nexport const selectAppearanceFormState = createSelector(selectAdmin, state => state.appearanceForm);\r\n\r\nexport const selectSelectedSecurityGroupId = createSelector(selectAdmin, state => state.selectedSecurityGroupId);\r\n\r\nexport const selectAvailableEntries = createSelector(selectAdmin, s => s.availableEntries);\r\n\r\nexport const selectCharts = createSelector(selectAdmin, s => s.charts);\r\n\r\nexport const selectChartRequests = createSelector(selectAdmin, s => s.chartRequests);\r\n\r\nexport const selectChartExternalRequests = createSelector(selectAdmin, s => s.chartExternalRequests);\r\n\r\nexport const selectDisableCacheSetting = createSelector(selectAdmin, s => s.disableCacheSetting);\r\n\r\nexport const selectSelectedSourceInfo = createSelector(selectAdmin, s => s.selectedSourceInfo);\r\n\r\nexport const selectApiKeys = createSelector(selectAdmin, s => s.apiKeys);\r\n\r\nexport const selectDeletedSourceId = createSelector(\r\n    selectAdmin,\r\n    (state: AdminState) => state.deletedSourceId\r\n);\r\n\r\nexport const selecteSavedSourceId = createSelector(\r\n    selectAdmin,\r\n    s => s.savedSourceId\r\n);\r\n\r\nexport const selectSharePointLists = createSelector(\r\n    selectAdmin,\r\n    (state: AdminState) => state.sharePointLists\r\n);\r\n\r\nexport const selectSharePointListFields = createSelector(\r\n    selectAdmin,\r\n    (state: AdminState) => state.sharePointListFields\r\n);\r\n","import { Component, OnInit, OnDestroy, Inject } from '@angular/core';\r\nimport { L10N_LOCALE, L10nLocale } from 'angular-l10n';\r\nimport * as Resources from '../../strings';\r\nimport * as fromRoot from '../../reducers';\r\nimport * as fromAdmin from '../admin.reducers';\r\nimport * as AdminActions from '../admin.actions';\r\nimport { Observable, Subject } from 'rxjs';\r\nimport { Store, select } from '@ngrx/store';\r\nimport { takeUntil } from 'rxjs/operators';\r\nimport { CompositeModel } from '../admin.models';\r\nimport { ConfirmationModalOptions, SharedModals } from 'src/app/shared/shared.models';\r\nimport { DialogShow } from 'src/app/shared/shared.actions';\r\n\r\n@Component({\r\n    selector: 'toc-admin-account',\r\n    templateUrl: 'account.component.html'\r\n})\r\nexport class AccountComponent implements OnInit, OnDestroy {\r\n    Resources = Resources;\r\n    adminEmail = '';\r\n    companyName = '';\r\n    disableCacheSetting$: Observable<boolean>;\r\n    model$: Observable<CompositeModel>;\r\n    private unsubscribe: Subject<void> = new Subject();\r\n\r\n    constructor(@Inject(L10N_LOCALE) public locale: L10nLocale, private store: Store<fromRoot.State>) {\r\n        this.disableCacheSetting$ = this.store.pipe(select(fromAdmin.selectDisableCacheSetting));\r\n        this.disableCacheSetting$.pipe(takeUntil(this.unsubscribe)).subscribe(x => {\r\n            if (x === null) {\r\n                this.store.dispatch(AdminActions.loadCacheSetting());\r\n            }\r\n        });\r\n        this.model$ = store.pipe(select(fromAdmin.selectCompositeModel));\r\n        this.model$.pipe(takeUntil(this.unsubscribe)).subscribe(model => {\r\n            if (model === null) {\r\n                this.store.dispatch(AdminActions.loadCompositeModel());\r\n                return;\r\n            }\r\n            this.adminEmail = model.AdminEmailAndCompanyName.AdminEmail;\r\n            this.companyName = model.AdminEmailAndCompanyName.CompanyName;\r\n        });\r\n    }\r\n\r\n    ngOnInit() {}\r\n\r\n    saveCacheSetting($event: boolean) {\r\n        this.store.dispatch(AdminActions.saveCacheSetting({ value: $event }));\r\n    }\r\n\r\n    saveAdminEmail() {\r\n        this.store.dispatch(AdminActions.saveAdminEmail({ AdminEmail: this.adminEmail, CompanyName: this.companyName }));\r\n    }\r\n\r\n    deleteAccount() {\r\n        const confirmationOptions: ConfirmationModalOptions = {\r\n            cancelButtonText: Resources.Strings.BUTTON.Cancel,\r\n            text: Resources.Strings.TXT.DeleteAccountConfirmationText,\r\n            title: Resources.Strings.TXT.DeleteAccountConfirmationDialogTitle,\r\n            successButtonText: Resources.Strings.BTN.DeleteAccountConfirmation,\r\n            //successAction: new SaveColumnSettings(this.columnSettings)\r\n            callback: () => {\r\n                (document.getElementById('delete-account-form') as HTMLFormElement).submit();\r\n            }\r\n        };\r\n        this.store.dispatch(\r\n            new DialogShow({\r\n                dialogName: SharedModals.ConfirmationDialog,\r\n                options: {\r\n                    options: confirmationOptions\r\n                }\r\n            })\r\n        );\r\n    }\r\n\r\n    ngOnDestroy(): void {\r\n        this.unsubscribe.next();\r\n        this.unsubscribe.complete();\r\n    }\r\n}\r\n","<div class=\"container\">\r\n    <div class=\"card\">\r\n        <div class=\"section-heading\">{{'admin.TXT_Company'|translate:locale.language}} <button class=\"btn btn-success\" (click)=\"saveAdminEmail()\"\r\n                ng-disabled=\"saving\" translate=\"common.SAVE_CHANGES\">Save Changes</button></div>\r\n        <div class=\"suffix\">{{'admin.TXT_CompanyDesc'|translate:locale.language}}</div>\r\n        <input type=\"text\" class=\"form-control\" [(ngModel)]=\"companyName\" ng-disabled=\"saving\" />\r\n    </div>\r\n    <div class=\"card\">\r\n        <div class=\"section-heading\">{{'admin.TXT_Admin'|translate:locale.language}} <button class=\"btn btn-success\" (click)=\"saveAdminEmail()\"\r\n                ng-disabled=\"saving\" translate=\"common.SAVE_CHANGES\">Save Changes</button></div>\r\n        <div class=\"suffix\">{{'admin.TXT_AdminDesc'|translate:locale.language}}</div>\r\n        <input type=\"text\" class=\"form-control\" [(ngModel)]=\"adminEmail\" ng-disabled=\"saving\" />\r\n    </div>\r\n    <div class=\"card\">\r\n        <div class=\"section-heading\">{{'admin.TXT_Data'|translate:locale.language}}</div>\r\n        <div class=\"suffix\">{{'admin.TXT_DataDesc'|translate:locale.language}}</div>\r\n        <div class=\"row horizontal-form\">\r\n            <div class=\"col\">\r\n                <div class=\"custom-control custom-checkbox\">\r\n                    <input type=\"checkbox\" class=\"custom-control-input\" id=\"customCheck1\"\r\n                        [ngModel]=\"disableCacheSetting$|async\" (ngModelChange)=\"saveCacheSetting($event)\">\r\n                    <label class=\"custom-control-label\" for=\"customCheck1\">{{'admin.TXT_DataLab'|translate:locale.language}}</label>\r\n                </div>\r\n            </div>\r\n            <!-- <div class=\"col-9\">\r\n                <div class=\"checkboxxxx\">\r\n                    <input checked=\"checked\" class=\"form-checkbox\" id=\"useCaching\" type=\"checkbox\"\r\n                        ng-model=\"tenant.DisableCache\" ng-change=\"saveCacheSetting(tenant.DisableCache)\"\r\n                        ng-disabled=\"saving\">\r\n                </div>\r\n            </div> -->\r\n        </div>\r\n    </div>\r\n    <div class=\"card\">\r\n        <div class=\"section-heading\">{{'admin.TXT_Delete'|translate:locale.language}} <button class=\"btn btn-danger\"\r\n                id=\"delete-account-button-ng\" (click)=\"deleteAccount()\">{{'admin.TXT_Delete'|translate:locale.language}}</button></div>\r\n        <div class=\"suffix\">{{'admin.TXT_DeleteDesc'|translate:locale.language}}</div>\r\n        <div class=\"row\">\r\n            <div class=\"col-md-12\">\r\n                <form id=\"delete-account-form\" method=\"POST\" action=\"/account/delete\"></form>\r\n                <p class=\"alert alert-danger\" style=\"padding: 5px;\">\r\n                    {{'admin.TXT_DeleteDesc2'|translate:locale.language}}\r\n                </p>\r\n            </div>\r\n        </div>\r\n    </div>\r\n</div>\r\n","import { Component, OnInit } from '@angular/core';\r\n\r\n@Component({\r\n    selector: 'toc-api-guide',\r\n    templateUrl: 'api-guide.component.html'\r\n})\r\n\r\nexport class ApiGuideComponent implements OnInit {\r\n    constructor() { }\r\n\r\n    ngOnInit() { }\r\n}\r\n","<div class=\"container\">\r\n    <div class=\"card\">\r\n        <h1>Zapier Integration Guide</h1>\r\n        <p class=\"lead\">This guide shows how to create a simple Zap to update a chart from a Google Sheets document.</p>\r\n        <h2>Creating an API key</h2>\r\n        <p>In order to authenticate API requests the caller needs to provide an API key in an HTTP header “X-API-Key”.\r\n            API keys can be issued and revoked on “Admin”-“API” page.</p>\r\n        <img class=\"img-fluid\" src=\"/img/zapier/Picture1.png\" alt=\"creating an api key\">\r\n        <p>Click “Add API Key” button to issue a new API key. The new key will appear in the table below. Please copy\r\n            the key value immediately – it will only be displayed once since it’s not being stored on TeamOrgChart’s\r\n            servers in plain text.</p>\r\n        <img class=\"img-fluid\" src=\"/img/zapier/Picture2.png\" alt=\"add api key\">\r\n        <h2>Testing the API</h2>\r\n        <p>Click the “API Documentation” link to open Swagger UI page. This page allows you to make calls to the API\r\n            directly from your web browser.</p>\r\n        <img class=\"img-fluid\" src=\"/img/zapier/Picture3.png\" alt=\"testing the api\">\r\n        <p>Paste the value of created API key into the “api_key” field. Click “ChartsApi” to open a list of operations\r\n            available in this category.</p>\r\n        <img class=\"img-fluid\" src=\"/img/zapier/Picture4.png\" alt=\"using the api key\">\r\n        <p>We’re going to use GET all charts call, the first in the list. Click on the operation to open detailed\r\n            information.</p>\r\n        <img class=\"img-fluid\" src=\"/img/zapier/Picture5.png\" alt=\"using the api key\">\r\n        <p>The only required parameter for this operation is “version”, enter “1” as the value and click “Try it out!”.\r\n        </p>\r\n        <p>Upon successful request you’ll see the response body, code and headers. Response body contains JSON\r\n            representation of the list of charts available in your organization.</p>\r\n        <img class=\"img-fluid\" src=\"/img/zapier/Picture6.png\" alt=\"using the api key\">\r\n        <h2>Creating a Zapier integration to update a chart from a Google Spreadsheet.</h2>\r\n        <p>First, let’s create a chart to hold imported data. Go to “Create new org chart” screen. Enter a name for the\r\n            new chart and choose “Load from a spreadsheet” as chart type:\r\n        </p>\r\n        <img class=\"img-fluid\" src=\"/img/zapier/Picture7.png\" alt=\"using the api key\">\r\n\r\n        <p>Get chart ID from the URL of the view chart page:</p>\r\n        <img class=\"img-fluid\" src=\"/img/zapier/Picture8.png\" alt=\"using the api key\">\r\n        <p>In my case it’s “5765a62a-11a0-49f4-9ca9-88020ec3b10c”. Save this value for later. Go to Zapier.com’s\r\n            dashboard and open My Zaps. Click Make a Zap! to create a new integration.\r\n        </p>\r\n        <img class=\"img-fluid\" src=\"/img/zapier/Picture9.png\" alt=\"using the api key\">\r\n\r\n        <p>Choose Google Sheets as a source event. Choose “New spreadsheet row” as a trigger event.</p>\r\n        <img class=\"img-fluid\" src=\"/img/zapier/Picture10.png\" alt=\"using the api key\">\r\n        <p>Press continue and log in to Google, choose a source spreadsheet and and a worksheet inside the spreadsheet.\r\n            The spreadsheet should contain a header row with fields for Unique item ID, Manager ID, Display name, job\r\n            title and any other data required.</p>\r\n        <img class=\"img-fluid\" src=\"/img/zapier/Picture10_2.png\" alt=\"using the api key\">\r\n        <p>Press “Edit” next to “Do this …”. Select “Webhooks by Zapier” as an App\r\n            and POST as an action event:\r\n        </p>\r\n        <img class=\"img-fluid\" src=\"/img/zapier/Picture11.png\" alt=\"using the api key\">\r\n        <p>\r\n            Press continue and enter TeamOrgChart API call data: URL – <a\r\n                href=\"https://teamorgchart.com/v1/data/CHART_ID\">https://teamorgchart.com/v1/data/CHART_ID</a>.<br>\r\n            Substitute CHART_ID with the ID of the chart you wish to use as a sync target. Choose JSON as payload type.\r\n            Map your spreadsheet columns data to JSON using Data table:\r\n        </p>\r\n        <img class=\"img-fluid\" src=\"/img/zapier/Picture12.png\" alt=\"using the api key\">\r\n        <p>At the bottom of the settings panel enter a new header name “X-API-Key” and paste your API key as a value.</p>\r\n        <img class=\"img-fluid\" src=\"/img/zapier/Picture13.png\" alt=\"using the api key\">\r\n        <p>That’s it! Turn you Zap on and add a row to your spreadsheet.</p>\r\n        <img class=\"img-fluid\" src=\"/img/zapier/Picture14.png\" alt=\"using the api key\">\r\n        <p>Add a row to your spreadsheet and check previously created chart on teamorgchart.com:</p>\r\n        <img class=\"img-fluid\" src=\"/img/zapier/Picture15.png\" alt=\"using the api key\">\r\n        <p>The box is there but it’s empty since TeamOrgChart doesn’t know which columns to display. Pick “Choose box contents” in the menu above the chart.</p>\r\n        <img class=\"img-fluid\" src=\"/img/zapier/Picture16.png\" alt=\"using the api key\">\r\n        <p>Choose columns you whish to be displayed in the chart box and click Save:</p>\r\n        <img class=\"img-fluid\" src=\"/img/zapier/Picture17.png\" alt=\"using the api key\">\r\n        <p>Go back to the chart:</p>\r\n        <img class=\"img-fluid\" src=\"/img/zapier/Picture18.png\" alt=\"using the api key\">\r\n    </div>\r\n</div>\r\n","<div class=\"container\">\r\n    <div class=\"card\">       \r\n        <h3>{{Resources.AdminStrings.TXT.ManageApiKeys|translate:locale.language}}</h3>\r\n        <p>{{Resources.AdminStrings.TXT.ManageApiKeysDesc|translate:locale.language}}</p>        \r\n        <button class=\"btn btn-warning col-2 mb-2\" (click)=\"createApiKey()\">{{Resources.AdminStrings.BTN.AddApiKey|translate:locale.language}}</button>\r\n        <table class=\"table table-striped\">\r\n            <thead>\r\n                <tr>\r\n                    <th scope=\"col\">#</th>\r\n                    <th scope=\"col\">{{Resources.AdminStrings.TXT.Prefix|translate:locale.language}}</th>\r\n                    <th scope=\"col\">{{Resources.AdminStrings.TXT.Value|translate:locale.language}}</th>\r\n                    <th scope=\"col\">{{Resources.AdminStrings.TXT.IssuedAt|translate:locale.language}}</th>\r\n                    <th scope=\"col\">{{Resources.AdminStrings.TXT.Revoke|translate:locale.language}}</th>\r\n                </tr>\r\n            </thead>\r\n            <tbody>\r\n                <tr *ngFor=\"let key of apiKeys$|async; let i=index;\">\r\n                    <th scrope=\"row\">{{i+1}}</th>\r\n                    <td>{{key.Prefix}}</td>\r\n                    <td>\r\n                        <span *ngIf=\"!key.Value\">******</span>\r\n                        {{key.Value}}\r\n                        <button *ngIf=\"key.Value\" class=\"btn btn-sm\" ngxClipboard [cbContent]=\"key.Value\"\r\n                                tooltip=\"{{'UXChart.TXT_Clipboard'|translate:locale.language}}\" triggers=\"\"\r\n                                (cbOnSuccess)=\"cpBtn.show()\" (mouseleave)=\"cpBtn.hide()\" #cpBtn=\"bs-tooltip\">\r\n                            <i class=\"fa fa-clipboard\"></i>\r\n                        </button>\r\n                        <span class=\"ml-2\" *ngIf=\"key.Value\" tooltip=\"{{Resources.AdminStrings.TXT.ValueDisplayWarning|translate:locale.language}}\">\r\n                            <i class=\"fa fa-info-circle\"></i>\r\n                        </span>\r\n                    </td>\r\n                    <td>{{key.IssuedDateTime|date:'short'}}</td>\r\n                    <td><button class=\"btn btn-danger\" (click)=\"revoke(key.Id)\">{{Resources.AdminStrings.BTN.Revoke|translate:locale.language}}</button></td>\r\n                </tr>\r\n            </tbody>\r\n        </table>\r\n    </div>\r\n    <div class=\"card\">\r\n        <h3>{{Resources.AdminStrings.TXT.GettingStarted|translate:locale.language}}</h3>\r\n        <br/>\r\n        <div class=\"row table\">\r\n            <div class=\"col-sm-6\">\r\n                <a href=\"/swagger\" target=\"_blank\">{{Resources.AdminStrings.LNK.ApiDocumentationLink|translate:locale.language}}</a>\r\n            </div>\r\n            <div class=\"col-sm-6\">\r\n                <a routerLink=\"/admin/api-guide\" target=\"_blank\">{{Resources.AdminStrings.LNK.ApiTutorialLink|translate:locale.language}}</a>\r\n            </div>\r\n        </div>\r\n    </div>\r\n    <div class=\"card\">\r\n        <h3>{{Resources.AdminStrings.TXT.ClientLibraries|translate:locale.language}}</h3>\r\n        <br />\r\n        <div class=\"container\">\r\n            <div class=\"row\">\r\n                <div class=\"col-sm-4\">\r\n                    <h2>.Net</h2>\r\n                </div>\r\n                <div class=\"col-sm-4\">\r\n                    <h2>Python</h2>\r\n                </div>\r\n                <div class=\"col-sm-4\">\r\n                    <h2>Typescript</h2>\r\n                </div>\r\n            </div>\r\n            <div class=\"row\">\r\n                <div class=\"col-sm-4\">\r\n                    <a href=\"https://www.nuget.org/packages/TocApiLibrary\"><img src=\"/img/netlogo.png\" /></a>\r\n                </div>\r\n                <div class=\"col-sm-4\">\r\n                    <a href=\"https://pypi.org/project/tocapilibrarypython/\">\r\n                        <img width=\"128\" height=\"128\" src=\"/img/python.png\" />\r\n                    </a>\r\n                </div>\r\n                <div class=\"col-sm-4\">\r\n                    <a href=\"https://www.npmjs.com/package/tocapilibraryts\">\r\n                        <img src=\"/img/typescriptlogo.png\" />\r\n                    </a>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    </div>\r\n</div>\r\n","import { Component, OnInit, Inject } from '@angular/core';\r\nimport { L10N_LOCALE, L10nLocale } from 'angular-l10n';\r\nimport * as Resources from '../../strings';\r\nimport * as fromRoot from '../../reducers';\r\nimport * as fromAdmin from '../admin.reducers';\r\nimport * as AdminActions from '../admin.actions';\r\nimport { Observable, Subject } from 'rxjs';\r\nimport { ApiKey } from '../admin.models';\r\nimport { Store, select } from '@ngrx/store';\r\nimport { ConfirmationModalOptions, SharedModals } from 'src/app/shared/shared.models';\r\nimport { DialogShow } from 'src/app/shared/shared.actions';\r\n\r\n@Component({\r\n    selector: 'toc-api',\r\n    templateUrl: 'api.component.html'\r\n})\r\n\r\nexport class ApiComponent implements OnInit {\r\n    Resources = Resources;\r\n    apiKeys$: Observable<ApiKey[]>;\r\n    private unsubscribe: Subject<void> = new Subject();\r\n\r\n    constructor(@Inject(L10N_LOCALE) public locale: L10nLocale, private store: Store<fromRoot.State>) {\r\n        this.apiKeys$ = this.store.pipe(select(fromAdmin.selectApiKeys));\r\n    }\r\n\r\n    ngOnInit() {\r\n        this.store.dispatch(AdminActions.loadApiKeys());\r\n    }\r\n\r\n    createApiKey() {\r\n        this.store.dispatch(AdminActions.createApiKey());\r\n    }\r\n\r\n    revoke(id: number) {\r\n        const confirmationOptions: ConfirmationModalOptions = {\r\n            cancelButtonText: Resources.Strings.BUTTON.Cancel,\r\n            text: Resources.AdminStrings.DLG.ConfirmRevokeTxt,\r\n            title: Resources.AdminStrings.DLG.ConfirmRevokeTitle,\r\n            successButtonText: Resources.AdminStrings.BTN.Revoke,\r\n            successAction: AdminActions.revokeApiKey({ id })\r\n        };\r\n        this.store.dispatch(\r\n            new DialogShow({\r\n                dialogName: SharedModals.ConfirmationDialog,\r\n                options: {\r\n                    options: confirmationOptions\r\n                }\r\n            })\r\n        );\r\n    }\r\n}\r\n","<div class=\"container\">\r\n    <form class=\"card\" [ngrxFormState]=\"(appearanceFormState$|async)\">\r\n        <div class=\"section-heading\">{{'admin.CUSTOMIZE_APPEARANCE'|translate:locale.language}}\r\n            <button class=\"btn btn-success\" (click)=\"saveAppearance()\" translate>common.SAVE_CHANGES</button>\r\n        </div>\r\n        <div class=\"suffix\" l10nTranslate>admin.TXT_Desc</div>\r\n        <div class=\"row horizontal-form\">\r\n            <div class=\"col-3\">\r\n                <label l10nTranslate>admin.TXT_Theme</label>\r\n            </div>\r\n            <div class=\"col-9\">\r\n                <select class=\"form-control\" [ngrxFormControlState]=\"(appearanceFormState$|async).controls.theme\">\r\n                    <option translate=\"admin.TXT_Light\" value=\"Light\">admin.TXT_Light</option>\r\n                    <option translate=\"admin.TXT_Dark\" value=\"Dark\">admin.TXT_Dark</option>\r\n                </select>\r\n            </div>\r\n        </div>\r\n        <div class=\"row horizontal-form has-error\" ng-if=\"colorErrorMessage\">\r\n            <div class=\"col-12\">\r\n                <span>{{colorErrorMessage}}</span>\r\n            </div>\r\n        </div>\r\n        <div class=\"row\">\r\n            <div class=\"col-3\"><label translate=\"admin.TXT_Brand\">admin.TXT_Brand</label></div>\r\n            <div class=\"col-9\">\r\n                <a class=\"color-swatch\"\r\n                    [style.background-color]=\"((appearanceFormState$ | async).controls.brandColor.value)  || '#000000'\"></a>\r\n                <input type=\"text\" [colorPicker]=\"(appearanceFormState$ | async).controls.brandColor.value\"\r\n                    [style.width.px]=\"100\" [value]=\"(appearanceFormState$ | async).controls.brandColor.value\"\r\n                    (colorPickerChange)=\"updateBrandColor($event)\" [readonly]=\"false\" [cpWidth]=\"200\"\r\n                    [cpOutputFormat]=\"'hex'\" [cpPosition]=\"'bottom'\" class=\"form-control\" />\r\n            </div>\r\n        </div>\r\n    </form>\r\n    <div class=\"card\">\r\n        <div class=\"section-heading\">\r\n            {{'admin.TXT_Footer'|translate:locale.language}}\r\n            <button class=\"btn btn-success\" (click)=\"saveAppearance()\"\r\n                translate=\"common.SAVE_CHANGES\">common.SAVE_CHANGES</button>\r\n        </div>\r\n        <div class=\"suffix\" translate=\"admin.TXT_FooterDesc\">admin.TXT_FooterDesc</div>\r\n        <textarea rows=\"2\" class=\"form-control\"\r\n            [ngrxFormControlState]=\"(appearanceFormState$|async).controls.footerText\"></textarea>\r\n        <br />\r\n        <span>{{colorErrorMessage}}</span>\r\n    </div>\r\n    <div class=\"card\">\r\n        <div class=\"section-heading\">\r\n            {{'admin.TXT_Logo'|translate:locale.language}}\r\n            <button class=\"btn btn-success\" (click)=\"saveLogo()\" translate=\"common.SAVE_CHANGES\">\r\n                common.SAVE_CHANGES\r\n            </button>\r\n        </div>\r\n        <div class=\"row\">\r\n            <div class=\"col-3\">\r\n                <input type=\"file\" ngf-max-size=\"5MB\" accept=\"image/*\" name=\"fileLogo\" ng2FileSelect\r\n                    [uploader]=\"logoUploader\" (onFileSelected)=\"uploadLogo()\">\r\n                <br />\r\n                <div class=\"alert-error\" ng-show=\"model.showError\"></div>\r\n                <div *ngIf=\"showRemoveLogo\">\r\n                    <button class=\"btn btn-danger btn-sm\" (click)=\"removeLogo()\"\r\n                        translate=\"admin.BUTTON_RemoveLogo\">admin.BUTTON_RemoveLogo</button>\r\n                </div>\r\n            </div>\r\n            <div class=\"col-2\">\r\n                <img style=\"max-width: 100%\" [src]=\"href\" *ngIf=\"href\" />\r\n            </div>\r\n        </div>\r\n    </div>\r\n    <div class=\"card\">\r\n        <div class=\"section-heading\">\r\n            {{'admin.TXT_CustomCSS'|translate:locale.language}}\r\n            <button class=\"btn btn-success\" ng-click=\"saveColor()\" translate=\"common.SAVE_CHANGES\">\r\n                common.SAVE_CHANGES\r\n            </button>\r\n        </div>\r\n        <div class=\"suffix\" translate=\"admin.TXT_CustomCSSDesc\">admin.TXT_CustomCSSDesc</div>\r\n        <input type=\"file\" ngf-max-size=\"5MB\" accept=\"text/*\" name=\"fileCss\" ng2FileSelect [uploader]=\"cssUploader\"\r\n            (onFileSelected)=\"uploadCss()\">\r\n        <br />\r\n        <div *ngIf=\"csshref\">\r\n            <h5>Remove Custom CSS</h5>\r\n            <button class=\"btn btn-danger\" (click)=\"removeCss()\"\r\n                translate=\"admin.TXT_RemoveCSS\">admin.TXT_RemoveCSS</button>\r\n        </div>\r\n        <div class=\"alert-error\" ng-show=\"model.showError\"></div>\r\n        <div class=\"col-md-3\" *ngIf=\"csshref\">\r\n        </div>\r\n    </div>\r\n</div>\r\n","import { Component, OnInit, OnDestroy, Inject } from '@angular/core';\r\nimport { L10N_LOCALE, L10nLocale } from 'angular-l10n';\r\nimport { Store, select } from '@ngrx/store';\r\nimport { CompositeModel } from '../admin.models';\r\nimport { Subject, Observable } from 'rxjs';\r\nimport * as fromRoot from '../../reducers';\r\nimport * as fromAdmin from '../admin.reducers';\r\nimport * as AdminActions from '../admin.actions';\r\nimport { takeUntil, debounceTime, take, map } from 'rxjs/operators';\r\nimport { FormGroupState, SetValueAction } from 'ngrx-forms';\r\nimport { FileUploader } from 'ng2-file-upload';\r\nimport { ToastSuccess } from 'src/app/shared/shared.actions';\r\nimport { AdminService } from '../services/admin.service';\r\nimport { Toast } from 'ngx-toastr';\r\n\r\n@Component({\r\n    selector: 'toc-admin-appearance',\r\n    styleUrls: ['./appearance.component.scss'],\r\n    templateUrl: './appearance.component.html'\r\n})\r\nexport class AppearanceComponent implements OnInit, OnDestroy {\r\n    model$: Observable<CompositeModel>;\r\n    brandColor$: Subject<string> = new Subject();\r\n    appearanceFormState$: Observable<FormGroupState<fromAdmin.AppearanceFormValue>>;\r\n    colorErrorMessage = '';\r\n    href = '';\r\n    csshref = '';\r\n    showRemoveLogo = false;\r\n    public logoUploader: FileUploader = new FileUploader({\r\n        isHTML5: true,\r\n        allowedMimeType: ['image/*', 'image/jpeg', 'image/png', 'image/bmp'],\r\n        url: '/api/admin/logoblobux'\r\n    });\r\n    public cssUploader: FileUploader = new FileUploader({\r\n        isHTML5: true,\r\n        allowedMimeType: ['text/*', 'text/css', 'text/plain', 'text/html'],\r\n        url: '/api/admin/customcss'\r\n    });\r\n    private unsubscribe: Subject<void> = new Subject();\r\n\r\n    constructor(@Inject(L10N_LOCALE) public locale: L10nLocale, private store: Store<fromRoot.State>, private adminService: AdminService) {\r\n        this.model$ = store.pipe(select(fromAdmin.selectCompositeModel));\r\n        this.model$.pipe(takeUntil(this.unsubscribe)).subscribe(model => {\r\n            if (model === null) {\r\n                this.store.dispatch(AdminActions.loadCompositeModel());\r\n                return;\r\n            }\r\n            this.store.dispatch(AdminActions.setAppearanceFormFromCompositeModel({ model }));\r\n            this.showRemoveLogo = model.Settings.HasCustomLogo;\r\n            this.csshref = model.CustomCssPath;\r\n            this.href = model.LogoPath;\r\n            if (this.href) {\r\n                this.href = this.href + '?decache=' + Math.random();\r\n            }\r\n        });\r\n        this.appearanceFormState$ = store.pipe(select(fromAdmin.selectAppearanceFormState));\r\n        this.brandColor$.pipe(takeUntil(this.unsubscribe), debounceTime(50)).subscribe(color => {\r\n            this.store.dispatch(new SetValueAction(fromAdmin.initialAppearanceFormState.controls.brandColor.id, color));\r\n        });\r\n    }\r\n\r\n    ngOnInit() {\r\n        this.logoUploader.onCompleteItem = (item, response, status, headers) => {\r\n            console.log(item, response, status, headers);\r\n            const resp = JSON.parse(response);\r\n            if (resp['status'] === 'OK') {\r\n                this.href = resp['href'] + '?decache=' + Math.random();\r\n                this.showRemoveLogo = true;\r\n                this.store.dispatch(new ToastSuccess(''));\r\n            }\r\n        };\r\n        this.cssUploader.onCompleteItem = (item, response, status, headers) => {\r\n            console.log(item, response, status, headers);\r\n            const resp = JSON.parse(response);\r\n            if (resp['status'] === 'OK') {\r\n                this.csshref = resp['href'] + '?decache=' + Math.random();\r\n                this.store.dispatch(new ToastSuccess(''));\r\n            }\r\n        };\r\n    }\r\n\r\n    updateBrandColor($event: string) {\r\n        this.brandColor$.next($event);\r\n    }\r\n\r\n    saveAppearance() {\r\n        this.appearanceFormState$\r\n            .pipe(\r\n                take(1),\r\n                map(appearanceForm => {\r\n                    const isOk = /(^#[0-9A-F]{6}$)|(^#[0-9A-F]{3}$)/i.test(appearanceForm.controls.brandColor.value);\r\n                    if (!isOk) {\r\n                        this.colorErrorMessage = 'Please enter a valid brand color value';\r\n                        return;\r\n                    }\r\n                    this.colorErrorMessage = '';\r\n                    this.store.dispatch(AdminActions.saveAppearance({ form: appearanceForm.value }));\r\n                    this.store.dispatch(new ToastSuccess(\"\"));\r\n                })\r\n            )\r\n            .subscribe();\r\n    }\r\n\r\n    uploadLogo() {\r\n        this.href = '';\r\n        this.logoUploader.uploadAll();\r\n    }\r\n\r\n    uploadCss() {\r\n        this.csshref = '';\r\n        this.cssUploader.uploadAll();\r\n    }\r\n\r\n    removeLogo() {\r\n        this.adminService.removeLogo().pipe(takeUntil(this.unsubscribe)).subscribe(() => {\r\n            this.href = '';\r\n            this.showRemoveLogo = false;\r\n            this.store.dispatch(new ToastSuccess(''));\r\n            this.saveAppearance();\r\n        });\r\n    }\r\n\r\n    saveLogo() {\r\n        this.saveAppearance();\r\n    }\r\n\r\n    removeCss() {\r\n        this.adminService.removeCss().pipe(takeUntil(this.unsubscribe)).subscribe(() => {\r\n            this.store.dispatch(new ToastSuccess(''));\r\n            this.csshref = '';\r\n        });\r\n    }\r\n\r\n    ngOnDestroy(): void {\r\n        this.unsubscribe.next();\r\n        this.unsubscribe.complete();\r\n    }\r\n}\r\n","<div class=\"container\">\r\n    <div class=\"card\">\r\n        <div class=\"section-heading\">{{'admin.TXT_InformationSource'|translate:locale.language}}</div>\r\n        <div class=\"suffix\">{{'admin.TXT_InformationSourceDesc'|translate:locale.language}}</div>\r\n        <div class=\"row mb-2\">\r\n            <div class=\"col-12 col-sm-6 col-md-4 col-xl-3\">\r\n                <button class=\"btn btn-success\" (click)=\"newSource()\"\r\n                    translate=\"admin.TXT_ISAddNew\">admin.TXT_ISAddNew</button>\r\n            </div>\r\n        </div>\r\n        <div class=\"row\">\r\n            <div class=\"col-12\">\r\n                <div class=\"table-responsive\" *ngIf=\"sources.length > 0\">\r\n                    <table class='table table-striped table-bordered table-hover'>\r\n                        <thead>\r\n                            <tr>\r\n                                <th>{{'admin.TXT_ISSource'|translate:locale.language}}</th>\r\n                                <th>{{'admin.TXT_ISSourceType'|translate:locale.language}}</th>\r\n                                <th></th>\r\n                                <th>{{'admin.TXT_ISTestSource'|translate:locale.language}}</th>\r\n                                <th>{{'admin.TXT_ISDelete'|translate:locale.language}}</th>\r\n                            </tr>\r\n                        </thead>\r\n                        <tbody>\r\n                            <tr *ngFor=\"let source of sources\" [style.cursor]=\"source.CanEdit ? 'pointer' : ''\"\r\n                                (click)=\"source.CanEdit && editSource(source.InformationSourceId)\">\r\n                                <td>{{source.SourceName}}</td>\r\n                                <td>{{source.FriendlyTypeName}}</td>\r\n                                <td>{{source.Description}}</td>\r\n                                <td>\r\n                                    <button class=\"btn btn-success\"\r\n                                        (click)=\"testInformationSource(source.InformationSourceId)\"\r\n                                        translate=\"admin.TXT_ISTestConnection\">\r\n                                        admin.TXT_ISTestConnection\r\n                                    </button>\r\n                                </td>\r\n                                <td><button type=\"button\" class=\"close\" *ngIf=\"source.CanEdit\"\r\n                                        (click)=\"removeSource(source.InformationSourceId)\">&times;</button></td>\r\n                            </tr>\r\n                        </tbody>\r\n                    </table>\r\n                </div>\r\n            </div>\r\n        </div>\r\n        <br />\r\n        <br />\r\n        <div class=\"row\">\r\n            <div class=\"col-12\" *ngIf=\"selectedSource\">\r\n                <div>\r\n                    <div ng-form=\"form\">\r\n                        <div class=\"row\">\r\n                            <div class=\"col-12 col-sm-6 form-group\" bs-has-error>\r\n                                <label translate=\"admin.TXT_ISSource\">Source Name</label>\r\n                                <input type=\"text\" class=\"form-control\" [(ngModel)]=\"selectedSource.SourceName\"\r\n                                    required />\r\n                            </div>\r\n                            <div class=\"col-12 col-sm-6\">\r\n                                <label>SQL or List</label>\r\n                                <div class=\"form-group\">\r\n                                    <div class=\"radio\">\r\n                                        <label>\r\n                                            <input type=\"radio\" name=\"sourceType\" value=\"SQLServer\"\r\n                                                [(ngModel)]=\"selectedSource.SourceType\">\r\n                                            SQL Server\r\n                                        </label>\r\n                                    </div>\r\n                                    <div class=\"radio\">\r\n                                        <label>\r\n                                            <input type=\"radio\" name=\"sourceType\" value=\"SharePointList\"\r\n                                                [(ngModel)]=\"selectedSource.SourceType\">\r\n                                            SharePoint List\r\n                                        </label>\r\n                                    </div>\r\n                                </div>\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                    <div *ngIf=\"selectedSource.SourceType=='SQLServer'\">\r\n                        <label translate=\"admin.TXT_ISSourceCon\">Connection String</label>\r\n                        <input type=\"text\" class=\"form-control\" [(ngModel)]=\"selectedSource.ConnectionString\"\r\n                            required />\r\n                        <label translate=\"admin.TXT_ISQuery\">Query</label>\r\n                        <textarea type=\"text\" class=\"form-control\" [(ngModel)]=\"selectedSource.Query\"\r\n                            required></textarea>\r\n                    </div>\r\n                    <div *ngIf=\"selectedSource.SourceType=='SharePointList'\">\r\n                        <div class=\"row\">\r\n                            <div class=\"col\"><label translate=\"admin.TXT_ISSharePointLists\">SharePoint Lists</label>\r\n                                <select class=\"form-control\" [ngModel]=\"selectedListId\" (ngModelChange)=\"updateFieldList()\">\r\n                                    <option *ngFor=\"let option of sharePointLists$|async\" ng-value=\"option.Id\">\r\n                                        {{option.Name}}</option>\r\n                                </select>\r\n                            </div>\r\n                            <div class=\"col\">\r\n                                <label translate=\"admin.TXT_ISSharePointListFields\">Field</label>\r\n                                <select class=\"form-control\" [(ngModel)]=\"selectedSharePointFieldId\"\r\n                                    ng-change=\"updateSelectedField(SharePointFieldId)\"\r\n                                    ng-options=\"key as value  for (key, value) in SharePointListFields\">\r\n                                    <option *ngFor=\"let field of sharePointListFields$|async|keyvalue\"\r\n                                        [value]=\"field.value\">\r\n                                    </option>\r\n                                </select>\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n                <br />\r\n                <button class=\"btn btn-success\" (click)=\"saveSource()\" translate=\"common.SAVE_CHANGES\">\r\n                    common.SAVE_CHANGES\r\n                </button>\r\n            </div>\r\n        </div>\r\n    </div>\r\n","import { Component, OnInit, OnDestroy, Inject } from '@angular/core';\r\nimport { L10N_LOCALE, L10nLocale } from 'angular-l10n';\r\nimport { InformationSourceViewModel, SharePointListInfo } from '../admin.models';\r\nimport { Store, select } from '@ngrx/store';\r\nimport { CompositeModel } from '../admin.models';\r\nimport { Subject, Observable } from 'rxjs';\r\nimport * as fromRoot from '../../reducers';\r\nimport * as fromAdmin from '../admin.reducers';\r\nimport * as AdminActions from '../admin.actions';\r\nimport { takeUntil, debounceTime, take, map, filter } from 'rxjs/operators';\r\nimport { ToastError } from 'src/app/shared/shared.actions';\r\n\r\n@Component({\r\n    selector: 'toc-admin-information-sources',\r\n    templateUrl: 'information-sources.component.html'\r\n})\r\nexport class InformationSourcesComponent implements OnInit, OnDestroy {\r\n    sources: InformationSourceViewModel[] = [];\r\n    selectedSource: InformationSourceViewModel = null;\r\n    selectedListId: string = null;\r\n    selectedSharePointFieldId: string = null;\r\n    sharePointLists$: Observable<SharePointListInfo[]>;\r\n    sharePointListFields$: Observable<{ [paramName: string]: string }[]>;\r\n    private unsubscribe: Subject<void> = new Subject();\r\n\r\n    constructor(@Inject(L10N_LOCALE) public locale: L10nLocale, private store: Store<fromRoot.State>) {\r\n        this.store.pipe(select(fromAdmin.selectCompositeModel), takeUntil(this.unsubscribe)).subscribe(model => {\r\n            if (model === null) {\r\n                this.store.dispatch(AdminActions.loadCompositeModel());\r\n                return;\r\n            }\r\n            this.sources = model.InformationSources.map(x => ({ ...x }));\r\n        });\r\n        this.store.pipe(select(fromAdmin.selectSelectedSourceInfo), takeUntil(this.unsubscribe), filter(x => x !== null)).subscribe(info => {\r\n            if (this.selectedSource.InformationSourceId === info.InformationSourceId) {\r\n                this.selectedSource = { ...info };\r\n            }\r\n        });\r\n        this.store.pipe(select(fromAdmin.selectDeletedSourceId), takeUntil(this.unsubscribe), filter(x => x !== null)).subscribe(id => {\r\n            this.sources = this.sources.filter(x => (x.InformationSourceId !== id));\r\n            this.store.dispatch(AdminActions.loadCompositeModel());\r\n        });\r\n        this.store.pipe(select(fromAdmin.selecteSavedSourceId), takeUntil(this.unsubscribe), filter(x => x !== null)).subscribe(id => {\r\n            if (this.selectedSource) {\r\n                const idx = this.sources.findIndex(x => x.InformationSourceId === id);\r\n                if (idx === -1) {\r\n                    this.sources.push({ ...this.selectedSource, InformationSourceId: id });\r\n                    this.selectedSource = { ...this.sources.find(x => x.InformationSourceId === id) };\r\n                } else {\r\n                    this.sources[idx] = { ...this.selectedSource };\r\n                    this.selectedSource = { ...this.sources[idx] };\r\n                }\r\n            }\r\n            this.store.dispatch(AdminActions.clearSavedSourceId());\r\n        });\r\n        this.sharePointLists$ = this.store.pipe(select(fromAdmin.selectSharePointLists));\r\n        this.sharePointListFields$ = this.store.pipe(select(fromAdmin.selectSharePointListFields));\r\n    }\r\n\r\n    ngOnInit() {}\r\n\r\n    testInformationSource(id: string) {\r\n        this.store.dispatch(AdminActions.testInformationSource({ id }));\r\n    }\r\n\r\n    newSource() {\r\n        this.selectedSource = {\r\n            CanEdit: false,\r\n            ConnectionString: '',\r\n            Description: '',\r\n            FriendlyTypeName: '',\r\n            InformationSourceId: '',\r\n            Query: '',\r\n            SharePointList: '',\r\n            SharePointListColumn: '',\r\n            SourceName: '',\r\n            SourceType: 'SQLServer'\r\n        };\r\n    }\r\n\r\n    editSource(sourceId: string) {\r\n        const source = this.sources.find(x => x.InformationSourceId === sourceId);\r\n        if (source) {\r\n            this.selectedSource = { ...source };\r\n        }\r\n        this.store.dispatch(AdminActions.loadInformationSource({ sourceId }));\r\n    }\r\n\r\n    removeSource(id: string) {\r\n        this.store.dispatch(AdminActions.deleteInformationSource({ id }));\r\n    }\r\n\r\n    saveSource() {\r\n        if (this.selectedSource === null) {\r\n            this.store.dispatch(new ToastError('Please select an existing or create a new source first'));\r\n            return;\r\n        }\r\n        this.store.dispatch(AdminActions.saveInformationSource({ source: this.selectedSource }));\r\n    }\r\n\r\n    updateFieldList() {\r\n        if (this.selectedListId) {\r\n            this.store.dispatch(AdminActions.getSharePointListFields({ id: this.selectedListId }));\r\n        }\r\n    }\r\n\r\n    ngOnDestroy(): void {\r\n        this.unsubscribe.next();\r\n        this.unsubscribe.complete();\r\n    }\r\n}\r\n","<div class=\"container\">\r\n    <div class=\"card\">\r\n        <div class=\"section-heading\" translate=\"admin.TXT_ManageAdmin\">Manage chart administrators</div>\r\n        <div class=\"suffix\" translate=\"admin.TXT_ManageAdminDesc\">Control the list of users who have administrator\r\n            privileges to all charts</div>\r\n        <div class=\"row\">\r\n            <div class=\"col-12 col-md-6\">\r\n                <input class=\"form-control\" [(ngModel)]=\"peoplePickerSearchString\" [typeahead]=\"peoplePickerSource$\"\r\n                    [typeaheadAsync]=\"true\" (typeaheadOnSelect)=\"onSelectPerson($event)\" typeaheadOptionsLimit=\"20\"\r\n                    [typeaheadScrollable]=\"true\" [typeaheadOptionsInScrollableView]=\"8\" container=\"body\"\r\n                    typeaheadWaitMs=\"200\" typeaheadOptionField=\"TypeaheadTitle\"\r\n                    placeholder=\"{{Resources.AuditStrings.SelectStartingPersonPlaceholder|translate:locale.language}}\" />\r\n                <br />\r\n                <button class=\"btn btn-success\" (click)=\"addCreator()\" [disabled]=\"newCreator === null\">\r\n                    <i class=\"fa fa-plus-circle fa-lg\"></i> {{'admin.BUTTON_AddAdmin'|translate:locale.language}}\r\n                </button>\r\n            </div>\r\n            <div class=\"col-12 col-md-6 mt-2 mt-md-0\">\r\n                <ul class=\"list-group\">\r\n                    <li class=\"list-group-item\" *ngFor=\"let creator of creators\">\r\n                        <span>{{creator.name}}</span> <button type=\"button\" class=\"close\"\r\n                            (click)=\"removeCreator(creator.id)\">&times;</button>\r\n                    </li>\r\n                </ul>\r\n            </div>\r\n        </div>\r\n    </div>\r\n    <div class=\"card\">\r\n        <div class=\"section-heading\" translate=\"admin.TXT_ManageGroups\">Manage Security Groups</div>\r\n        <div class=\"suffix\" translate=\"admin.TXT_ManageGroupsDesc\">Use this page to control access to charts, define\r\n            groups of people who can view or administrate specific charts and restrict access to charts to certain\r\n            groups of people within the organisation.</div>\r\n        <div class=\"row\">\r\n            <div class=\"col-md-4\">\r\n                <div class=\"input-group\">\r\n                    <input type=\"text\" class=\"form-control\" [(ngModel)]=\"newSecurityGroupName\"\r\n                        placeholder=\"{{'admin.TXT_NewGroup'|translate:locale.language}}\" />\r\n                    <span class=\"input-group-btn\">\r\n                        <button class=\"btn btn-success\" type=\"button\" [disabled]=\"newSecurityGroupName.length === 0\"\r\n                            (click)=\"addSecurityGroup()\"><i class=\"fa fa-plus-circle fa-lg\"></i>\r\n                            {{'admin.TXT_AddNewGroup'|translate:locale.language}}</button>\r\n                    </span>\r\n                </div>\r\n                <br />\r\n            </div>\r\n        </div>\r\n        <div class=\"row\">\r\n            <div class=\"col-md-4\">\r\n                <select class=\"form-control\" [(ngModel)]=\"selectedSecurityGroup\">\r\n                    <option translate=\"admin.TXT_SelectGroup\" [ngValue]=\"null\" selected>Select existing group</option>\r\n                    <option *ngFor=\"let securityGroup of (model$|async)?.SecurityGroups\" [ngValue]=\"securityGroup\">\r\n                        {{securityGroup.Name}}</option>\r\n                </select>\r\n                <br />\r\n            </div>\r\n            <div class=\"col-md-4\">                \r\n                <button class=\"btn btn-danger\" *ngIf=\"selectedSecurityGroup\" (click)=\"removeSecurityGroup(selectedSecurityGroup.Id)\">\r\n                    <i class=\"fa fa-trash fa-lg\"></i> {{'admin.TXT_RemoveGroup'|translate:locale.language}}\r\n                </button>\r\n            </div>\r\n        </div>\r\n        <div id=\"manage-security-group\" *ngIf=\"selectedSecurityGroup\">\r\n            <div class=\"row\">\r\n                <div class=\"col-md-4\">\r\n                    <b translate=\"admin.TXT_AddUserToGroup\">Add Users to Security Group</b>\r\n                </div>\r\n                <div class=\"col-md-4\">\r\n                    <b translate=\"admin.TXT_AddGroupToGroup\"> Add Groups to Security Group</b>\r\n                </div>\r\n            </div>\r\n            <div class=\"row\">\r\n                <div class=\"col-md-4\">\r\n                    <input class=\"form-control\" [(ngModel)]=\"securityUserPickerString\"\r\n                        [typeahead]=\"securityUserPickerSource$\" [typeaheadAsync]=\"true\"\r\n                        (typeaheadOnSelect)=\"onSelectSecurityPerson($event)\" typeaheadOptionsLimit=\"20\"\r\n                        [typeaheadScrollable]=\"true\" [typeaheadOptionsInScrollableView]=\"8\" container=\"body\"\r\n                        typeaheadWaitMs=\"200\" typeaheadOptionField=\"TypeaheadTitle\"\r\n                        placeholder=\"{{Resources.AuditStrings.SelectStartingPersonPlaceholder|translate:locale.language}}\" />\r\n                    <p></p>\r\n                    <div class=\"clearfix\"></div>\r\n                    <button class=\"btn btn-success\" (click)=\"addToSecurityGroup('user')\"\r\n                        [disabled]=\"addedUser === null\"><i class=\"fa fa-plus-circle fa-lg\"></i>\r\n                        {{'admin.TXT_AddUser'|translate:locale.language}}</button>\r\n                </div>\r\n                <div class=\"col-md-4\">\r\n                    <select class=\"form-control\" [(ngModel)]=\"addedGroup\">\r\n                        <option [ngValue]=\"null\">{{'admin.TXT_SelectAGroup'|translate:locale.language}}</option>\r\n                        <option *ngFor=\"let group of (availableEntries$|async)?.groups\" [ngValue]=\"group\">\r\n                            {{group.value}}</option>\r\n                    </select>\r\n                    <p></p>\r\n                    <div class=\"clearfix\"></div>\r\n                    <button class=\"btn btn-success\" (click)=\"addToSecurityGroup('group')\"\r\n                        [disabled]=\"addedGroup === null\"><i class=\"fa fa-plus-circle fa-lg\"></i>\r\n                        {{'admin.TXT_AddGroup'|translate:locale.language}}</button>\r\n                </div>\r\n            </div>\r\n            <p></p>\r\n            <div class=\"row\">\r\n                <div class=\"col-md-4\">\r\n                    <b translate=\"admin.TXT_UsersInGroup\">Users in Security Group</b>\r\n                    <ul class=\"list-group\">\r\n                        <li class=\"list-group-item\" *ngIf=\"!hasItems('user')\"\r\n                            ng-if=\"(security.currentGroup.SecurityGroupEntries|users).length == 0\"\r\n                            translate=\"admin.TXT_None\">admin.TXT_None</li>\r\n                        <li class=\"list-group-item\"\r\n                            *ngFor=\"let entry of selectedSecurityGroup.SecurityGroupEntries | callback: userEntry\"\r\n                            ng-repeat=\"user in security.currentGroup.SecurityGroupEntries|users\">{{entry.UserName}}\r\n                            <button type=\"button\" class=\"close\"\r\n                                (click)=\"removeSecurityGroupEntry(entry.Id)\">&times;</button></li>\r\n                    </ul>\r\n                </div>\r\n                <div class=\"col-md-4\">\r\n                    <b translate=\"admin.TXT_GroupsInGroup\">Groups in Security Group</b>\r\n                    <ul class=\"list-group\">\r\n                        <li class=\"list-group-item\" *ngIf=\"!hasItems('group')\" translate=\"admin.TXT_NoGroups\">\r\n                            admin.TXT_NoGroups</li>\r\n                        <li class=\"list-group-item\"\r\n                            *ngFor=\"let entry of selectedSecurityGroup.SecurityGroupEntries | callback: groupEntry\">\r\n                            {{entry.GroupName}}\r\n                            <button type=\"button\" class=\"close\"\r\n                                (click)=\"removeSecurityGroupEntry(entry.Id)\">&times;</button></li>\r\n                    </ul>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    </div>\r\n    <div class=\"card\">\r\n        <div class=\"section-heading\" translate=\"admin.TXT_AssignTitle\">Assign Groups to Charts</div>\r\n        <div class=\"suffix\" translate=\"admin.TXT_AssignDesc\">Manage which charts each admin group can access here</div>\r\n        <div class=\"row\">\r\n            <div class=\"table-responsive col-md-12\">\r\n                <table class=\"table table-hover\">\r\n                    <thead class=\"theader\">\r\n                        <tr>\r\n                            <th translate=\"admin.TXT_OrgChart\">Organization Chart</th>\r\n                            <th translate=\"admin.TXT_ViewGroup\">View Only Group</th>\r\n                            <th translate=\"admin.TXT_AdminGroup\">Admin Group</th>\r\n                            <th translate=\"admin.TXT_DenyGroup\">Deny Access To</th>\r\n                        </tr>\r\n                    </thead>\r\n                    <tr *ngFor=\"let chart of charts$|async\">\r\n                        <td>{{chart.name}}</td>\r\n                        <td>\r\n                            <select class=\"form-control\" [ngModel]=\"chart.viewGroupId\"\r\n                                ng-options=\"group.Id as group.Name for group in securityGroups\"\r\n                                (ngModelChange)=\"saveChart(chart, 'viewGroupId', $event)\"\r\n                                [disabled]=\"(chartRequests$|async)[chart.id]\">\r\n                                <option [ngValue]=\"0\" translate=\"admin.TXT_Everybody\">admin.TXT_Everybody</option>\r\n                                <option *ngFor=\"let group of (model$|async)?.SecurityGroups\" [ngValue]=\"group.Id\">\r\n                                    {{group.Name}}</option>\r\n                            </select>\r\n                        </td>\r\n                        <td>\r\n                            <select class=\"form-control\" [ngModel]=\"chart.adminGroupId\"\r\n                                ng-options=\"group.Id as group.Name for group in securityGroups\"\r\n                                (ngModelChange)=\"saveChart(chart, 'adminGroupId', $event)\"\r\n                                [disabled]=\"(chartRequests$|async)[chart.id]\">\r\n                                <option [ngValue]=\"0\" translate=\"admin.TXT_Creators\">admin.TXT_Creators</option>\r\n                                <option *ngFor=\"let group of (model$|async)?.SecurityGroups\" [ngValue]=\"group.Id\">\r\n                                    {{group.Name}}</option>\r\n                            </select>\r\n                        </td>\r\n                        <td>\r\n                            <select class=\"form-control\" [ngModel]=\"chart.denyGroupId\"\r\n                                ng-options=\"group.Id as group.Name for group in securityGroups\"\r\n                                (ngModelChange)=\"saveChart(chart, 'denyGroupId', $event)\"\r\n                                [disabled]=\"(chartRequests$|async)[chart.id]\">\r\n                                <option [ngValue]=\"0\" translate=\"admin.TXT_Nobody\">admin.TXT_Nobody</option>\r\n                                <option *ngFor=\"let group of (model$|async)?.SecurityGroups\" [ngValue]=\"group.Id\">\r\n                                    {{group.Name}}</option>\r\n                            </select>\r\n                        </td>\r\n                    </tr>\r\n                </table>\r\n            </div>\r\n        </div>\r\n    </div>\r\n    <div class=\"card\">\r\n        <div class=\"section-heading\" translate=\"admin.TXT_ExternalTitle\">External user access</div>\r\n        <div class=\"suffix\" translate=\"admin.TXT_ExternalDesc\">Control whether charts can be shared outside of\r\n            TeamOrgChart</div>\r\n        <div class=\"subheading mb-0 mt-1\" translate=\"admin.TXT_GlobalSetting\">Global setting</div>\r\n        <p class=\"mt-1\" translate=\"admin.TXT_GlobalDesc\">Disallowing access globally overrides all chart specific\r\n            settings</p>\r\n        <div class=\"row\">\r\n            <div class=\"col-md-4\">\r\n                <select class=\"form-control\" [(ngModel)]=\"globalExternalUsersSetting\" ng-disabled=\"saving\"\r\n                    (change)=\"saveGlobalExternalSetting(globalExternalUsersSetting)\">\r\n                    <option [value]=\"false\">Not allowed</option>\r\n                    <option [value]=\"true\">Allowed</option>\r\n                </select>\r\n            </div>\r\n        </div>\r\n        <div class=\"subheading\" translate=\"admin.TXT_ChartSetting\">Chart specific settings</div>\r\n        <div class=\"row\">\r\n            <div class=\"table-responsive col-md-12\">\r\n                <table class=\"table table-hover\">\r\n                    <thead class=\"theader\">\r\n                        <tr>\r\n                            <th translate=\"admin.TXT_OrgChart\">Organization Chart</th>\r\n                            <th translate=\"admin.TXT_ChartExternalUser\">External users access</th>\r\n                        </tr>\r\n                    </thead>\r\n                    <tr *ngFor=\"let chart of charts$|async\">\r\n                        <td>{{chart.name}}</td>\r\n                        <td>\r\n                            <select class=\"form-control\" [ngModel]=\"chart.areExternalUsersAllowed\"\r\n                                [disabled]=\"(chartExternalRequests$|async)[chart.id] || !globalExternalUsersSetting\"\r\n                                (ngModelChange)=\"saveExternalUsersSetting(chart, $event)\"\r\n                                ng-options=\"o.v as o.n for o in [{ n: 'Not allowed', v: false }, { n: 'Allowed', v: true }]\">\r\n                                <option [value]=\"false\">Not allowed</option>\r\n                                <option [value]=\"true\">Allowed</option>\r\n                            </select>\r\n                        </td>\r\n                    </tr>\r\n                </table>\r\n            </div>\r\n        </div>\r\n    </div>\r\n</div>\r\n","import { Component, OnInit, OnDestroy, Inject } from '@angular/core';\r\nimport { L10N_LOCALE, L10nLocale } from 'angular-l10n';\r\nimport { Store, select } from '@ngrx/store';\r\nimport * as fromRoot from '../../reducers';\r\nimport * as fromAdmin from '../admin.reducers';\r\nimport * as AdminActions from '../admin.actions';\r\nimport { Observable, Subject } from 'rxjs';\r\nimport { CompositeModel, CreatorInfo, SecurityGroup, AvailableEntries, Entry, SecurityGroupEntry, SecurityChartViewModel } from '../admin.models';\r\nimport * as Resources from '../../strings';\r\nimport { takeUntil, map, mergeMap, take, withLatestFrom } from 'rxjs/operators';\r\nimport { ChartService } from 'src/app/core/services/chart.service';\r\nimport { ChartNode } from 'src/app/models';\r\nimport { TypeaheadMatch } from 'ngx-bootstrap/typeahead/public_api';\r\nimport { AdminService } from '../services/admin.service';\r\nimport { Title } from '@angular/platform-browser';\r\n\r\n@Component({\r\n    selector: 'toc-admin-security',\r\n    templateUrl: './security.component.html'\r\n})\r\nexport class SecurityComponent implements OnInit, OnDestroy {\r\n    Resources = Resources;\r\n    model$: Observable<CompositeModel>;\r\n    availableEntries$: Observable<AvailableEntries>;\r\n    charts$: Observable<SecurityChartViewModel[]>;\r\n    chartRequests$: Observable<{ [paramName: string]: any }>;\r\n    chartExternalRequests$: Observable<{ [paramName: string]: any }>;\r\n    peoplePickerSource$: Observable<boolean>;\r\n    peoplePickerSearchString: string;\r\n    securityUserPickerSource$: Observable<boolean>;\r\n    securityUserPickerString: string;\r\n    newCreator: ChartNode = null;\r\n    addedUser: ChartNode = null;\r\n    addedGroup: Entry = null;\r\n    creators: CreatorInfo[];\r\n    newSecurityGroupName = '';\r\n    selectedSecurityGroup: SecurityGroup = null;\r\n    globalExternalUsersSetting = false;\r\n    private unsubscribe: Subject<void> = new Subject();\r\n\r\n    constructor(@Inject(L10N_LOCALE) public locale: L10nLocale, private store: Store<fromRoot.State>, private chartService: ChartService, private adminService: AdminService, private title: Title) {\r\n        this.model$ = store.pipe(select(fromAdmin.selectCompositeModel));\r\n        this.model$.pipe(takeUntil(this.unsubscribe)).subscribe(model => {\r\n            if (model === null) {\r\n                this.store.dispatch(AdminActions.loadCompositeModel());\r\n                return;\r\n            }\r\n            this.creators = model.Creators ? model.Creators.map(x => ({ id: x, name: x})) : [];\r\n            this.updateCreatorInfo();\r\n            if (this.selectedSecurityGroup !== null) {\r\n                this.selectedSecurityGroup = model.SecurityGroups.find(x => x.Id === this.selectedSecurityGroup.Id);\r\n            }\r\n            this.globalExternalUsersSetting = model.GlobalExternalUsersSetting;\r\n        });\r\n        this.availableEntries$ = store.pipe(select(fromAdmin.selectAvailableEntries));\r\n        this.availableEntries$.pipe(takeUntil(this.unsubscribe)).subscribe(entries => {\r\n            if (entries === null) {\r\n                this.store.dispatch(AdminActions.loadCompanyGroups());\r\n                return;\r\n            }\r\n        });\r\n        this.charts$ = store.pipe(select(fromAdmin.selectCharts));\r\n        this.charts$.pipe(takeUntil(this.unsubscribe)).subscribe(charts => {\r\n            if (charts === null) {\r\n                this.store.dispatch(AdminActions.loadCharts());\r\n                return;\r\n            }\r\n        });\r\n        title.setTitle('Settings - Security');\r\n        this.chartRequests$ = this.store.pipe(select(fromAdmin.selectChartRequests));\r\n        this.chartExternalRequests$ = this.store.pipe(select(fromAdmin.selectChartExternalRequests));\r\n    }\r\n\r\n    ngOnInit() {\r\n        this.store.pipe(select(fromAdmin.selectSelectedSecurityGroupId), withLatestFrom(this.model$), takeUntil(this.unsubscribe)).subscribe(([id, model]) => {\r\n            if (id !== 0 && model && model.SecurityGroups && model.SecurityGroups.length > 0) {\r\n                const group = model.SecurityGroups.find(x => x.Id === id);\r\n                if (group) {\r\n                    this.selectedSecurityGroup = group;\r\n                    this.newSecurityGroupName = '';\r\n                }\r\n            }\r\n        });\r\n        this.peoplePickerSource$ = new Observable<string>(observer => {\r\n            observer.next(this.peoplePickerSearchString);\r\n        }).pipe(\r\n            mergeMap(x => {\r\n                return this.chartService.searchOrganization(x).pipe(\r\n                    //tap(y => console.log(y)),\r\n                    map(data => data.map(item => {\r\n                        if (item.JobTitle) {\r\n                            item.TypeaheadTitle = `${item.DisplayName} - ${item.JobTitle}`;\r\n                        } else {\r\n                            item.TypeaheadTitle = item.DisplayName;\r\n                        }\r\n                        return item;\r\n                    }))\r\n                );\r\n            })\r\n        );\r\n        this.securityUserPickerSource$ = new Observable<string>(observer => {\r\n            observer.next(this.securityUserPickerString);\r\n        }).pipe(\r\n            mergeMap(x => {\r\n                return this.chartService.searchOrganization(x).pipe(\r\n                    //tap(y => console.log(y)),\r\n                    map(data => data.map(item => {\r\n                        if (item.JobTitle) {\r\n                            item.TypeaheadTitle = `${item.DisplayName} - ${item.JobTitle}`;\r\n                        } else {\r\n                            item.TypeaheadTitle = item.DisplayName;\r\n                        }\r\n                        return item;\r\n                    }))\r\n                );\r\n            })\r\n        );\r\n    }\r\n\r\n    onSelectPerson($event: TypeaheadMatch) {\r\n        console.log($event);\r\n        this.newCreator = $event.item;\r\n    }\r\n\r\n    onSelectSecurityPerson($event: TypeaheadMatch) {\r\n        console.log($event);\r\n        this.addedUser = $event.item;\r\n    }\r\n\r\n    addCreator() {\r\n        if (this.newCreator === null) {\r\n            return;\r\n        }\r\n        this.model$.pipe(\r\n            take(1),\r\n            map(model => {\r\n                if (model.Creators.findIndex(x => x === this.newCreator.UniqueId) !== -1) {\r\n                    return;\r\n                }\r\n                this.store.dispatch(AdminActions.saveCreators({ creators: [...model.Creators, this.newCreator.UniqueId] }));\r\n                this.newCreator = null;\r\n                this.peoplePickerSearchString = '';\r\n            })\r\n        ).subscribe();\r\n    }\r\n\r\n    removeCreator(id: string) {\r\n        this.model$.pipe(\r\n            take(1),\r\n            map(model => {\r\n                this.store.dispatch(AdminActions.saveCreators({ creators: model.Creators.filter(x => x !== id)}));\r\n                this.newCreator = null;\r\n                this.peoplePickerSearchString = '';\r\n            })\r\n        ).subscribe();\r\n    }\r\n\r\n    updateCreatorInfo() {\r\n        this.creators.forEach(creator => {\r\n            this.adminService.getPersonName(creator.id).subscribe(name => {\r\n                creator.name = name;\r\n            });\r\n        });\r\n    }\r\n\r\n    addSecurityGroup() {\r\n        if (this.newSecurityGroupName === '' || this.newSecurityGroupName === null) {\r\n            return;\r\n        }\r\n        this.store.dispatch(AdminActions.createSecurityGroup({ name: this.newSecurityGroupName }));\r\n    }\r\n\r\n    removeSecurityGroup(groupId : number) {\r\n        this.store.dispatch(AdminActions.removeSecurityGroup({ id: groupId }));\r\n    }\r\n\r\n    addToSecurityGroup(type: 'user' | 'group') {\r\n        console.log('adding', type);\r\n        if (!this.selectedSecurityGroup) {\r\n            return;\r\n        }\r\n        const securityGroupEntry: SecurityGroupEntry = {\r\n            Id: 0,\r\n            SecurityGroupId: this.selectedSecurityGroup.Id\r\n        };\r\n        if (type === 'group') {\r\n            securityGroupEntry.GroupName = this.addedGroup.value;\r\n        }\r\n        if (type === 'user') {\r\n            securityGroupEntry.UserId = this.addedUser.UniqueId;\r\n            securityGroupEntry.UserName = this.addedUser.DisplayName;\r\n            this.securityUserPickerString = '';\r\n        }\r\n        this.store.dispatch(AdminActions.addSecurityGroupEntry({ entry: securityGroupEntry }));\r\n        this.addedUser = null;\r\n        this.addedGroup = null;\r\n    }\r\n\r\n    removeSecurityGroupEntry(id: number) {\r\n        this.store.dispatch(AdminActions.removeSecurityGroupEntry({ id }));\r\n    }\r\n\r\n    hasItems(type: 'user' | 'group'): boolean {\r\n        if (this.selectedSecurityGroup === null || this.selectedSecurityGroup.SecurityGroupEntries == null) {\r\n            return false;\r\n        }\r\n        if (type === 'user') {\r\n            return this.selectedSecurityGroup.SecurityGroupEntries.findIndex(x => !!x.UserId || !!x.UserName) !== -1;\r\n        }\r\n        if (type === 'group') {\r\n            return this.selectedSecurityGroup.SecurityGroupEntries.findIndex(x => !!x.GroupName) !== -1;\r\n        }\r\n    }\r\n\r\n    saveGlobalExternalSetting(value: boolean) {\r\n        this.store.dispatch(AdminActions.saveGlobalExternalSetting({ value }));\r\n    }\r\n\r\n    saveExternalUsersSetting(chart: SecurityChartViewModel, $event: boolean) {\r\n        this.store.dispatch(AdminActions.saveExternalUsersSetting( { chart: {...chart, areExternalUsersAllowed: $event }}));\r\n    }\r\n\r\n    userEntry = (entry: SecurityGroupEntry) => {\r\n        return !!entry.UserId || !!entry.UserName;\r\n    }\r\n\r\n    groupEntry = (entry: SecurityGroupEntry) => {\r\n        return !!entry.GroupName;\r\n    }\r\n\r\n    saveChart(chart: SecurityChartViewModel, prop: string, $event: number) {\r\n        console.log($event);\r\n        const newChart = {...chart};\r\n        newChart[prop] = $event;\r\n        this.store.dispatch(AdminActions.saveChart({ chart: newChart }));\r\n    }\r\n\r\n    ngOnDestroy(): void {\r\n        this.unsubscribe.next();\r\n        this.unsubscribe.complete();\r\n    }\r\n}\r\n","import { Injectable } from '@angular/core';\r\nimport { HttpClient } from '@angular/common/http';\r\nimport { Observable } from 'rxjs';\r\nimport { CompositeModel, SecurityGroup, SecurityChartViewModel, SecurityGroupEntry, AvailableEntries, InformationSourceViewModel, SharePointListInfo, ApiKey } from '../admin.models';\r\nimport { AppearanceFormValue } from '../admin.reducers';\r\n\r\n@Injectable()\r\nexport class AdminService {\r\n    private API_PATH = '/api/admin';\r\n    constructor(private http: HttpClient) {}\r\n\r\n    loadAdminCompositeData(): Observable<CompositeModel> {\r\n        return this.http.get<CompositeModel>(`${this.API_PATH}/composite`);\r\n    }\r\n\r\n    loadCompanyGroups(): Observable<AvailableEntries> {\r\n        return this.http.get<AvailableEntries>(`/api/security/availableentries`);\r\n    }\r\n\r\n    loadSecurityCharts(): Observable<SecurityChartViewModel[]> {\r\n        return this.http.get<SecurityChartViewModel[]>(`/api/security/charts`);\r\n    }\r\n\r\n    loadCacheSetting(): Observable<boolean> {\r\n        return this.http.get<boolean>(`${this.API_PATH}/disablecache`);\r\n    }\r\n\r\n    saveAppearance(form: AppearanceFormValue): Observable<object> {\r\n        return this.http.post(`${this.API_PATH}/settings`, {\r\n            CustomColour: form.brandColor,\r\n            CustomFooterText: form.footerText,\r\n            CustomThemeName: form.theme\r\n        });\r\n    }\r\n\r\n    removeLogo() {\r\n        return this.http.post(`${this.API_PATH}/logo/remove`, {});\r\n    }\r\n\r\n    removeCss() {\r\n        return this.http.delete(`${this.API_PATH}/customcss`);\r\n    }\r\n\r\n    postCreators(creators: string[]): Observable<string[]> {\r\n        return this.http.post<string[]>(`${this.API_PATH}/creators`, creators);\r\n    }\r\n\r\n    getPersonName(id: string): Observable<string> {\r\n        return this.http.get<string>(`/api/picker/personname/?id=${encodeURIComponent(id)}`);\r\n    }\r\n\r\n    addSecurityGroup(name: string): Observable<SecurityGroup> {\r\n        return this.http.post<SecurityGroup>(`/api/security/securitygroups`, { primitive: name });\r\n    }\r\n\r\n    removeSecurityGroup(id: number): Observable<SecurityGroup[]> {\r\n        return this.http.delete<SecurityGroup[]>(`/api/security/securitygroups/${id}`);\r\n    }\r\n\r\n    getSecurityCharts(): Observable<SecurityChartViewModel[]> {\r\n        return this.http.get<SecurityChartViewModel[]>(`/api/security/charts`);\r\n    }\r\n\r\n    addSecurityGroupEntry(entry: SecurityGroupEntry): Observable<SecurityGroup> {\r\n        return this.http.post<SecurityGroup>(`/api/security/securitygroupentry`, entry);\r\n    }\r\n\r\n    removeSecurityGroupEntry(id: number): Observable<SecurityGroup> {\r\n        return this.http.delete<SecurityGroup>(`/api/security/securitygroupentry/${id}`);\r\n    }\r\n\r\n    saveSecurityChart(chart: SecurityChartViewModel): Observable<SecurityChartViewModel> {\r\n        return this.http.post<SecurityChartViewModel>(`/api/security/chartsecuritygroups/${chart.id}`, chart);\r\n    }\r\n\r\n    saveExternalUsersSetting(chart: SecurityChartViewModel): Observable<SecurityChartViewModel> {\r\n        return this.http.post<SecurityChartViewModel>(`/api/security/externalusers/${chart.id}`, {\r\n            ...chart,\r\n            viewGroupId: 0,\r\n            adminGroupId: 0,\r\n            denyGroupId: 0\r\n        });\r\n    }\r\n\r\n    saveGlobalExternalUsersSetting(value: boolean): Observable<boolean> {\r\n        return this.http.post<boolean>(`/api/security/externalusers/global`, { areExternalUsersAllowed: value });\r\n    }\r\n\r\n    saveAdminEmail(AdminEmail: string, CompanyName: string) {\r\n        return this.http.post(`${this.API_PATH}/adminemail`, { AdminEmail, CompanyName });\r\n    }\r\n\r\n    saveCacheSetting(value: boolean): Observable<boolean> {\r\n        return this.http.post<boolean>(`${this.API_PATH}/disablecache`, { DisableCache: value });\r\n    }\r\n\r\n    getInfoSource(sourceId: string): Observable<InformationSourceViewModel> {\r\n        return this.http.get<InformationSourceViewModel>(`${this.API_PATH}/informationsource?sourceId=${sourceId}`);\r\n    }\r\n\r\n    getSharePointLists(): Observable<SharePointListInfo[]> {\r\n        return this.http.get<SharePointListInfo[]>('/api/sharepoint/alllists');\r\n    }\r\n\r\n    getSharePointListFields(id: string): Observable<Array<{[paramName: string]: string}>> {\r\n        return this.http.get<Array<{[paramName: string]: string}>>(`/api/sharepoint/fields/${id}/Host`);\r\n    }\r\n\r\n    saveInformationSource(source: InformationSourceViewModel): Observable<boolean> {\r\n        return this.http.post<boolean>(`/api/admin/saveinformationsource`, source);\r\n    }\r\n\r\n    deleteInformationSource(sourceId: string): Observable<boolean> {\r\n        return this.http.get<boolean>(`${this.API_PATH}/removeinformationsource?sourceId=${sourceId}`);\r\n    }\r\n\r\n    testInformationSource(sourceId: string): Observable<string> {\r\n        return this.http.get<string>(`/api/info/test?sourceId=${sourceId}`);\r\n    }\r\n\r\n    loadApiKeys(): Observable<ApiKey[]> {\r\n        return this.http.get<ApiKey[]>(`${this.API_PATH}/apikeys`);\r\n    }\r\n\r\n    createApiKey(): Observable<ApiKey> {\r\n        return this.http.post<ApiKey>(`${this.API_PATH}/apikeys`, {});\r\n    }\r\n\r\n    revokeApiKey(id: number) {\r\n        return this.http.delete(`${this.API_PATH}/apikeys/${id}`);\r\n    }\r\n}\r\n"],"sourceRoot":"webpack:///"}