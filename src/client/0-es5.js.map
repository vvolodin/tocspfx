{"version":3,"sources":["webpack:///src/app/admin/admin-routing.module.ts","webpack:///src/app/admin/admin.actions.ts","webpack:///src/app/admin/admin.effects.ts","webpack:///src/app/admin/admin.module.ts","webpack:///src/app/admin/admin.reducers.ts","webpack:///src/app/admin/components/account.component.ts","webpack:///src/app/admin/components/account.component.html","webpack:///src/app/admin/components/api-guide.component.ts","webpack:///src/app/admin/components/api-guide.component.html","webpack:///src/app/admin/components/api.component.html","webpack:///src/app/admin/components/api.component.ts","webpack:///src/app/admin/components/appearance.component.html","webpack:///src/app/admin/components/appearance.component.ts","webpack:///src/app/admin/components/information-sources.component.html","webpack:///src/app/admin/components/information-sources.component.ts","webpack:///src/app/admin/components/security.component.html","webpack:///src/app/admin/components/security.component.ts","webpack:///src/app/admin/services/admin.service.ts"],"names":["routes","path","children","component","AppearanceComponent","SecurityComponent","InformationSourcesComponent","AccountComponent","ApiComponent","ApiGuideComponent","AdminRoutingModule","RouterModule","forChild","NgModule","imports","exports","loadCompositeModel","createAction","loadCompositeModelSuccess","props","loadCompositeModelFailure","loadCompanyGroups","loadCompanyGroupsSuccess","loadCompanyGroupsFailure","loadCharts","loadChartsSuccess","loadChartsFailure","loadCacheSetting","loadCacheSettingSuccess","loadCacheSettingFailure","setAppearanceFormFromCompositeModel","saveAppearance","saveAppearanceFailure","saveAppearanceSuccess","saveCreators","saveCreatorsSuccess","saveCreatorsFailure","createSecurityGroup","createSecurityGroupSuccess","createSecurityGroupFailure","removeSecurityGroup","removeSecurityGroupSuccess","removeSecurityGroupFailure","addSecurityGroupEntry","addSecurityGroupEntrySuccess","addSecurityGroupEntryFailure","removeSecurityGroupEntry","removeSecurityGroupEntrySuccess","removeSecurityGroupEntryFailure","saveGlobalExternalSetting","saveGlobalExternalSettingSuccess","saveGlobalExternalSettingFailure","saveExternalUsersSetting","saveExternalUsersSettingSuccess","saveExternalUsersSettingFailure","saveChart","saveChartSuccess","saveChartFailure","saveAdminEmail","saveAdminEmailSuccess","saveAdminEmailFailure","saveCacheSetting","saveCacheSettingSuccess","saveCacheSettingFailure","loadInformationSource","loadInformationSourceSuccess","loadInformationSourceFailure","getSharePointLists","getSharePointListsSuccess","getSharePointListsFailure","getSharePointListFields","getSharePointListFieldsSuccess","getSharePointListFieldsFailure","saveInformationSource","saveInformationSourceSuccess","saveInformationSourceFailure","deleteInformationSource","deleteInformationSourceSuccess","deleteInformationSourceFailure","testInformationSource","testInformationSourceSuccess","testInformationSourceFailure","clearSavedSourceId","loadApiKeys","loadApiKeysSuccess","loadApiKeysFailure","createApiKey","createApiKeySuccess","createApiKeyFailure","revokeApiKey","revokeApiKeySuccess","revokeApiKeyFailure","AdminEffects","actions$","adminService","loadCompositeModel$","createEffect","pipe","ofType","AdminActions","switchMap","loadAdminCompositeData","map","data","model","catchError","of","mergeMap","x","ToastError","loadCompanyGroups$","entries","loadCharts$","loadSecurityCharts","charts","loadCacheSetting$","value","saveAppearance$","action","form","saveCreators$","postCreators","creators","createSecurityGroup$","addSecurityGroup","name","group","removeSecurityGroup$","id","groups","addSecurityGroupEntry$","entry","removeSecurityGroupEntry$","saveGlobalExternalUsersSetting$","saveGlobalExternalUsersSetting","saveExternalUsersSetting$","chart","saveSecurityChart$","saveSecurityChart","saveAdminEmail$","AdminEmail","CompanyName","saveCacheSetting$","ToastSuccess","loadInformationSource$","getInfoSource","sourceId","source","error","getSharePointLists$","lists","getSharePointListFields$","fields","saveInformationSource$","InformationSourceId","result","deleteInformationSource$","testInformationSource$","actions","startsWith","push","loadApiKeys$","apiKeys","createApiKey$","apiKey","revokeApiKey$","Injectable","AdminModule","AdminService","CommonModule","StoreModule","forFeature","fromAdmin","reducer","EffectsModule","TooltipModule","forRoot","FileUploadModule","FormsModule","NgrxFormsModule","SharedModule","TypeaheadModule","ColorPickerModule","ClipboardModule","declarations","providers","APPEARANCE_FORM_ID","initialAppearanceFormState","createFormGroupState","brandColor","theme","footerText","initialState","compositeModel","isFetching","appearanceForm","selectedSecurityGroupId","availableEntries","chartRequests","chartExternalRequests","disableCacheSetting","selectedSourceInfo","deletedSourceId","savedSourceId","sharePointLists","sharePointListFields","adminReducer","createReducer","onNgrxForms","on","state","Settings","CustomColour","CustomThemeName","CustomFooterText","window","location","reload","Creators","Id","SecurityGroups","GlobalExternalUsersSetting","areExternalUsersAllowed","requests","AdminEmailAndCompanyName","filter","selectAdmin","admin","selectCompositeModel","createSelector","selectAppearanceFormState","selectSelectedSecurityGroupId","selectAvailableEntries","s","selectCharts","selectChartRequests","selectChartExternalRequests","selectDisableCacheSetting","selectSelectedSourceInfo","selectApiKeys","selectDeletedSourceId","selecteSavedSourceId","selectSharePointLists","selectSharePointListFields","locale","store","Resources","adminEmail","companyName","unsubscribe","Subject","disableCacheSetting$","select","takeUntil","subscribe","dispatch","model$","$event","confirmationOptions","cancelButtonText","Strings","BUTTON","Cancel","text","TXT","DeleteAccountConfirmationText","title","DeleteAccountConfirmationDialogTitle","successButtonText","BTN","DeleteAccountConfirmation","callback","document","getElementById","submit","DialogShow","dialogName","SharedModals","ConfirmationDialog","options","next","complete","L10N_LOCALE","deleteAccount","Component","selector","templateUrl","Inject","apiKeys$","AdminStrings","DLG","ConfirmRevokeTxt","ConfirmRevokeTitle","Revoke","successAction","brandColor$","colorErrorMessage","href","csshref","showRemoveLogo","logoUploader","FileUploader","isHTML5","allowedMimeType","url","cssUploader","HasCustomLogo","CustomCssPath","LogoPath","Math","random","appearanceFormState$","debounceTime","color","SetValueAction","controls","onCompleteItem","item","response","status","headers","console","log","resp","JSON","parse","take","isOk","test","uploadAll","removeLogo","removeCss","updateBrandColor","saveLogo","uploadLogo","uploadCss","styleUrls","sources","selectedSource","selectedListId","selectedSharePointFieldId","InformationSources","info","idx","findIndex","find","sharePointLists$","sharePointListFields$","CanEdit","ConnectionString","Description","FriendlyTypeName","Query","SharePointList","SharePointListColumn","SourceName","SourceType","newSource","chartService","newCreator","addedUser","addedGroup","newSecurityGroupName","selectedSecurityGroup","globalExternalUsersSetting","userEntry","UserId","UserName","groupEntry","GroupName","updateCreatorInfo","availableEntries$","charts$","setTitle","chartRequests$","chartExternalRequests$","withLatestFrom","length","peoplePickerSource$","Observable","observer","peoplePickerSearchString","searchOrganization","JobTitle","TypeaheadTitle","DisplayName","securityUserPickerSource$","securityUserPickerString","UniqueId","forEach","creator","getPersonName","groupId","type","securityGroupEntry","SecurityGroupId","SecurityGroupEntries","prop","newChart","onSelectPerson","addCreator","http","API_PATH","get","post","delete","encodeURIComponent","primitive","viewGroupId","adminGroupId","denyGroupId","DisableCache"],"mappings":"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","file":"0-es5.js","sourcesContent":["import { NgModule } from '@angular/core';\r\nimport { Routes, RouterModule } from '@angular/router';\r\nimport { AppearanceComponent } from './components/appearance.component';\r\nimport { SecurityComponent } from './components/security.component';\r\nimport { InformationSourcesComponent } from './components/information-sources.component';\r\nimport { AccountComponent } from './components/account.component';\r\nimport { ApiComponent } from './components/api.component';\r\nimport { ApiGuideComponent } from './components/api-guide.component';\r\n\r\nconst routes: Routes = [\r\n    {\r\n        path: '',\r\n        children: [\r\n            {\r\n                path: '',\r\n                children: [\r\n                    { path: '', component: AppearanceComponent },\r\n                    { path: 'security', component: SecurityComponent },\r\n                    { path: 'informationsources', component: InformationSourcesComponent },\r\n                    { path: 'account', component: AccountComponent },\r\n                    { path: 'api', component: ApiComponent },\r\n                    { path: 'api-guide', component: ApiGuideComponent }\r\n                ]\r\n            }\r\n        ]\r\n    }\r\n];\r\n\r\n@NgModule({\r\n    imports: [RouterModule.forChild(routes)],\r\n    exports: [RouterModule]\r\n})\r\nexport class AdminRoutingModule {}\r\n","import { createAction, props } from '@ngrx/store';\r\nimport {\r\n    CompositeModel,\r\n    SecurityGroup,\r\n    AvailableEntries,\r\n    SecurityGroupEntry,\r\n    SecurityChartViewModel,\r\n    InformationSourceViewModel,\r\n    SharePointListInfo,\r\n    ApiKey\r\n} from './admin.models';\r\nimport { AppearanceFormValue } from './admin.reducers';\r\nimport { string } from 'parsimmon';\r\n\r\nexport const loadCompositeModel = createAction('[Admin] Load composite model');\r\n\r\nexport const loadCompositeModelSuccess = createAction(\r\n    '[Admin] Load composite model success',\r\n    props<{ model: CompositeModel }>()\r\n);\r\n\r\nexport const loadCompositeModelFailure = createAction('[Admin] Load composite model failure');\r\n\r\nexport const loadCompanyGroups = createAction('[Admin] Load company groups');\r\n\r\nexport const loadCompanyGroupsSuccess = createAction(\r\n    '[Admin] Load company groups success',\r\n    props<{ entries: AvailableEntries }>()\r\n);\r\n\r\nexport const loadCompanyGroupsFailure = createAction('[Admin] Load company groups failure');\r\n\r\nexport const loadCharts = createAction('[Admin] Load charts');\r\n\r\nexport const loadChartsSuccess = createAction(\r\n    '[Admin] Load charts success',\r\n    props<{ charts: SecurityChartViewModel[] }>()\r\n);\r\n\r\nexport const loadChartsFailure = createAction('[Admin] Load charts failure');\r\n\r\nexport const loadCacheSetting = createAction('[Admin] Load cache setting');\r\n\r\nexport const loadCacheSettingSuccess = createAction('[Admin] Load cache setting success', props<{ value: boolean }>());\r\n\r\nexport const loadCacheSettingFailure = createAction('[Admin] Load cache setting failure');\r\n\r\nexport const setAppearanceFormFromCompositeModel = createAction(\r\n    '[Admin] Set appearance form from model',\r\n    props<{ model: CompositeModel }>()\r\n);\r\n\r\nexport const saveAppearance = createAction('[Admin] Save appearance', props<{ form: AppearanceFormValue }>());\r\n\r\nexport const saveAppearanceFailure = createAction('[Admin] Save appearance failure');\r\n\r\nexport const saveAppearanceSuccess = createAction('[Admin] Save appearance success');\r\n\r\nexport const saveCreators = createAction('[Admin] Save chart creators', props<{ creators: string[] }>());\r\n\r\nexport const saveCreatorsSuccess = createAction('[Admin] Save chart creators success', props<{ creators: string[] }>());\r\n\r\nexport const saveCreatorsFailure = createAction('[Admin] Save chart creators failure');\r\n\r\nexport const createSecurityGroup = createAction('[Admin] Create security group', props<{ name: string }>());\r\n\r\nexport const createSecurityGroupSuccess = createAction(\r\n    '[Admin] Create security group success',\r\n    props<{ group: SecurityGroup }>()\r\n);\r\n\r\nexport const createSecurityGroupFailure = createAction('[Admin] Create security group failure');\r\n\r\nexport const removeSecurityGroup = createAction('[Admin] Remove security group', props<{ id: number }>());\r\n\r\nexport const removeSecurityGroupSuccess = createAction(\r\n    '[Admin] Remove security group success',\r\n    props<{ groups: SecurityGroup[] }>()\r\n);\r\n\r\nexport const removeSecurityGroupFailure = createAction('[Admin] Remove security group failure');\r\n\r\nexport const addSecurityGroupEntry = createAction(\r\n    '[Admin] Add security group entry',\r\n    props<{ entry: SecurityGroupEntry }>()\r\n);\r\n\r\nexport const addSecurityGroupEntrySuccess = createAction(\r\n    '[Admin] Add security group entry success',\r\n    props<{ group: SecurityGroup }>()\r\n);\r\n\r\nexport const addSecurityGroupEntryFailure = createAction('[Admin] Add security group entry failure');\r\n\r\nexport const removeSecurityGroupEntry = createAction('[Admin] Remove security group entry', props<{ id: number }>());\r\n\r\nexport const removeSecurityGroupEntrySuccess = createAction(\r\n    '[Admin] Remove security group entry success',\r\n    props<{ group: SecurityGroup }>()\r\n);\r\n\r\nexport const removeSecurityGroupEntryFailure = createAction('[Admin] Remove security group entry failure');\r\n\r\nexport const saveGlobalExternalSetting = createAction(\r\n    '[Admin] Save global external users setting',\r\n    props<{ value: boolean }>()\r\n);\r\n\r\nexport const saveGlobalExternalSettingSuccess = createAction(\r\n    '[Admin] Save global external users setting success',\r\n    props<{ value: boolean }>()\r\n);\r\n\r\nexport const saveGlobalExternalSettingFailure = createAction('[Admin] Save global external users setting failure');\r\n\r\nexport const saveExternalUsersSetting = createAction(\r\n    '[Admin] Save external users setting',\r\n    props<{ chart: SecurityChartViewModel }>()\r\n);\r\n\r\nexport const saveExternalUsersSettingSuccess = createAction(\r\n    '[Admin] Save external users setting success',\r\n    props<{ chart: SecurityChartViewModel }>()\r\n);\r\n\r\nexport const saveExternalUsersSettingFailure = createAction(\r\n    '[Admin] Save external users setting failure',\r\n    props<{ chart: SecurityChartViewModel }>()\r\n);\r\n\r\nexport const saveChart = createAction('[Admin] Save security chart', props<{ chart: SecurityChartViewModel }>());\r\n\r\nexport const saveChartSuccess = createAction(\r\n    '[Admin] Save security chart success',\r\n    props<{ chart: SecurityChartViewModel }>()\r\n);\r\n\r\nexport const saveChartFailure = createAction(\r\n    '[Admin] Save security chart failure',\r\n    props<{ chart: SecurityChartViewModel }>()\r\n);\r\n\r\nexport const saveAdminEmail = createAction(\r\n    '[Admin] Save admin email',\r\n    props<{ AdminEmail: string; CompanyName: string }>()\r\n);\r\n\r\nexport const saveAdminEmailSuccess = createAction(\r\n    '[Admin] Save admin email success',\r\n    props<{ AdminEmail: string; CompanyName: string }>()\r\n);\r\n\r\nexport const saveAdminEmailFailure = createAction('[Admin] Save admin email failure');\r\n\r\nexport const saveCacheSetting = createAction('[Admin] Save cache setting', props<{ value: boolean }>());\r\n\r\nexport const saveCacheSettingSuccess = createAction('[Admin] Save cache setting success', props<{ value: boolean }>());\r\n\r\nexport const saveCacheSettingFailure = createAction('[Admin] Save cache setting failure');\r\n\r\nexport const loadInformationSource = createAction('[Admin] Load information source', props<{ sourceId: string }>());\r\n\r\nexport const loadInformationSourceSuccess = createAction(\r\n    '[Admin] Load information source success',\r\n    props<{ source: InformationSourceViewModel }>()\r\n);\r\n\r\nexport const loadInformationSourceFailure = createAction('[Admin] Load information source failure');\r\n\r\nexport const getSharePointLists = createAction('[Admin] Get SP lists');\r\n\r\nexport const getSharePointListsSuccess = createAction('[Admin] Get SP lists success', props<{ lists: SharePointListInfo[]}>());\r\n\r\nexport const getSharePointListsFailure = createAction('[Admin] Get SP lists failure');\r\n\r\nexport const getSharePointListFields = createAction('[Admin] Get SP list fields', props<{ id: string }>());\r\nexport const getSharePointListFieldsSuccess = createAction(\r\n    '[Admin] Get SP list fields success',\r\n    props<{ fields: Array<{ [paramName: string]: string }> }>()\r\n);\r\nexport const getSharePointListFieldsFailure = createAction('[Admin] Get SP list fields failure');\r\n\r\nexport const saveInformationSource = createAction(\r\n    '[Admin] Save information source',\r\n    props<{ source: InformationSourceViewModel }>()\r\n);\r\nexport const saveInformationSourceSuccess = createAction(\r\n    '[Admin] Save information source success',\r\n    props<{ id: string, result: boolean }>()\r\n);\r\nexport const saveInformationSourceFailure = createAction('[Admin] Save information source failure');\r\n\r\nexport const deleteInformationSource = createAction('[Admin] Delete information source', props<{ id: string }>());\r\nexport const deleteInformationSourceSuccess = createAction(\r\n    '[Admin] Delete information source success',\r\n    props<{ id: string, result: boolean }>()\r\n);\r\nexport const deleteInformationSourceFailure = createAction('[Admin] Delete information source failure');\r\n\r\nexport const testInformationSource = createAction('[Admin] Test information source', props<{ id: string }>());\r\nexport const testInformationSourceSuccess = createAction('[Admin] Test information source success', props<{ result: string }>());\r\nexport const testInformationSourceFailure = createAction('[Admin] Test information source failure');\r\n\r\nexport const clearSavedSourceId = createAction('[Admin] Clear saved source id');\r\n\r\nexport const loadApiKeys = createAction('[Admin] Load API keys');\r\nexport const loadApiKeysSuccess = createAction(\r\n    '[Admin] Load API keys success',\r\n    props<{ apiKeys: ApiKey[] }>()\r\n);\r\nexport const loadApiKeysFailure = createAction('[Admin] Load API keys failure');\r\n\r\nexport const createApiKey = createAction('[Admin] Create API key');\r\nexport const createApiKeySuccess = createAction(\r\n    '[Admin] Create API key success',\r\n    props<{ apiKey: ApiKey }>()\r\n);\r\nexport const createApiKeyFailure = createAction('[Admin] Create API key failure');\r\n\r\nexport const revokeApiKey = createAction('[Admin] Revoke API key',\r\n    props<{ id: number }>()\r\n);\r\nexport const revokeApiKeySuccess = createAction(\r\n    '[Admin] Revoke API key success',\r\n    props<{ id: number }>()\r\n);\r\nexport const revokeApiKeyFailure = createAction('[Admin] Revoke API key failure');\r\n","import { Actions, ofType, createEffect } from '@ngrx/effects';\r\nimport { Injectable } from '@angular/core';\r\nimport * as fromAdmin from './admin.reducers';\r\nimport * as AdminActions from './admin.actions';\r\nimport { of } from 'rxjs';\r\nimport { switchMap, catchError, map, mergeMap } from 'rxjs/operators';\r\nimport { ToastError, ToastSuccess } from '../shared/shared.actions';\r\nimport { AdminService } from './services/admin.service';\r\nimport { ActionCreator, Creator, resultMemoize, Action } from '@ngrx/store';\r\n\r\n@Injectable()\r\nexport class AdminEffects {\r\n    constructor(\r\n        private actions$: Actions,\r\n        private adminService: AdminService\r\n    ) { }\r\n\r\n    loadCompositeModel$ = createEffect(() => this.actions$.pipe(\r\n        ofType(AdminActions.loadCompositeModel),\r\n        switchMap(() => this.adminService.loadAdminCompositeData().pipe(map(data => AdminActions.loadCompositeModelSuccess({ model: data })))),\r\n        catchError(() => of(AdminActions.loadCompositeModelFailure()).pipe(mergeMap(x => [x, new ToastError('Failed to load page data')])))\r\n    ));\r\n\r\n    loadCompanyGroups$ = createEffect(() => this.actions$.pipe(\r\n        ofType(AdminActions.loadCompanyGroups),\r\n        switchMap(() => this.adminService.loadCompanyGroups().pipe(map(data => AdminActions.loadCompanyGroupsSuccess({ entries: data })))),\r\n        catchError(() => of(AdminActions.loadCompanyGroupsFailure()).pipe(mergeMap(x => [x, new ToastError('Failed to load company groups list')])))\r\n    ));\r\n\r\n    loadCharts$ = createEffect(() => this.actions$.pipe(\r\n        ofType(AdminActions.loadCharts),\r\n        switchMap(() => this.adminService.loadSecurityCharts().pipe(map(data => AdminActions.loadChartsSuccess({ charts: data })))),\r\n        catchError(() => of(AdminActions.loadChartsFailure()).pipe(mergeMap(x => [x, new ToastError('Failed to load charts list')])))\r\n    ));\r\n\r\n    loadCacheSetting$ = createEffect(() => this.actions$.pipe(\r\n        ofType(AdminActions.loadCacheSetting),\r\n        switchMap(() => this.adminService.loadCacheSetting().pipe(\r\n            map(data => AdminActions.loadCacheSettingSuccess({ value: data })),\r\n            catchError(() => of(AdminActions.loadCacheSettingFailure()).pipe(mergeMap(x => [x, new ToastError('Failed to load cache setting')])))\r\n        ))\r\n    ));\r\n\r\n    saveAppearance$ = createEffect(() => this.actions$.pipe(\r\n        ofType(AdminActions.saveAppearance),\r\n        switchMap(action => this.adminService.saveAppearance(action.form).pipe(map(data => AdminActions.saveAppearanceSuccess())))\r\n    ));\r\n\r\n    saveCreators$ = createEffect(() => this.actions$.pipe(\r\n        ofType(AdminActions.saveCreators),\r\n        switchMap(action => this.adminService.postCreators(action.creators).pipe(map(data => AdminActions.saveCreatorsSuccess({ creators: data }))))\r\n    ));\r\n\r\n    createSecurityGroup$ = createEffect(() => this.actions$.pipe(\r\n        ofType(AdminActions.createSecurityGroup),\r\n        mergeMap(action => this.adminService.addSecurityGroup(action.name).pipe(map(data => AdminActions.createSecurityGroupSuccess({ group: data })))),\r\n        catchError(() => of(AdminActions.createSecurityGroupFailure()).pipe(mergeMap(x => [x, new ToastError('Could not save security group')])))\r\n    ));\r\n\r\n    removeSecurityGroup$ = createEffect(() => this.actions$.pipe(\r\n        ofType(AdminActions.removeSecurityGroup),\r\n        mergeMap(action => this.adminService.removeSecurityGroup(action.id).pipe(map(data => AdminActions.removeSecurityGroupSuccess({ groups: data })))),\r\n        catchError(() => of(AdminActions.removeSecurityGroupFailure()).pipe(mergeMap(x => [x, new ToastError('Failed to remove security group')])))\r\n    ));\r\n\r\n    addSecurityGroupEntry$ = createEffect(() => this.actions$.pipe(\r\n        ofType(AdminActions.addSecurityGroupEntry),\r\n        mergeMap(action => this.adminService.addSecurityGroupEntry(action.entry).pipe(map(data => AdminActions.addSecurityGroupEntrySuccess({ group: data })))),\r\n        catchError(() => of(AdminActions.addSecurityGroupEntryFailure()).pipe(mergeMap(x => [x, new ToastError('Failed to add security group entry')])))\r\n    ));\r\n\r\n    removeSecurityGroupEntry$ = createEffect(() => this.actions$.pipe(\r\n        ofType(AdminActions.removeSecurityGroupEntry),\r\n        mergeMap(action => this.adminService.removeSecurityGroupEntry(action.id).pipe(map(data => AdminActions.removeSecurityGroupEntrySuccess({ group: data })))),\r\n        catchError(() => of(AdminActions.removeSecurityGroupEntryFailure()).pipe(mergeMap(x => [x, new ToastError('Failed to remove security group entry')])))\r\n    ));\r\n\r\n    saveGlobalExternalUsersSetting$ = createEffect(() => this.actions$.pipe(\r\n        ofType(AdminActions.saveGlobalExternalSetting),\r\n        switchMap(action => this.adminService.saveGlobalExternalUsersSetting(action.value).pipe(map(data => AdminActions.saveGlobalExternalSettingSuccess({ value: data })))),\r\n        catchError(() => of(AdminActions.saveGlobalExternalSettingFailure()).pipe(mergeMap(x => [x, new ToastError('Failed to save settings')])))\r\n    ));\r\n\r\n    saveExternalUsersSetting$ = createEffect(() => this.actions$.pipe(\r\n        ofType(AdminActions.saveExternalUsersSetting),\r\n        mergeMap(action => this.adminService.saveExternalUsersSetting(action.chart).pipe(\r\n            map(data => AdminActions.saveExternalUsersSettingSuccess({ chart: data })),\r\n            catchError(() => of(AdminActions.saveExternalUsersSettingFailure({ chart: action.chart })).pipe(mergeMap(x => [x, new ToastError('Failed to save settings')])))\r\n        )\r\n    )));\r\n\r\n    saveSecurityChart$ = createEffect(() => this.actions$.pipe(\r\n        ofType(AdminActions.saveChart),\r\n        mergeMap(action => this.adminService.saveSecurityChart(action.chart).pipe(\r\n            map(data => AdminActions.saveChartSuccess({ chart: data })),\r\n            catchError(() => of(AdminActions.saveChartFailure({ chart: action.chart })).pipe(mergeMap(x => [x, new ToastError('Failed to save settings')])))\r\n        )\r\n    )));\r\n\r\n    saveAdminEmail$ = createEffect(() => this.actions$.pipe(\r\n        ofType(AdminActions.saveAdminEmail),\r\n        mergeMap(action => this.adminService.saveAdminEmail(action.AdminEmail, action.CompanyName).pipe(\r\n            map(data => AdminActions.saveAdminEmailSuccess({ AdminEmail: action.AdminEmail, CompanyName: action.CompanyName })),\r\n            catchError(() => of(AdminActions.saveAdminEmailFailure()).pipe(mergeMap(x => [x, new ToastError('Failed to save settings')])))\r\n        ))\r\n    ));\r\n\r\n    saveCacheSetting$ = createEffect(() => this.actions$.pipe(\r\n        ofType(AdminActions.saveCacheSetting),\r\n        mergeMap(action => this.adminService.saveCacheSetting(action.value).pipe(\r\n            mergeMap(data => [AdminActions.saveCacheSettingSuccess({ value: data }), new ToastSuccess('')]),\r\n            catchError(() => of(AdminActions.saveCacheSettingFailure()).pipe(mergeMap(x => [x, new ToastError('Failed to save settings')])))\r\n        ))\r\n    ));\r\n\r\n    loadInformationSource$ = createEffect(() => this.actions$.pipe(\r\n        ofType(AdminActions.loadInformationSource),\r\n        mergeMap(action =>\r\n            this.adminService.getInfoSource(action.sourceId).pipe(\r\n                map(data => AdminActions.loadInformationSourceSuccess({ source: data })),\r\n                catchError(error => of(AdminActions.loadInformationSourceFailure()).pipe(mergeMap(x => [x, new ToastError('Failed to load information source')]))))\r\n            )\r\n        )\r\n    );\r\n\r\n    getSharePointLists$ = createEffect(() => this.actions$.pipe(\r\n        ofType(AdminActions.getSharePointLists),\r\n        switchMap(() =>\r\n            this.adminService.getSharePointLists().pipe(\r\n                map(data => AdminActions.getSharePointListsSuccess({ lists: data })),\r\n                catchError(error => of(AdminActions.getSharePointListsFailure()).pipe(mergeMap(x => [x, new ToastError('Failed to load SharePoint lists')]))))\r\n            )\r\n        )\r\n    );\r\n\r\n    getSharePointListFields$ = createEffect(() => this.actions$.pipe(\r\n        ofType(AdminActions.getSharePointListFields),\r\n        mergeMap((action) =>\r\n            this.adminService.getSharePointListFields(action.id).pipe(\r\n                map(data => AdminActions.getSharePointListFieldsSuccess({ fields: data })),\r\n                catchError(error => of(AdminActions.getSharePointListFieldsFailure()).pipe(mergeMap(x => [x, new ToastError('Failed to load SharePoint list fields')]))))\r\n            )\r\n        )\r\n    );\r\n\r\n    saveInformationSource$ = createEffect(() => this.actions$.pipe(\r\n        ofType(AdminActions.saveInformationSource),\r\n        mergeMap((action) =>\r\n            this.adminService.saveInformationSource(action.source).pipe(\r\n                mergeMap(data => [AdminActions.saveInformationSourceSuccess({ id: action.source.InformationSourceId, result: data }), AdminActions.loadCompositeModel()]),\r\n                catchError(error => of(AdminActions.saveInformationSourceFailure()).pipe(mergeMap(x => [x, new ToastError('Failed to save information source')]))))\r\n            )\r\n        )\r\n    );\r\n\r\n    deleteInformationSource$ = createEffect(() => this.actions$.pipe(\r\n        ofType(AdminActions.deleteInformationSource),\r\n        mergeMap((action) =>\r\n            this.adminService.deleteInformationSource(action.id).pipe(\r\n                map(data => AdminActions.deleteInformationSourceSuccess({ id: action.id, result: data })),\r\n                catchError(error => of(AdminActions.deleteInformationSourceFailure()).pipe(mergeMap(x => [x, new ToastError('Failed to delete information source')]))))\r\n            )\r\n        )\r\n    );\r\n\r\n    testInformationSource$ = createEffect(() => this.actions$.pipe(\r\n        ofType(AdminActions.testInformationSource),\r\n        switchMap((action) =>\r\n            this.adminService.testInformationSource(action.id).pipe(\r\n                mergeMap(data => {\r\n                    const actions: Action[] = [AdminActions.testInformationSourceSuccess({ result: data })];\r\n                    if (data.startsWith('ERROR')) {\r\n                        actions.push(new ToastError(data));\r\n                    } else {\r\n                        actions.push(new ToastSuccess(data));\r\n                    }\r\n                    return actions;\r\n                }),\r\n                catchError(error => of(AdminActions.testInformationSourceFailure()).pipe(mergeMap(x => [x, new ToastError('Failed to test information source')]))))\r\n            )\r\n        )\r\n    );\r\n\r\n    loadApiKeys$ = createEffect(() => this.actions$.pipe(\r\n        ofType(AdminActions.loadApiKeys),\r\n        switchMap((action) =>\r\n        this.adminService.loadApiKeys().pipe(\r\n            map(data => AdminActions.loadApiKeysSuccess({ apiKeys: data })),\r\n            catchError(error => of(AdminActions.loadApiKeysFailure()).pipe(mergeMap(x => [x, new ToastError('Failed to load API keys')]))))\r\n        )\r\n    ));\r\n\r\n    createApiKey$ = createEffect(() => this.actions$.pipe(\r\n        ofType(AdminActions.createApiKey),\r\n        switchMap((action) =>\r\n        this.adminService.createApiKey().pipe(\r\n            map(data => AdminActions.createApiKeySuccess({ apiKey: data })),\r\n            catchError(error => of(AdminActions.createApiKeyFailure()).pipe(mergeMap(x => [x, new ToastError('Failed to create an API key')]))))\r\n        )\r\n    ));\r\n\r\n    revokeApiKey$ = createEffect(() => this.actions$.pipe(\r\n        ofType(AdminActions.revokeApiKey),\r\n        switchMap((action) =>\r\n        this.adminService.revokeApiKey(action.id).pipe(\r\n            map(data => AdminActions.revokeApiKeySuccess({ id: action.id })),\r\n            catchError(error => of(AdminActions.revokeApiKeyFailure()).pipe(mergeMap(x => [x, new ToastError('Failed to revoke an API key')]))))\r\n        )\r\n    ));\r\n}\r\n","import { NgModule } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\nimport { RouterModule } from '@angular/router';\r\nimport { StoreModule } from '@ngrx/store';\r\nimport { EffectsModule } from '@ngrx/effects';\r\nimport { FormsModule } from '@angular/forms';\r\nimport { FileUploadModule } from 'ng2-file-upload';\r\nimport { TypeaheadModule } from 'ngx-bootstrap/typeahead';\r\nimport * as fromAdmin from './admin.reducers';\r\nimport { ColorPickerModule } from 'ngx-color-picker';\r\nimport { SharedModule } from '../shared/shared.module';\r\nimport { AppearanceComponent } from './components/appearance.component';\r\nimport { SecurityComponent } from './components/security.component';\r\nimport { AdminEffects } from './admin.effects';\r\nimport { AdminService } from './services/admin.service';\r\nimport { AdminRoutingModule } from './admin-routing.module';\r\nimport { NgrxFormsModule } from 'ngrx-forms';\r\nimport { AccountComponent } from './components/account.component';\r\nimport { InformationSourcesComponent } from './components/information-sources.component';\r\nimport { ApiComponent } from './components/api.component';\r\nimport { TooltipModule } from 'ngx-bootstrap/tooltip';\r\nimport { ClipboardModule } from 'ngx-clipboard';\r\nimport { ApiGuideComponent } from './components/api-guide.component';\r\n\r\n@NgModule({\r\n    imports: [\r\n        CommonModule,\r\n        AdminRoutingModule,\r\n        StoreModule.forFeature('admin', fromAdmin.reducer),\r\n        EffectsModule.forFeature([AdminEffects]),\r\n        TooltipModule.forRoot(),\r\n        FileUploadModule,\r\n        FormsModule,\r\n        NgrxFormsModule,\r\n        SharedModule,\r\n        TypeaheadModule,\r\n        ColorPickerModule,\r\n        ClipboardModule\r\n    ],\r\n    declarations: [\r\n        AppearanceComponent,\r\n        SecurityComponent,\r\n        AccountComponent,\r\n        InformationSourcesComponent,\r\n        ApiComponent,\r\n        ApiGuideComponent\r\n    ],\r\n    providers: [\r\n        AdminService\r\n    ]\r\n})\r\nexport class AdminModule {}\r\n","import { createSelector, createFeatureSelector, createReducer, on, Action } from '@ngrx/store';\r\nimport * as AdminActions from './admin.actions';\r\nimport * as fromRoot from '../reducers';\r\nimport { CompositeModel, AvailableEntries, SecurityChartViewModel, InformationSourceViewModel, SharePointListInfo, ApiKey } from './admin.models';\r\nimport { FormGroupState, createFormGroupState, onNgrxForms, wrapReducerWithFormStateUpdate } from 'ngrx-forms';\r\n\r\nexport interface AdminState {\r\n    compositeModel: CompositeModel;\r\n    availableEntries: AvailableEntries;\r\n    isFetching: boolean;\r\n    appearanceForm: FormGroupState<AppearanceFormValue>;\r\n    selectedSecurityGroupId: number;\r\n    charts: SecurityChartViewModel[];\r\n    chartRequests: { [paramName: string]: any };\r\n    chartExternalRequests: { [paramName: string]: any };\r\n    disableCacheSetting: boolean;\r\n    selectedSourceInfo: InformationSourceViewModel;\r\n    deletedSourceId: string;\r\n    savedSourceId: string;\r\n    sharePointLists: SharePointListInfo[];\r\n    sharePointListFields: Array<{ [paramName: string]: string }>;\r\n    apiKeys: ApiKey[];\r\n}\r\n\r\nexport interface AppearanceFormValue {\r\n    theme: string;\r\n    brandColor: string;\r\n    footerText: string;\r\n}\r\n\r\nexport interface State extends fromRoot.State {\r\n    admin: AdminState;\r\n}\r\n\r\nconst APPEARANCE_FORM_ID = 'appearance_form_id';\r\n\r\nexport const initialAppearanceFormState = createFormGroupState<AppearanceFormValue>(APPEARANCE_FORM_ID, {\r\n    brandColor: '#000000',\r\n    theme: 'Light',\r\n    footerText: ''\r\n});\r\n\r\nexport const initialState: AdminState = {\r\n    compositeModel: null,\r\n    isFetching: false,\r\n    appearanceForm: initialAppearanceFormState,\r\n    selectedSecurityGroupId: 0,\r\n    availableEntries: null,\r\n    charts: null,\r\n    chartRequests: {},\r\n    chartExternalRequests: {},\r\n    disableCacheSetting: null,\r\n    selectedSourceInfo: null,\r\n    deletedSourceId: null,\r\n    savedSourceId: null,\r\n    sharePointLists: [],\r\n    sharePointListFields: [],\r\n    apiKeys: []\r\n};\r\n\r\nconst adminReducer = createReducer(\r\n    initialState,\r\n    onNgrxForms(),\r\n    on(AdminActions.setAppearanceFormFromCompositeModel, (state, { model }) => {\r\n        return {\r\n            ...state,\r\n            appearanceForm: createFormGroupState<AppearanceFormValue>(APPEARANCE_FORM_ID, {\r\n                ...initialAppearanceFormState,\r\n                brandColor: model.Settings.CustomColour,\r\n                theme: model.Settings.CustomThemeName,\r\n                footerText: model.Settings.CustomFooterText\r\n            })\r\n        };\r\n    }),\r\n    on(AdminActions.saveAppearanceSuccess, state => {\r\n        window.location.reload();\r\n        return state;\r\n    }),\r\n    on(AdminActions.loadCompositeModel, state => ({ ...state, isFetching: true })),\r\n    on(AdminActions.loadCompositeModelFailure, state => ({ ...state, isFetching: false })),\r\n    on(AdminActions.loadCompositeModelSuccess, (state, { model }) => ({\r\n        ...state,\r\n        compositeModel: model,\r\n        isFetching: false\r\n    })),\r\n    on(AdminActions.saveCreatorsSuccess, (state, { creators }) => ({\r\n        ...state,\r\n        compositeModel: { ...state.compositeModel, Creators: creators }\r\n    })),\r\n    on(AdminActions.createSecurityGroupSuccess, (state, { group }) => ({\r\n        ...state,\r\n        selectedSecurityGroupId: group.Id,\r\n        compositeModel: { ...state.compositeModel, SecurityGroups: [...state.compositeModel.SecurityGroups, group] }\r\n    })),\r\n    on(AdminActions.removeSecurityGroupSuccess, (state, { groups }) => ({\r\n        ...state,\r\n        compositeModel: { ...state.compositeModel, SecurityGroups: groups }\r\n    })),\r\n    on(AdminActions.loadCompanyGroupsSuccess, (state, { entries }) => ({ ...state, availableEntries: entries })),\r\n    on(AdminActions.addSecurityGroupEntrySuccess, AdminActions.removeSecurityGroupEntrySuccess, (state, { group }) => {\r\n        return {\r\n            ...state,\r\n            compositeModel: {\r\n                ...state.compositeModel,\r\n                SecurityGroups: state.compositeModel.SecurityGroups.map(x => {\r\n                    if (x.Id === group.Id) {\r\n                        return group;\r\n                    }\r\n                    return x;\r\n                })\r\n            }\r\n        };\r\n    }),\r\n    on(AdminActions.saveGlobalExternalSettingSuccess, (state, { value }) => ({\r\n        ...state,\r\n        compositeModel: { ...state.compositeModel, GlobalExternalUsersSetting: value }\r\n    })),\r\n    on(AdminActions.saveExternalUsersSettingSuccess, (state, { chart }) => {\r\n        const { [chart.id]: value, ...requests } = state.chartExternalRequests;\r\n        return {\r\n            ...state,\r\n            charts: state.charts.map(x => {\r\n                if (x.id === chart.id) {\r\n                    //this particular API does not return the full chart view model, only id and areExternalUsersAllowed fields\r\n                    return { ...x, areExternalUsersAllowed: chart.areExternalUsersAllowed };\r\n                }\r\n                return x;\r\n            }),\r\n            chartExternalRequests: requests\r\n        };\r\n    }),\r\n    on(AdminActions.saveExternalUsersSetting, (state, { chart }) => {\r\n        return { ...state, chartExternalRequests: { ...state.chartExternalRequests, [chart.id]: {} } };\r\n    }),\r\n    on(AdminActions.saveChart, (state, { chart }) => {\r\n        return { ...state, chartRequests: { ...state.chartExternalRequests, [chart.id]: {} } };\r\n    }),\r\n    on(AdminActions.saveChartSuccess, AdminActions.saveChartFailure, (state, { chart }) => {\r\n        const { [chart.id]: value, ...requests } = state.chartRequests;\r\n        return {\r\n            ...state,\r\n            chartRequests: requests,\r\n            charts: state.charts.map(x => {\r\n                if (x.id === chart.id) {\r\n                    return chart;\r\n                }\r\n                return x;\r\n            })\r\n        };\r\n    }),\r\n    on(AdminActions.loadChartsSuccess, (state, { charts }) => ({\r\n        ...state,\r\n        charts: charts.map(x => {\r\n            const chart = { ...x };\r\n            return chart;\r\n        })\r\n    })),\r\n    on(AdminActions.saveAdminEmailSuccess, (state, { AdminEmail, CompanyName }) => ({\r\n        ...state,\r\n        compositeModel: {\r\n            ...state.compositeModel,\r\n            AdminEmailAndCompanyName: {\r\n                AdminEmail,\r\n                CompanyName\r\n            }\r\n        }\r\n    })),\r\n    on(AdminActions.loadCacheSettingSuccess, (state, { value }) => ({ ...state, disableCacheSetting: value })),\r\n    on(AdminActions.saveCacheSettingSuccess, (state, { value }) => ({ ...state, disableCacheSetting: value })),\r\n    on(AdminActions.loadInformationSourceSuccess, (state, { source }) => ({ ...state, selectedSourceInfo: source })),\r\n    on(AdminActions.deleteInformationSourceSuccess, (state, { id, result }) => ({\r\n        ...state,\r\n        deletedSourceId: result ? id : null\r\n    })),\r\n    on(AdminActions.saveInformationSourceSuccess, (state, { id, result }) => {\r\n        if (result) {\r\n            return { ...state, savedSourceId: id };\r\n        }\r\n        return state;\r\n    }),\r\n    on(AdminActions.clearSavedSourceId, (state) => ({ ...state, savedSourceId: null })),\r\n    on(AdminActions.getSharePointListsSuccess, (state, { lists }) => ({ ...state, sharePointLists: lists })),\r\n    on(AdminActions.getSharePointListFieldsSuccess, (state, { fields }) => ({ ...state, sharePointListFields: fields })),\r\n    on(AdminActions.loadApiKeysSuccess, (state, { apiKeys }) => ({ ...state, apiKeys })),\r\n    on(AdminActions.createApiKeySuccess, (state, { apiKey }) => ({ ...state, apiKeys: [...state.apiKeys, apiKey] })),\r\n    on(AdminActions.revokeApiKeySuccess, (state, { id }) => ({ ...state, apiKeys: state.apiKeys.filter(x => x.Id !== id) }))\r\n);\r\n\r\nexport function reducer(state: AdminState | undefined, action: Action) {\r\n    return adminReducer(state, action);\r\n}\r\n\r\nexport const selectAdmin = (state: State) => state.admin;\r\n\r\nexport const selectCompositeModel = createSelector(selectAdmin, state => state.compositeModel);\r\n\r\nexport const selectAppearanceFormState = createSelector(selectAdmin, state => state.appearanceForm);\r\n\r\nexport const selectSelectedSecurityGroupId = createSelector(selectAdmin, state => state.selectedSecurityGroupId);\r\n\r\nexport const selectAvailableEntries = createSelector(selectAdmin, s => s.availableEntries);\r\n\r\nexport const selectCharts = createSelector(selectAdmin, s => s.charts);\r\n\r\nexport const selectChartRequests = createSelector(selectAdmin, s => s.chartRequests);\r\n\r\nexport const selectChartExternalRequests = createSelector(selectAdmin, s => s.chartExternalRequests);\r\n\r\nexport const selectDisableCacheSetting = createSelector(selectAdmin, s => s.disableCacheSetting);\r\n\r\nexport const selectSelectedSourceInfo = createSelector(selectAdmin, s => s.selectedSourceInfo);\r\n\r\nexport const selectApiKeys = createSelector(selectAdmin, s => s.apiKeys);\r\n\r\nexport const selectDeletedSourceId = createSelector(\r\n    selectAdmin,\r\n    (state: AdminState) => state.deletedSourceId\r\n);\r\n\r\nexport const selecteSavedSourceId = createSelector(\r\n    selectAdmin,\r\n    s => s.savedSourceId\r\n);\r\n\r\nexport const selectSharePointLists = createSelector(\r\n    selectAdmin,\r\n    (state: AdminState) => state.sharePointLists\r\n);\r\n\r\nexport const selectSharePointListFields = createSelector(\r\n    selectAdmin,\r\n    (state: AdminState) => state.sharePointListFields\r\n);\r\n","import { Component, OnInit, OnDestroy, Inject } from '@angular/core';\r\nimport { L10N_LOCALE, L10nLocale } from 'angular-l10n';\r\nimport * as Resources from '../../strings';\r\nimport * as fromRoot from '../../reducers';\r\nimport * as fromAdmin from '../admin.reducers';\r\nimport * as AdminActions from '../admin.actions';\r\nimport { Observable, Subject } from 'rxjs';\r\nimport { Store, select } from '@ngrx/store';\r\nimport { takeUntil } from 'rxjs/operators';\r\nimport { CompositeModel } from '../admin.models';\r\nimport { ConfirmationModalOptions, SharedModals } from 'src/app/shared/shared.models';\r\nimport { DialogShow } from 'src/app/shared/shared.actions';\r\n\r\n@Component({\r\n    selector: 'toc-admin-account',\r\n    templateUrl: 'account.component.html'\r\n})\r\nexport class AccountComponent implements OnInit, OnDestroy {\r\n    Resources = Resources;\r\n    adminEmail = '';\r\n    companyName = '';\r\n    disableCacheSetting$: Observable<boolean>;\r\n    model$: Observable<CompositeModel>;\r\n    private unsubscribe: Subject<void> = new Subject();\r\n\r\n    constructor(@Inject(L10N_LOCALE) public locale: L10nLocale, private store: Store<fromRoot.State>) {\r\n        this.disableCacheSetting$ = this.store.pipe(select(fromAdmin.selectDisableCacheSetting));\r\n        this.disableCacheSetting$.pipe(takeUntil(this.unsubscribe)).subscribe(x => {\r\n            if (x === null) {\r\n                this.store.dispatch(AdminActions.loadCacheSetting());\r\n            }\r\n        });\r\n        this.model$ = store.pipe(select(fromAdmin.selectCompositeModel));\r\n        this.model$.pipe(takeUntil(this.unsubscribe)).subscribe(model => {\r\n            if (model === null) {\r\n                this.store.dispatch(AdminActions.loadCompositeModel());\r\n                return;\r\n            }\r\n            this.adminEmail = model.AdminEmailAndCompanyName.AdminEmail;\r\n            this.companyName = model.AdminEmailAndCompanyName.CompanyName;\r\n        });\r\n    }\r\n\r\n    ngOnInit() {}\r\n\r\n    saveCacheSetting($event: boolean) {\r\n        this.store.dispatch(AdminActions.saveCacheSetting({ value: $event }));\r\n    }\r\n\r\n    saveAdminEmail() {\r\n        this.store.dispatch(AdminActions.saveAdminEmail({ AdminEmail: this.adminEmail, CompanyName: this.companyName }));\r\n    }\r\n\r\n    deleteAccount() {\r\n        const confirmationOptions: ConfirmationModalOptions = {\r\n            cancelButtonText: Resources.Strings.BUTTON.Cancel,\r\n            text: Resources.Strings.TXT.DeleteAccountConfirmationText,\r\n            title: Resources.Strings.TXT.DeleteAccountConfirmationDialogTitle,\r\n            successButtonText: Resources.Strings.BTN.DeleteAccountConfirmation,\r\n            //successAction: new SaveColumnSettings(this.columnSettings)\r\n            callback: () => {\r\n                (document.getElementById('delete-account-form') as HTMLFormElement).submit();\r\n            }\r\n        };\r\n        this.store.dispatch(\r\n            new DialogShow({\r\n                dialogName: SharedModals.ConfirmationDialog,\r\n                options: {\r\n                    options: confirmationOptions\r\n                }\r\n            })\r\n        );\r\n    }\r\n\r\n    ngOnDestroy(): void {\r\n        this.unsubscribe.next();\r\n        this.unsubscribe.complete();\r\n    }\r\n}\r\n","<div class=\"container\">\r\n    <div class=\"card\">\r\n        <div class=\"section-heading\">{{'admin.TXT_Company'|translate:locale.language}} <button class=\"btn btn-success\" (click)=\"saveAdminEmail()\"\r\n                ng-disabled=\"saving\" translate=\"common.SAVE_CHANGES\">Save Changes</button></div>\r\n        <div class=\"suffix\">{{'admin.TXT_CompanyDesc'|translate:locale.language}}</div>\r\n        <input type=\"text\" class=\"form-control\" [(ngModel)]=\"companyName\" ng-disabled=\"saving\" />\r\n    </div>\r\n    <div class=\"card\">\r\n        <div class=\"section-heading\">{{'admin.TXT_Admin'|translate:locale.language}} <button class=\"btn btn-success\" (click)=\"saveAdminEmail()\"\r\n                ng-disabled=\"saving\" translate=\"common.SAVE_CHANGES\">Save Changes</button></div>\r\n        <div class=\"suffix\">{{'admin.TXT_AdminDesc'|translate:locale.language}}</div>\r\n        <input type=\"text\" class=\"form-control\" [(ngModel)]=\"adminEmail\" ng-disabled=\"saving\" />\r\n    </div>\r\n    <div class=\"card\">\r\n        <div class=\"section-heading\">{{'admin.TXT_Data'|translate:locale.language}}</div>\r\n        <div class=\"suffix\">{{'admin.TXT_DataDesc'|translate:locale.language}}</div>\r\n        <div class=\"row horizontal-form\">\r\n            <div class=\"col\">\r\n                <div class=\"custom-control custom-checkbox\">\r\n                    <input type=\"checkbox\" class=\"custom-control-input\" id=\"customCheck1\"\r\n                        [ngModel]=\"disableCacheSetting$|async\" (ngModelChange)=\"saveCacheSetting($event)\">\r\n                    <label class=\"custom-control-label\" for=\"customCheck1\">{{'admin.TXT_DataLab'|translate:locale.language}}</label>\r\n                </div>\r\n            </div>\r\n            <!-- <div class=\"col-9\">\r\n                <div class=\"checkboxxxx\">\r\n                    <input checked=\"checked\" class=\"form-checkbox\" id=\"useCaching\" type=\"checkbox\"\r\n                        ng-model=\"tenant.DisableCache\" ng-change=\"saveCacheSetting(tenant.DisableCache)\"\r\n                        ng-disabled=\"saving\">\r\n                </div>\r\n            </div> -->\r\n        </div>\r\n    </div>\r\n    <div class=\"card\">\r\n        <div class=\"section-heading\">{{'admin.TXT_Delete'|translate:locale.language}} <button class=\"btn btn-danger\"\r\n                id=\"delete-account-button-ng\" (click)=\"deleteAccount()\">{{'admin.TXT_Delete'|translate:locale.language}}</button></div>\r\n        <div class=\"suffix\">{{'admin.TXT_DeleteDesc'|translate:locale.language}}</div>\r\n        <div class=\"row\">\r\n            <div class=\"col-md-12\">\r\n                <form id=\"delete-account-form\" method=\"POST\" action=\"/account/delete\"></form>\r\n                <p class=\"alert alert-danger\" style=\"padding: 5px;\">\r\n                    {{'admin.TXT_DeleteDesc2'|translate:locale.language}}\r\n                </p>\r\n            </div>\r\n        </div>\r\n    </div>\r\n</div>\r\n","import { Component, OnInit } from '@angular/core';\r\n\r\n@Component({\r\n    selector: 'toc-api-guide',\r\n    templateUrl: 'api-guide.component.html'\r\n})\r\n\r\nexport class ApiGuideComponent implements OnInit {\r\n    constructor() { }\r\n\r\n    ngOnInit() { }\r\n}\r\n","<div class=\"container\">\r\n    <div class=\"card\">\r\n        <h1>Zapier Integration Guide</h1>\r\n        <p class=\"lead\">This guide shows how to create a simple Zap to update a chart from a Google Sheets document.</p>\r\n        <h2>Creating an API key</h2>\r\n        <p>In order to authenticate API requests the caller needs to provide an API key in an HTTP header “X-API-Key”.\r\n            API keys can be issued and revoked on “Admin”-“API” page.</p>\r\n        <img class=\"img-fluid\" src=\"/img/zapier/Picture1.png\" alt=\"creating an api key\">\r\n        <p>Click “Add API Key” button to issue a new API key. The new key will appear in the table below. Please copy\r\n            the key value immediately – it will only be displayed once since it’s not being stored on TeamOrgChart’s\r\n            servers in plain text.</p>\r\n        <img class=\"img-fluid\" src=\"/img/zapier/Picture2.png\" alt=\"add api key\">\r\n        <h2>Testing the API</h2>\r\n        <p>Click the “API Documentation” link to open Swagger UI page. This page allows you to make calls to the API\r\n            directly from your web browser.</p>\r\n        <img class=\"img-fluid\" src=\"/img/zapier/Picture3.png\" alt=\"testing the api\">\r\n        <p>Paste the value of created API key into the “api_key” field. Click “ChartsApi” to open a list of operations\r\n            available in this category.</p>\r\n        <img class=\"img-fluid\" src=\"/img/zapier/Picture4.png\" alt=\"using the api key\">\r\n        <p>We’re going to use GET all charts call, the first in the list. Click on the operation to open detailed\r\n            information.</p>\r\n        <img class=\"img-fluid\" src=\"/img/zapier/Picture5.png\" alt=\"using the api key\">\r\n        <p>The only required parameter for this operation is “version”, enter “1” as the value and click “Try it out!”.\r\n        </p>\r\n        <p>Upon successful request you’ll see the response body, code and headers. Response body contains JSON\r\n            representation of the list of charts available in your organization.</p>\r\n        <img class=\"img-fluid\" src=\"/img/zapier/Picture6.png\" alt=\"using the api key\">\r\n        <h2>Creating a Zapier integration to update a chart from a Google Spreadsheet.</h2>\r\n        <p>First, let’s create a chart to hold imported data. Go to “Create new org chart” screen. Enter a name for the\r\n            new chart and choose “Load from a spreadsheet” as chart type:\r\n        </p>\r\n        <img class=\"img-fluid\" src=\"/img/zapier/Picture7.png\" alt=\"using the api key\">\r\n\r\n        <p>Get chart ID from the URL of the view chart page:</p>\r\n        <img class=\"img-fluid\" src=\"/img/zapier/Picture8.png\" alt=\"using the api key\">\r\n        <p>In my case it’s “5765a62a-11a0-49f4-9ca9-88020ec3b10c”. Save this value for later. Go to Zapier.com’s\r\n            dashboard and open My Zaps. Click Make a Zap! to create a new integration.\r\n        </p>\r\n        <img class=\"img-fluid\" src=\"/img/zapier/Picture9.png\" alt=\"using the api key\">\r\n\r\n        <p>Choose Google Sheets as a source event. Choose “New spreadsheet row” as a trigger event.</p>\r\n        <img class=\"img-fluid\" src=\"/img/zapier/Picture10.png\" alt=\"using the api key\">\r\n        <p>Press continue and log in to Google, choose a source spreadsheet and and a worksheet inside the spreadsheet.\r\n            The spreadsheet should contain a header row with fields for Unique item ID, Manager ID, Display name, job\r\n            title and any other data required.</p>\r\n        <img class=\"img-fluid\" src=\"/img/zapier/Picture10_2.png\" alt=\"using the api key\">\r\n        <p>Press “Edit” next to “Do this …”. Select “Webhooks by Zapier” as an App\r\n            and POST as an action event:\r\n        </p>\r\n        <img class=\"img-fluid\" src=\"/img/zapier/Picture11.png\" alt=\"using the api key\">\r\n        <p>\r\n            Press continue and enter TeamOrgChart API call data: URL – <a\r\n                href=\"https://teamorgchart.com/v1/data/CHART_ID\">https://teamorgchart.com/v1/data/CHART_ID</a>.<br>\r\n            Substitute CHART_ID with the ID of the chart you wish to use as a sync target. Choose JSON as payload type.\r\n            Map your spreadsheet columns data to JSON using Data table:\r\n        </p>\r\n        <img class=\"img-fluid\" src=\"/img/zapier/Picture12.png\" alt=\"using the api key\">\r\n        <p>At the bottom of the settings panel enter a new header name “X-API-Key” and paste your API key as a value.</p>\r\n        <img class=\"img-fluid\" src=\"/img/zapier/Picture13.png\" alt=\"using the api key\">\r\n        <p>That’s it! Turn you Zap on and add a row to your spreadsheet.</p>\r\n        <img class=\"img-fluid\" src=\"/img/zapier/Picture14.png\" alt=\"using the api key\">\r\n        <p>Add a row to your spreadsheet and check previously created chart on teamorgchart.com:</p>\r\n        <img class=\"img-fluid\" src=\"/img/zapier/Picture15.png\" alt=\"using the api key\">\r\n        <p>The box is there but it’s empty since TeamOrgChart doesn’t know which columns to display. Pick “Choose box contents” in the menu above the chart.</p>\r\n        <img class=\"img-fluid\" src=\"/img/zapier/Picture16.png\" alt=\"using the api key\">\r\n        <p>Choose columns you whish to be displayed in the chart box and click Save:</p>\r\n        <img class=\"img-fluid\" src=\"/img/zapier/Picture17.png\" alt=\"using the api key\">\r\n        <p>Go back to the chart:</p>\r\n        <img class=\"img-fluid\" src=\"/img/zapier/Picture18.png\" alt=\"using the api key\">\r\n    </div>\r\n</div>\r\n","<div class=\"container\">\r\n    <div class=\"card\">       \r\n        <h3>{{Resources.AdminStrings.TXT.ManageApiKeys|translate:locale.language}}</h3>\r\n        <p>{{Resources.AdminStrings.TXT.ManageApiKeysDesc|translate:locale.language}}</p>        \r\n        <button class=\"btn btn-warning col-2 mb-2\" (click)=\"createApiKey()\">{{Resources.AdminStrings.BTN.AddApiKey|translate:locale.language}}</button>\r\n        <table class=\"table table-striped\">\r\n            <thead>\r\n                <tr>\r\n                    <th scope=\"col\">#</th>\r\n                    <th scope=\"col\">{{Resources.AdminStrings.TXT.Prefix|translate:locale.language}}</th>\r\n                    <th scope=\"col\">{{Resources.AdminStrings.TXT.Value|translate:locale.language}}</th>\r\n                    <th scope=\"col\">{{Resources.AdminStrings.TXT.IssuedAt|translate:locale.language}}</th>\r\n                    <th scope=\"col\">{{Resources.AdminStrings.TXT.Revoke|translate:locale.language}}</th>\r\n                </tr>\r\n            </thead>\r\n            <tbody>\r\n                <tr *ngFor=\"let key of apiKeys$|async; let i=index;\">\r\n                    <th scrope=\"row\">{{i+1}}</th>\r\n                    <td>{{key.Prefix}}</td>\r\n                    <td>\r\n                        <span *ngIf=\"!key.Value\">******</span>\r\n                        {{key.Value}}\r\n                        <button *ngIf=\"key.Value\" class=\"btn btn-sm\" ngxClipboard [cbContent]=\"key.Value\"\r\n                                tooltip=\"{{'UXChart.TXT_Clipboard'|translate:locale.language}}\" triggers=\"\"\r\n                                (cbOnSuccess)=\"cpBtn.show()\" (mouseleave)=\"cpBtn.hide()\" #cpBtn=\"bs-tooltip\">\r\n                            <i class=\"fa fa-clipboard\"></i>\r\n                        </button>\r\n                        <span class=\"ml-2\" *ngIf=\"key.Value\" tooltip=\"{{Resources.AdminStrings.TXT.ValueDisplayWarning|translate:locale.language}}\">\r\n                            <i class=\"fa fa-info-circle\"></i>\r\n                        </span>\r\n                    </td>\r\n                    <td>{{key.IssuedDateTime|date:'short'}}</td>\r\n                    <td><button class=\"btn btn-danger\" (click)=\"revoke(key.Id)\">{{Resources.AdminStrings.BTN.Revoke|translate:locale.language}}</button></td>\r\n                </tr>\r\n            </tbody>\r\n        </table>\r\n    </div>\r\n    <div class=\"card\">\r\n        <h3>{{Resources.AdminStrings.TXT.GettingStarted|translate:locale.language}}</h3>\r\n        <br/>\r\n        <div class=\"row table\">\r\n            <div class=\"col-sm-6\">\r\n                <a href=\"/swagger\" target=\"_blank\">{{Resources.AdminStrings.LNK.ApiDocumentationLink|translate:locale.language}}</a>\r\n            </div>\r\n            <div class=\"col-sm-6\">\r\n                <a routerLink=\"/admin/api-guide\" target=\"_blank\">{{Resources.AdminStrings.LNK.ApiTutorialLink|translate:locale.language}}</a>\r\n            </div>\r\n        </div>\r\n    </div>\r\n    <div class=\"card\">\r\n        <h3>{{Resources.AdminStrings.TXT.ClientLibraries|translate:locale.language}}</h3>\r\n        <br />\r\n        <div class=\"container\">\r\n            <div class=\"row\">\r\n                <div class=\"col-sm-4\">\r\n                    <h2>.Net</h2>\r\n                </div>\r\n                <div class=\"col-sm-4\">\r\n                    <h2>Python</h2>\r\n                </div>\r\n                <div class=\"col-sm-4\">\r\n                    <h2>Typescript</h2>\r\n                </div>\r\n            </div>\r\n            <div class=\"row\">\r\n                <div class=\"col-sm-4\">\r\n                    <a href=\"https://www.nuget.org/packages/TocApiLibrary\"><img src=\"/img/netlogo.png\" /></a>\r\n                </div>\r\n                <div class=\"col-sm-4\">\r\n                    <a href=\"https://pypi.org/project/tocapilibrarypython/\">\r\n                        <img width=\"128\" height=\"128\" src=\"/img/python.png\" />\r\n                    </a>\r\n                </div>\r\n                <div class=\"col-sm-4\">\r\n                    <a href=\"https://www.npmjs.com/package/tocapilibraryts\">\r\n                        <img src=\"/img/typescriptlogo.png\" />\r\n                    </a>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    </div>\r\n</div>\r\n","import { Component, OnInit, Inject } from '@angular/core';\r\nimport { L10N_LOCALE, L10nLocale } from 'angular-l10n';\r\nimport * as Resources from '../../strings';\r\nimport * as fromRoot from '../../reducers';\r\nimport * as fromAdmin from '../admin.reducers';\r\nimport * as AdminActions from '../admin.actions';\r\nimport { Observable, Subject } from 'rxjs';\r\nimport { ApiKey } from '../admin.models';\r\nimport { Store, select } from '@ngrx/store';\r\nimport { ConfirmationModalOptions, SharedModals } from 'src/app/shared/shared.models';\r\nimport { DialogShow } from 'src/app/shared/shared.actions';\r\n\r\n@Component({\r\n    selector: 'toc-api',\r\n    templateUrl: 'api.component.html'\r\n})\r\n\r\nexport class ApiComponent implements OnInit {\r\n    Resources = Resources;\r\n    apiKeys$: Observable<ApiKey[]>;\r\n    private unsubscribe: Subject<void> = new Subject();\r\n\r\n    constructor(@Inject(L10N_LOCALE) public locale: L10nLocale, private store: Store<fromRoot.State>) {\r\n        this.apiKeys$ = this.store.pipe(select(fromAdmin.selectApiKeys));\r\n    }\r\n\r\n    ngOnInit() {\r\n        this.store.dispatch(AdminActions.loadApiKeys());\r\n    }\r\n\r\n    createApiKey() {\r\n        this.store.dispatch(AdminActions.createApiKey());\r\n    }\r\n\r\n    revoke(id: number) {\r\n        const confirmationOptions: ConfirmationModalOptions = {\r\n            cancelButtonText: Resources.Strings.BUTTON.Cancel,\r\n            text: Resources.AdminStrings.DLG.ConfirmRevokeTxt,\r\n            title: Resources.AdminStrings.DLG.ConfirmRevokeTitle,\r\n            successButtonText: Resources.AdminStrings.BTN.Revoke,\r\n            successAction: AdminActions.revokeApiKey({ id })\r\n        };\r\n        this.store.dispatch(\r\n            new DialogShow({\r\n                dialogName: SharedModals.ConfirmationDialog,\r\n                options: {\r\n                    options: confirmationOptions\r\n                }\r\n            })\r\n        );\r\n    }\r\n}\r\n","<div class=\"container\">\r\n    <form class=\"card\" [ngrxFormState]=\"(appearanceFormState$|async)\">\r\n        <div class=\"section-heading\">{{'admin.CUSTOMIZE_APPEARANCE'|translate:locale.language}}\r\n            <button class=\"btn btn-success\" (click)=\"saveAppearance()\" translate>common.SAVE_CHANGES</button>\r\n        </div>\r\n        <div class=\"suffix\" l10nTranslate>admin.TXT_Desc</div>\r\n        <div class=\"row horizontal-form\">\r\n            <div class=\"col-3\">\r\n                <label l10nTranslate>admin.TXT_Theme</label>\r\n            </div>\r\n            <div class=\"col-9\">\r\n                <select class=\"form-control\" [ngrxFormControlState]=\"(appearanceFormState$|async).controls.theme\">\r\n                    <option translate=\"admin.TXT_Light\" value=\"Light\">admin.TXT_Light</option>\r\n                    <option translate=\"admin.TXT_Dark\" value=\"Dark\">admin.TXT_Dark</option>\r\n                </select>\r\n            </div>\r\n        </div>\r\n        <div class=\"row horizontal-form has-error\" ng-if=\"colorErrorMessage\">\r\n            <div class=\"col-12\">\r\n                <span>{{colorErrorMessage}}</span>\r\n            </div>\r\n        </div>\r\n        <div class=\"row\">\r\n            <div class=\"col-3\"><label translate=\"admin.TXT_Brand\">admin.TXT_Brand</label></div>\r\n            <div class=\"col-9\">\r\n                <a class=\"color-swatch\"\r\n                    [style.background-color]=\"((appearanceFormState$ | async).controls.brandColor.value)  || '#000000'\"></a>\r\n                <input type=\"text\" [colorPicker]=\"(appearanceFormState$ | async).controls.brandColor.value\"\r\n                    [style.width.px]=\"100\" [value]=\"(appearanceFormState$ | async).controls.brandColor.value\"\r\n                    (colorPickerChange)=\"updateBrandColor($event)\" [readonly]=\"false\" [cpWidth]=\"200\"\r\n                    [cpOutputFormat]=\"'hex'\" [cpPosition]=\"'bottom'\" class=\"form-control\" />\r\n            </div>\r\n        </div>\r\n    </form>\r\n    <div class=\"card\">\r\n        <div class=\"section-heading\">\r\n            {{'admin.TXT_Footer'|translate:locale.language}}\r\n            <button class=\"btn btn-success\" (click)=\"saveAppearance()\"\r\n                translate=\"common.SAVE_CHANGES\">common.SAVE_CHANGES</button>\r\n        </div>\r\n        <div class=\"suffix\" translate=\"admin.TXT_FooterDesc\">admin.TXT_FooterDesc</div>\r\n        <textarea rows=\"2\" class=\"form-control\"\r\n            [ngrxFormControlState]=\"(appearanceFormState$|async).controls.footerText\"></textarea>\r\n        <br />\r\n        <span>{{colorErrorMessage}}</span>\r\n    </div>\r\n    <div class=\"card\">\r\n        <div class=\"section-heading\">\r\n            {{'admin.TXT_Logo'|translate:locale.language}}\r\n            <button class=\"btn btn-success\" (click)=\"saveLogo()\" translate=\"common.SAVE_CHANGES\">\r\n                common.SAVE_CHANGES\r\n            </button>\r\n        </div>\r\n        <div class=\"row\">\r\n            <div class=\"col-3\">\r\n                <input type=\"file\" ngf-max-size=\"5MB\" accept=\"image/*\" name=\"fileLogo\" ng2FileSelect\r\n                    [uploader]=\"logoUploader\" (onFileSelected)=\"uploadLogo()\">\r\n                <br />\r\n                <div class=\"alert-error\" ng-show=\"model.showError\"></div>\r\n                <div *ngIf=\"showRemoveLogo\">\r\n                    <button class=\"btn btn-danger btn-sm\" (click)=\"removeLogo()\"\r\n                        translate=\"admin.BUTTON_RemoveLogo\">admin.BUTTON_RemoveLogo</button>\r\n                </div>\r\n            </div>\r\n            <div class=\"col-2\">\r\n                <img style=\"max-width: 100%\" [src]=\"href\" *ngIf=\"href\" />\r\n            </div>\r\n        </div>\r\n    </div>\r\n    <div class=\"card\">\r\n        <div class=\"section-heading\">\r\n            {{'admin.TXT_CustomCSS'|translate:locale.language}}\r\n            <button class=\"btn btn-success\" ng-click=\"saveColor()\" translate=\"common.SAVE_CHANGES\">\r\n                common.SAVE_CHANGES\r\n            </button>\r\n        </div>\r\n        <div class=\"suffix\" translate=\"admin.TXT_CustomCSSDesc\">admin.TXT_CustomCSSDesc</div>\r\n        <input type=\"file\" ngf-max-size=\"5MB\" accept=\"text/*\" name=\"fileCss\" ng2FileSelect [uploader]=\"cssUploader\"\r\n            (onFileSelected)=\"uploadCss()\">\r\n        <br />\r\n        <div *ngIf=\"csshref\">\r\n            <h5>Remove Custom CSS</h5>\r\n            <button class=\"btn btn-danger\" (click)=\"removeCss()\"\r\n                translate=\"admin.TXT_RemoveCSS\">admin.TXT_RemoveCSS</button>\r\n        </div>\r\n        <div class=\"alert-error\" ng-show=\"model.showError\"></div>\r\n        <div class=\"col-md-3\" *ngIf=\"csshref\">\r\n        </div>\r\n    </div>\r\n</div>\r\n","import { Component, OnInit, OnDestroy, Inject } from '@angular/core';\r\nimport { L10N_LOCALE, L10nLocale } from 'angular-l10n';\r\nimport { Store, select } from '@ngrx/store';\r\nimport { CompositeModel } from '../admin.models';\r\nimport { Subject, Observable } from 'rxjs';\r\nimport * as fromRoot from '../../reducers';\r\nimport * as fromAdmin from '../admin.reducers';\r\nimport * as AdminActions from '../admin.actions';\r\nimport { takeUntil, debounceTime, take, map } from 'rxjs/operators';\r\nimport { FormGroupState, SetValueAction } from 'ngrx-forms';\r\nimport { FileUploader } from 'ng2-file-upload';\r\nimport { ToastSuccess } from 'src/app/shared/shared.actions';\r\nimport { AdminService } from '../services/admin.service';\r\nimport { Toast } from 'ngx-toastr';\r\n\r\n@Component({\r\n    selector: 'toc-admin-appearance',\r\n    styleUrls: ['./appearance.component.scss'],\r\n    templateUrl: './appearance.component.html'\r\n})\r\nexport class AppearanceComponent implements OnInit, OnDestroy {\r\n    model$: Observable<CompositeModel>;\r\n    brandColor$: Subject<string> = new Subject();\r\n    appearanceFormState$: Observable<FormGroupState<fromAdmin.AppearanceFormValue>>;\r\n    colorErrorMessage = '';\r\n    href = '';\r\n    csshref = '';\r\n    showRemoveLogo = false;\r\n    public logoUploader: FileUploader = new FileUploader({\r\n        isHTML5: true,\r\n        allowedMimeType: ['image/*', 'image/jpeg', 'image/png', 'image/bmp'],\r\n        url: '/api/admin/logoblobux'\r\n    });\r\n    public cssUploader: FileUploader = new FileUploader({\r\n        isHTML5: true,\r\n        allowedMimeType: ['text/*', 'text/css', 'text/plain', 'text/html'],\r\n        url: '/api/admin/customcss'\r\n    });\r\n    private unsubscribe: Subject<void> = new Subject();\r\n\r\n    constructor(@Inject(L10N_LOCALE) public locale: L10nLocale, private store: Store<fromRoot.State>, private adminService: AdminService) {\r\n        this.model$ = store.pipe(select(fromAdmin.selectCompositeModel));\r\n        this.model$.pipe(takeUntil(this.unsubscribe)).subscribe(model => {\r\n            if (model === null) {\r\n                this.store.dispatch(AdminActions.loadCompositeModel());\r\n                return;\r\n            }\r\n            this.store.dispatch(AdminActions.setAppearanceFormFromCompositeModel({ model }));\r\n            this.showRemoveLogo = model.Settings.HasCustomLogo;\r\n            this.csshref = model.CustomCssPath;\r\n            this.href = model.LogoPath;\r\n            if (this.href) {\r\n                this.href = this.href + '?decache=' + Math.random();\r\n            }\r\n        });\r\n        this.appearanceFormState$ = store.pipe(select(fromAdmin.selectAppearanceFormState));\r\n        this.brandColor$.pipe(takeUntil(this.unsubscribe), debounceTime(50)).subscribe(color => {\r\n            this.store.dispatch(new SetValueAction(fromAdmin.initialAppearanceFormState.controls.brandColor.id, color));\r\n        });\r\n    }\r\n\r\n    ngOnInit() {\r\n        this.logoUploader.onCompleteItem = (item, response, status, headers) => {\r\n            console.log(item, response, status, headers);\r\n            const resp = JSON.parse(response);\r\n            if (resp['status'] === 'OK') {\r\n                this.href = resp['href'] + '?decache=' + Math.random();\r\n                this.showRemoveLogo = true;\r\n                this.store.dispatch(new ToastSuccess(''));\r\n            }\r\n        };\r\n        this.cssUploader.onCompleteItem = (item, response, status, headers) => {\r\n            console.log(item, response, status, headers);\r\n            const resp = JSON.parse(response);\r\n            if (resp['status'] === 'OK') {\r\n                this.csshref = resp['href'] + '?decache=' + Math.random();\r\n                this.store.dispatch(new ToastSuccess(''));\r\n            }\r\n        };\r\n    }\r\n\r\n    updateBrandColor($event: string) {\r\n        this.brandColor$.next($event);\r\n    }\r\n\r\n    saveAppearance() {\r\n        this.appearanceFormState$\r\n            .pipe(\r\n                take(1),\r\n                map(appearanceForm => {\r\n                    const isOk = /(^#[0-9A-F]{6}$)|(^#[0-9A-F]{3}$)/i.test(appearanceForm.controls.brandColor.value);\r\n                    if (!isOk) {\r\n                        this.colorErrorMessage = 'Please enter a valid brand color value';\r\n                        return;\r\n                    }\r\n                    this.colorErrorMessage = '';\r\n                    this.store.dispatch(AdminActions.saveAppearance({ form: appearanceForm.value }));\r\n                    this.store.dispatch(new ToastSuccess(\"\"));\r\n                })\r\n            )\r\n            .subscribe();\r\n    }\r\n\r\n    uploadLogo() {\r\n        this.href = '';\r\n        this.logoUploader.uploadAll();\r\n    }\r\n\r\n    uploadCss() {\r\n        this.csshref = '';\r\n        this.cssUploader.uploadAll();\r\n    }\r\n\r\n    removeLogo() {\r\n        this.adminService.removeLogo().pipe(takeUntil(this.unsubscribe)).subscribe(() => {\r\n            this.href = '';\r\n            this.showRemoveLogo = false;\r\n            this.store.dispatch(new ToastSuccess(''));\r\n            this.saveAppearance();\r\n        });\r\n    }\r\n\r\n    saveLogo() {\r\n        this.saveAppearance();\r\n    }\r\n\r\n    removeCss() {\r\n        this.adminService.removeCss().pipe(takeUntil(this.unsubscribe)).subscribe(() => {\r\n            this.store.dispatch(new ToastSuccess(''));\r\n            this.csshref = '';\r\n        });\r\n    }\r\n\r\n    ngOnDestroy(): void {\r\n        this.unsubscribe.next();\r\n        this.unsubscribe.complete();\r\n    }\r\n}\r\n","<div class=\"container\">\r\n    <div class=\"card\">\r\n        <div class=\"section-heading\">{{'admin.TXT_InformationSource'|translate:locale.language}}</div>\r\n        <div class=\"suffix\">{{'admin.TXT_InformationSourceDesc'|translate:locale.language}}</div>\r\n        <div class=\"row mb-2\">\r\n            <div class=\"col-12 col-sm-6 col-md-4 col-xl-3\">\r\n                <button class=\"btn btn-success\" (click)=\"newSource()\"\r\n                    translate=\"admin.TXT_ISAddNew\">admin.TXT_ISAddNew</button>\r\n            </div>\r\n        </div>\r\n        <div class=\"row\">\r\n            <div class=\"col-12\">\r\n                <div class=\"table-responsive\" *ngIf=\"sources.length > 0\">\r\n                    <table class='table table-striped table-bordered table-hover'>\r\n                        <thead>\r\n                            <tr>\r\n                                <th>{{'admin.TXT_ISSource'|translate:locale.language}}</th>\r\n                                <th>{{'admin.TXT_ISSourceType'|translate:locale.language}}</th>\r\n                                <th></th>\r\n                                <th>{{'admin.TXT_ISTestSource'|translate:locale.language}}</th>\r\n                                <th>{{'admin.TXT_ISDelete'|translate:locale.language}}</th>\r\n                            </tr>\r\n                        </thead>\r\n                        <tbody>\r\n                            <tr *ngFor=\"let source of sources\" [style.cursor]=\"source.CanEdit ? 'pointer' : ''\"\r\n                                (click)=\"source.CanEdit && editSource(source.InformationSourceId)\">\r\n                                <td>{{source.SourceName}}</td>\r\n                                <td>{{source.FriendlyTypeName}}</td>\r\n                                <td>{{source.Description}}</td>\r\n                                <td>\r\n                                    <button class=\"btn btn-success\"\r\n                                        (click)=\"testInformationSource(source.InformationSourceId)\"\r\n                                        translate=\"admin.TXT_ISTestConnection\">\r\n                                        admin.TXT_ISTestConnection\r\n                                    </button>\r\n                                </td>\r\n                                <td><button type=\"button\" class=\"close\" *ngIf=\"source.CanEdit\"\r\n                                        (click)=\"removeSource(source.InformationSourceId)\">&times;</button></td>\r\n                            </tr>\r\n                        </tbody>\r\n                    </table>\r\n                </div>\r\n            </div>\r\n        </div>\r\n        <br />\r\n        <br />\r\n        <div class=\"row\">\r\n            <div class=\"col-12\" *ngIf=\"selectedSource\">\r\n                <div>\r\n                    <div ng-form=\"form\">\r\n                        <div class=\"row\">\r\n                            <div class=\"col-12 col-sm-6 form-group\" bs-has-error>\r\n                                <label translate=\"admin.TXT_ISSource\">Source Name</label>\r\n                                <input type=\"text\" class=\"form-control\" [(ngModel)]=\"selectedSource.SourceName\"\r\n                                    required />\r\n                            </div>\r\n                            <div class=\"col-12 col-sm-6\">\r\n                                <label>SQL or List</label>\r\n                                <div class=\"form-group\">\r\n                                    <div class=\"radio\">\r\n                                        <label>\r\n                                            <input type=\"radio\" name=\"sourceType\" value=\"SQLServer\"\r\n                                                [(ngModel)]=\"selectedSource.SourceType\">\r\n                                            SQL Server\r\n                                        </label>\r\n                                    </div>\r\n                                    <div class=\"radio\">\r\n                                        <label>\r\n                                            <input type=\"radio\" name=\"sourceType\" value=\"SharePointList\"\r\n                                                [(ngModel)]=\"selectedSource.SourceType\">\r\n                                            SharePoint List\r\n                                        </label>\r\n                                    </div>\r\n                                </div>\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                    <div *ngIf=\"selectedSource.SourceType=='SQLServer'\">\r\n                        <label translate=\"admin.TXT_ISSourceCon\">Connection String</label>\r\n                        <input type=\"text\" class=\"form-control\" [(ngModel)]=\"selectedSource.ConnectionString\"\r\n                            required />\r\n                        <label translate=\"admin.TXT_ISQuery\">Query</label>\r\n                        <textarea type=\"text\" class=\"form-control\" [(ngModel)]=\"selectedSource.Query\"\r\n                            required></textarea>\r\n                    </div>\r\n                    <div *ngIf=\"selectedSource.SourceType=='SharePointList'\">\r\n                        <div class=\"row\">\r\n                            <div class=\"col\"><label translate=\"admin.TXT_ISSharePointLists\">SharePoint Lists</label>\r\n                                <select class=\"form-control\" [ngModel]=\"selectedListId\" (ngModelChange)=\"updateFieldList()\">\r\n                                    <option *ngFor=\"let option of sharePointLists$|async\" ng-value=\"option.Id\">\r\n                                        {{option.Name}}</option>\r\n                                </select>\r\n                            </div>\r\n                            <div class=\"col\">\r\n                                <label translate=\"admin.TXT_ISSharePointListFields\">Field</label>\r\n                                <select class=\"form-control\" [(ngModel)]=\"selectedSharePointFieldId\"\r\n                                    ng-change=\"updateSelectedField(SharePointFieldId)\"\r\n                                    ng-options=\"key as value  for (key, value) in SharePointListFields\">\r\n                                    <option *ngFor=\"let field of sharePointListFields$|async|keyvalue\"\r\n                                        [value]=\"field.value\">\r\n                                    </option>\r\n                                </select>\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n                <br />\r\n                <button class=\"btn btn-success\" (click)=\"saveSource()\" translate=\"common.SAVE_CHANGES\">\r\n                    common.SAVE_CHANGES\r\n                </button>\r\n            </div>\r\n        </div>\r\n    </div>\r\n","import { Component, OnInit, OnDestroy, Inject } from '@angular/core';\r\nimport { L10N_LOCALE, L10nLocale } from 'angular-l10n';\r\nimport { InformationSourceViewModel, SharePointListInfo } from '../admin.models';\r\nimport { Store, select } from '@ngrx/store';\r\nimport { CompositeModel } from '../admin.models';\r\nimport { Subject, Observable } from 'rxjs';\r\nimport * as fromRoot from '../../reducers';\r\nimport * as fromAdmin from '../admin.reducers';\r\nimport * as AdminActions from '../admin.actions';\r\nimport { takeUntil, debounceTime, take, map, filter } from 'rxjs/operators';\r\nimport { ToastError } from 'src/app/shared/shared.actions';\r\n\r\n@Component({\r\n    selector: 'toc-admin-information-sources',\r\n    templateUrl: 'information-sources.component.html'\r\n})\r\nexport class InformationSourcesComponent implements OnInit, OnDestroy {\r\n    sources: InformationSourceViewModel[] = [];\r\n    selectedSource: InformationSourceViewModel = null;\r\n    selectedListId: string = null;\r\n    selectedSharePointFieldId: string = null;\r\n    sharePointLists$: Observable<SharePointListInfo[]>;\r\n    sharePointListFields$: Observable<{ [paramName: string]: string }[]>;\r\n    private unsubscribe: Subject<void> = new Subject();\r\n\r\n    constructor(@Inject(L10N_LOCALE) public locale: L10nLocale, private store: Store<fromRoot.State>) {\r\n        this.store.pipe(select(fromAdmin.selectCompositeModel), takeUntil(this.unsubscribe)).subscribe(model => {\r\n            if (model === null) {\r\n                this.store.dispatch(AdminActions.loadCompositeModel());\r\n                return;\r\n            }\r\n            this.sources = model.InformationSources.map(x => ({ ...x }));\r\n        });\r\n        this.store.pipe(select(fromAdmin.selectSelectedSourceInfo), takeUntil(this.unsubscribe), filter(x => x !== null)).subscribe(info => {\r\n            if (this.selectedSource.InformationSourceId === info.InformationSourceId) {\r\n                this.selectedSource = { ...info };\r\n            }\r\n        });\r\n        this.store.pipe(select(fromAdmin.selectDeletedSourceId), takeUntil(this.unsubscribe), filter(x => x !== null)).subscribe(id => {\r\n            this.sources = this.sources.filter(x => (x.InformationSourceId !== id));\r\n            this.store.dispatch(AdminActions.loadCompositeModel());\r\n        });\r\n        this.store.pipe(select(fromAdmin.selecteSavedSourceId), takeUntil(this.unsubscribe), filter(x => x !== null)).subscribe(id => {\r\n            if (this.selectedSource) {\r\n                const idx = this.sources.findIndex(x => x.InformationSourceId === id);\r\n                if (idx === -1) {\r\n                    this.sources.push({ ...this.selectedSource, InformationSourceId: id });\r\n                    this.selectedSource = { ...this.sources.find(x => x.InformationSourceId === id) };\r\n                } else {\r\n                    this.sources[idx] = { ...this.selectedSource };\r\n                    this.selectedSource = { ...this.sources[idx] };\r\n                }\r\n            }\r\n            this.store.dispatch(AdminActions.clearSavedSourceId());\r\n        });\r\n        this.sharePointLists$ = this.store.pipe(select(fromAdmin.selectSharePointLists));\r\n        this.sharePointListFields$ = this.store.pipe(select(fromAdmin.selectSharePointListFields));\r\n    }\r\n\r\n    ngOnInit() {}\r\n\r\n    testInformationSource(id: string) {\r\n        this.store.dispatch(AdminActions.testInformationSource({ id }));\r\n    }\r\n\r\n    newSource() {\r\n        this.selectedSource = {\r\n            CanEdit: false,\r\n            ConnectionString: '',\r\n            Description: '',\r\n            FriendlyTypeName: '',\r\n            InformationSourceId: '',\r\n            Query: '',\r\n            SharePointList: '',\r\n            SharePointListColumn: '',\r\n            SourceName: '',\r\n            SourceType: 'SQLServer'\r\n        };\r\n    }\r\n\r\n    editSource(sourceId: string) {\r\n        const source = this.sources.find(x => x.InformationSourceId === sourceId);\r\n        if (source) {\r\n            this.selectedSource = { ...source };\r\n        }\r\n        this.store.dispatch(AdminActions.loadInformationSource({ sourceId }));\r\n    }\r\n\r\n    removeSource(id: string) {\r\n        this.store.dispatch(AdminActions.deleteInformationSource({ id }));\r\n    }\r\n\r\n    saveSource() {\r\n        if (this.selectedSource === null) {\r\n            this.store.dispatch(new ToastError('Please select an existing or create a new source first'));\r\n            return;\r\n        }\r\n        this.store.dispatch(AdminActions.saveInformationSource({ source: this.selectedSource }));\r\n    }\r\n\r\n    updateFieldList() {\r\n        if (this.selectedListId) {\r\n            this.store.dispatch(AdminActions.getSharePointListFields({ id: this.selectedListId }));\r\n        }\r\n    }\r\n\r\n    ngOnDestroy(): void {\r\n        this.unsubscribe.next();\r\n        this.unsubscribe.complete();\r\n    }\r\n}\r\n","<div class=\"container\">\r\n    <div class=\"card\">\r\n        <div class=\"section-heading\" translate=\"admin.TXT_ManageAdmin\">Manage chart administrators</div>\r\n        <div class=\"suffix\" translate=\"admin.TXT_ManageAdminDesc\">Control the list of users who have administrator\r\n            privileges to all charts</div>\r\n        <div class=\"row\">\r\n            <div class=\"col-12 col-md-6\">\r\n                <input class=\"form-control\" [(ngModel)]=\"peoplePickerSearchString\" [typeahead]=\"peoplePickerSource$\"\r\n                    [typeaheadAsync]=\"true\" (typeaheadOnSelect)=\"onSelectPerson($event)\" typeaheadOptionsLimit=\"20\"\r\n                    [typeaheadScrollable]=\"true\" [typeaheadOptionsInScrollableView]=\"8\" container=\"body\"\r\n                    typeaheadWaitMs=\"200\" typeaheadOptionField=\"TypeaheadTitle\"\r\n                    placeholder=\"{{Resources.AuditStrings.SelectStartingPersonPlaceholder|translate:locale.language}}\" />\r\n                <br />\r\n                <button class=\"btn btn-success\" (click)=\"addCreator()\" [disabled]=\"newCreator === null\">\r\n                    <i class=\"fa fa-plus-circle fa-lg\"></i> {{'admin.BUTTON_AddAdmin'|translate:locale.language}}\r\n                </button>\r\n            </div>\r\n            <div class=\"col-12 col-md-6 mt-2 mt-md-0\">\r\n                <ul class=\"list-group\">\r\n                    <li class=\"list-group-item\" *ngFor=\"let creator of creators\">\r\n                        <span>{{creator.name}}</span> <button type=\"button\" class=\"close\"\r\n                            (click)=\"removeCreator(creator.id)\">&times;</button>\r\n                    </li>\r\n                </ul>\r\n            </div>\r\n        </div>\r\n    </div>\r\n    <div class=\"card\">\r\n        <div class=\"section-heading\" translate=\"admin.TXT_ManageGroups\">Manage Security Groups</div>\r\n        <div class=\"suffix\" translate=\"admin.TXT_ManageGroupsDesc\">Use this page to control access to charts, define\r\n            groups of people who can view or administrate specific charts and restrict access to charts to certain\r\n            groups of people within the organisation.</div>\r\n        <div class=\"row\">\r\n            <div class=\"col-md-4\">\r\n                <div class=\"input-group\">\r\n                    <input type=\"text\" class=\"form-control\" [(ngModel)]=\"newSecurityGroupName\"\r\n                        placeholder=\"{{'admin.TXT_NewGroup'|translate:locale.language}}\" />\r\n                    <span class=\"input-group-btn\">\r\n                        <button class=\"btn btn-success\" type=\"button\" [disabled]=\"newSecurityGroupName.length === 0\"\r\n                            (click)=\"addSecurityGroup()\"><i class=\"fa fa-plus-circle fa-lg\"></i>\r\n                            {{'admin.TXT_AddNewGroup'|translate:locale.language}}</button>\r\n                    </span>\r\n                </div>\r\n                <br />\r\n            </div>\r\n        </div>\r\n        <div class=\"row\">\r\n            <div class=\"col-md-4\">\r\n                <select class=\"form-control\" [(ngModel)]=\"selectedSecurityGroup\">\r\n                    <option translate=\"admin.TXT_SelectGroup\" [ngValue]=\"null\" selected>Select existing group</option>\r\n                    <option *ngFor=\"let securityGroup of (model$|async)?.SecurityGroups\" [ngValue]=\"securityGroup\">\r\n                        {{securityGroup.Name}}</option>\r\n                </select>\r\n                <br />\r\n            </div>\r\n            <div class=\"col-md-4\">                \r\n                <button class=\"btn btn-danger\" *ngIf=\"selectedSecurityGroup\" (click)=\"removeSecurityGroup(selectedSecurityGroup.Id)\">\r\n                    <i class=\"fa fa-trash fa-lg\"></i> {{'admin.TXT_RemoveGroup'|translate:locale.language}}\r\n                </button>\r\n            </div>\r\n        </div>\r\n        <div id=\"manage-security-group\" *ngIf=\"selectedSecurityGroup\">\r\n            <div class=\"row\">\r\n                <div class=\"col-md-4\">\r\n                    <b translate=\"admin.TXT_AddUserToGroup\">Add Users to Security Group</b>\r\n                </div>\r\n                <div class=\"col-md-4\">\r\n                    <b translate=\"admin.TXT_AddGroupToGroup\"> Add Groups to Security Group</b>\r\n                </div>\r\n            </div>\r\n            <div class=\"row\">\r\n                <div class=\"col-md-4\">\r\n                    <input class=\"form-control\" [(ngModel)]=\"securityUserPickerString\"\r\n                        [typeahead]=\"securityUserPickerSource$\" [typeaheadAsync]=\"true\"\r\n                        (typeaheadOnSelect)=\"onSelectSecurityPerson($event)\" typeaheadOptionsLimit=\"20\"\r\n                        [typeaheadScrollable]=\"true\" [typeaheadOptionsInScrollableView]=\"8\" container=\"body\"\r\n                        typeaheadWaitMs=\"200\" typeaheadOptionField=\"TypeaheadTitle\"\r\n                        placeholder=\"{{Resources.AuditStrings.SelectStartingPersonPlaceholder|translate:locale.language}}\" />\r\n                    <p></p>\r\n                    <div class=\"clearfix\"></div>\r\n                    <button class=\"btn btn-success\" (click)=\"addToSecurityGroup('user')\"\r\n                        [disabled]=\"addedUser === null\"><i class=\"fa fa-plus-circle fa-lg\"></i>\r\n                        {{'admin.TXT_AddUser'|translate:locale.language}}</button>\r\n                </div>\r\n                <div class=\"col-md-4\">\r\n                    <select class=\"form-control\" [(ngModel)]=\"addedGroup\">\r\n                        <option [ngValue]=\"null\">{{'admin.TXT_SelectAGroup'|translate:locale.language}}</option>\r\n                        <option *ngFor=\"let group of (availableEntries$|async)?.groups\" [ngValue]=\"group\">\r\n                            {{group.value}}</option>\r\n                    </select>\r\n                    <p></p>\r\n                    <div class=\"clearfix\"></div>\r\n                    <button class=\"btn btn-success\" (click)=\"addToSecurityGroup('group')\"\r\n                        [disabled]=\"addedGroup === null\"><i class=\"fa fa-plus-circle fa-lg\"></i>\r\n                        {{'admin.TXT_AddGroup'|translate:locale.language}}</button>\r\n                </div>\r\n            </div>\r\n            <p></p>\r\n            <div class=\"row\">\r\n                <div class=\"col-md-4\">\r\n                    <b translate=\"admin.TXT_UsersInGroup\">Users in Security Group</b>\r\n                    <ul class=\"list-group\">\r\n                        <li class=\"list-group-item\" *ngIf=\"!hasItems('user')\"\r\n                            ng-if=\"(security.currentGroup.SecurityGroupEntries|users).length == 0\"\r\n                            translate=\"admin.TXT_None\">admin.TXT_None</li>\r\n                        <li class=\"list-group-item\"\r\n                            *ngFor=\"let entry of selectedSecurityGroup.SecurityGroupEntries | callback: userEntry\"\r\n                            ng-repeat=\"user in security.currentGroup.SecurityGroupEntries|users\">{{entry.UserName}}\r\n                            <button type=\"button\" class=\"close\"\r\n                                (click)=\"removeSecurityGroupEntry(entry.Id)\">&times;</button></li>\r\n                    </ul>\r\n                </div>\r\n                <div class=\"col-md-4\">\r\n                    <b translate=\"admin.TXT_GroupsInGroup\">Groups in Security Group</b>\r\n                    <ul class=\"list-group\">\r\n                        <li class=\"list-group-item\" *ngIf=\"!hasItems('group')\" translate=\"admin.TXT_NoGroups\">\r\n                            admin.TXT_NoGroups</li>\r\n                        <li class=\"list-group-item\"\r\n                            *ngFor=\"let entry of selectedSecurityGroup.SecurityGroupEntries | callback: groupEntry\">\r\n                            {{entry.GroupName}}\r\n                            <button type=\"button\" class=\"close\"\r\n                                (click)=\"removeSecurityGroupEntry(entry.Id)\">&times;</button></li>\r\n                    </ul>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    </div>\r\n    <div class=\"card\">\r\n        <div class=\"section-heading\" translate=\"admin.TXT_AssignTitle\">Assign Groups to Charts</div>\r\n        <div class=\"suffix\" translate=\"admin.TXT_AssignDesc\">Manage which charts each admin group can access here</div>\r\n        <div class=\"row\">\r\n            <div class=\"table-responsive col-md-12\">\r\n                <table class=\"table table-hover\">\r\n                    <thead class=\"theader\">\r\n                        <tr>\r\n                            <th translate=\"admin.TXT_OrgChart\">Organization Chart</th>\r\n                            <th translate=\"admin.TXT_ViewGroup\">View Only Group</th>\r\n                            <th translate=\"admin.TXT_AdminGroup\">Admin Group</th>\r\n                            <th translate=\"admin.TXT_DenyGroup\">Deny Access To</th>\r\n                        </tr>\r\n                    </thead>\r\n                    <tr *ngFor=\"let chart of charts$|async\">\r\n                        <td>{{chart.name}}</td>\r\n                        <td>\r\n                            <select class=\"form-control\" [ngModel]=\"chart.viewGroupId\"\r\n                                ng-options=\"group.Id as group.Name for group in securityGroups\"\r\n                                (ngModelChange)=\"saveChart(chart, 'viewGroupId', $event)\"\r\n                                [disabled]=\"(chartRequests$|async)[chart.id]\">\r\n                                <option [ngValue]=\"0\" translate=\"admin.TXT_Everybody\">admin.TXT_Everybody</option>\r\n                                <option *ngFor=\"let group of (model$|async)?.SecurityGroups\" [ngValue]=\"group.Id\">\r\n                                    {{group.Name}}</option>\r\n                            </select>\r\n                        </td>\r\n                        <td>\r\n                            <select class=\"form-control\" [ngModel]=\"chart.adminGroupId\"\r\n                                ng-options=\"group.Id as group.Name for group in securityGroups\"\r\n                                (ngModelChange)=\"saveChart(chart, 'adminGroupId', $event)\"\r\n                                [disabled]=\"(chartRequests$|async)[chart.id]\">\r\n                                <option [ngValue]=\"0\" translate=\"admin.TXT_Creators\">admin.TXT_Creators</option>\r\n                                <option *ngFor=\"let group of (model$|async)?.SecurityGroups\" [ngValue]=\"group.Id\">\r\n                                    {{group.Name}}</option>\r\n                            </select>\r\n                        </td>\r\n                        <td>\r\n                            <select class=\"form-control\" [ngModel]=\"chart.denyGroupId\"\r\n                                ng-options=\"group.Id as group.Name for group in securityGroups\"\r\n                                (ngModelChange)=\"saveChart(chart, 'denyGroupId', $event)\"\r\n                                [disabled]=\"(chartRequests$|async)[chart.id]\">\r\n                                <option [ngValue]=\"0\" translate=\"admin.TXT_Nobody\">admin.TXT_Nobody</option>\r\n                                <option *ngFor=\"let group of (model$|async)?.SecurityGroups\" [ngValue]=\"group.Id\">\r\n                                    {{group.Name}}</option>\r\n                            </select>\r\n                        </td>\r\n                    </tr>\r\n                </table>\r\n            </div>\r\n        </div>\r\n    </div>\r\n    <div class=\"card\">\r\n        <div class=\"section-heading\" translate=\"admin.TXT_ExternalTitle\">External user access</div>\r\n        <div class=\"suffix\" translate=\"admin.TXT_ExternalDesc\">Control whether charts can be shared outside of\r\n            TeamOrgChart</div>\r\n        <div class=\"subheading mb-0 mt-1\" translate=\"admin.TXT_GlobalSetting\">Global setting</div>\r\n        <p class=\"mt-1\" translate=\"admin.TXT_GlobalDesc\">Disallowing access globally overrides all chart specific\r\n            settings</p>\r\n        <div class=\"row\">\r\n            <div class=\"col-md-4\">\r\n                <select class=\"form-control\" [(ngModel)]=\"globalExternalUsersSetting\" ng-disabled=\"saving\"\r\n                    (change)=\"saveGlobalExternalSetting(globalExternalUsersSetting)\">\r\n                    <option [value]=\"false\">Not allowed</option>\r\n                    <option [value]=\"true\">Allowed</option>\r\n                </select>\r\n            </div>\r\n        </div>\r\n        <div class=\"subheading\" translate=\"admin.TXT_ChartSetting\">Chart specific settings</div>\r\n        <div class=\"row\">\r\n            <div class=\"table-responsive col-md-12\">\r\n                <table class=\"table table-hover\">\r\n                    <thead class=\"theader\">\r\n                        <tr>\r\n                            <th translate=\"admin.TXT_OrgChart\">Organization Chart</th>\r\n                            <th translate=\"admin.TXT_ChartExternalUser\">External users access</th>\r\n                        </tr>\r\n                    </thead>\r\n                    <tr *ngFor=\"let chart of charts$|async\">\r\n                        <td>{{chart.name}}</td>\r\n                        <td>\r\n                            <select class=\"form-control\" [ngModel]=\"chart.areExternalUsersAllowed\"\r\n                                [disabled]=\"(chartExternalRequests$|async)[chart.id] || !globalExternalUsersSetting\"\r\n                                (ngModelChange)=\"saveExternalUsersSetting(chart, $event)\"\r\n                                ng-options=\"o.v as o.n for o in [{ n: 'Not allowed', v: false }, { n: 'Allowed', v: true }]\">\r\n                                <option [value]=\"false\">Not allowed</option>\r\n                                <option [value]=\"true\">Allowed</option>\r\n                            </select>\r\n                        </td>\r\n                    </tr>\r\n                </table>\r\n            </div>\r\n        </div>\r\n    </div>\r\n</div>\r\n","import { Component, OnInit, OnDestroy, Inject } from '@angular/core';\r\nimport { L10N_LOCALE, L10nLocale } from 'angular-l10n';\r\nimport { Store, select } from '@ngrx/store';\r\nimport * as fromRoot from '../../reducers';\r\nimport * as fromAdmin from '../admin.reducers';\r\nimport * as AdminActions from '../admin.actions';\r\nimport { Observable, Subject } from 'rxjs';\r\nimport { CompositeModel, CreatorInfo, SecurityGroup, AvailableEntries, Entry, SecurityGroupEntry, SecurityChartViewModel } from '../admin.models';\r\nimport * as Resources from '../../strings';\r\nimport { takeUntil, map, mergeMap, take, withLatestFrom } from 'rxjs/operators';\r\nimport { ChartService } from 'src/app/core/services/chart.service';\r\nimport { ChartNode } from 'src/app/models';\r\nimport { TypeaheadMatch } from 'ngx-bootstrap/typeahead/public_api';\r\nimport { AdminService } from '../services/admin.service';\r\nimport { Title } from '@angular/platform-browser';\r\n\r\n@Component({\r\n    selector: 'toc-admin-security',\r\n    templateUrl: './security.component.html'\r\n})\r\nexport class SecurityComponent implements OnInit, OnDestroy {\r\n    Resources = Resources;\r\n    model$: Observable<CompositeModel>;\r\n    availableEntries$: Observable<AvailableEntries>;\r\n    charts$: Observable<SecurityChartViewModel[]>;\r\n    chartRequests$: Observable<{ [paramName: string]: any }>;\r\n    chartExternalRequests$: Observable<{ [paramName: string]: any }>;\r\n    peoplePickerSource$: Observable<boolean>;\r\n    peoplePickerSearchString: string;\r\n    securityUserPickerSource$: Observable<boolean>;\r\n    securityUserPickerString: string;\r\n    newCreator: ChartNode = null;\r\n    addedUser: ChartNode = null;\r\n    addedGroup: Entry = null;\r\n    creators: CreatorInfo[];\r\n    newSecurityGroupName = '';\r\n    selectedSecurityGroup: SecurityGroup = null;\r\n    globalExternalUsersSetting = false;\r\n    private unsubscribe: Subject<void> = new Subject();\r\n\r\n    constructor(@Inject(L10N_LOCALE) public locale: L10nLocale, private store: Store<fromRoot.State>, private chartService: ChartService, private adminService: AdminService, private title: Title) {\r\n        this.model$ = store.pipe(select(fromAdmin.selectCompositeModel));\r\n        this.model$.pipe(takeUntil(this.unsubscribe)).subscribe(model => {\r\n            if (model === null) {\r\n                this.store.dispatch(AdminActions.loadCompositeModel());\r\n                return;\r\n            }\r\n            this.creators = model.Creators ? model.Creators.map(x => ({ id: x, name: x})) : [];\r\n            this.updateCreatorInfo();\r\n            if (this.selectedSecurityGroup !== null) {\r\n                this.selectedSecurityGroup = model.SecurityGroups.find(x => x.Id === this.selectedSecurityGroup.Id);\r\n            }\r\n            this.globalExternalUsersSetting = model.GlobalExternalUsersSetting;\r\n        });\r\n        this.availableEntries$ = store.pipe(select(fromAdmin.selectAvailableEntries));\r\n        this.availableEntries$.pipe(takeUntil(this.unsubscribe)).subscribe(entries => {\r\n            if (entries === null) {\r\n                this.store.dispatch(AdminActions.loadCompanyGroups());\r\n                return;\r\n            }\r\n        });\r\n        this.charts$ = store.pipe(select(fromAdmin.selectCharts));\r\n        this.charts$.pipe(takeUntil(this.unsubscribe)).subscribe(charts => {\r\n            if (charts === null) {\r\n                this.store.dispatch(AdminActions.loadCharts());\r\n                return;\r\n            }\r\n        });\r\n        title.setTitle('Settings - Security');\r\n        this.chartRequests$ = this.store.pipe(select(fromAdmin.selectChartRequests));\r\n        this.chartExternalRequests$ = this.store.pipe(select(fromAdmin.selectChartExternalRequests));\r\n    }\r\n\r\n    ngOnInit() {\r\n        this.store.pipe(select(fromAdmin.selectSelectedSecurityGroupId), withLatestFrom(this.model$), takeUntil(this.unsubscribe)).subscribe(([id, model]) => {\r\n            if (id !== 0 && model && model.SecurityGroups && model.SecurityGroups.length > 0) {\r\n                const group = model.SecurityGroups.find(x => x.Id === id);\r\n                if (group) {\r\n                    this.selectedSecurityGroup = group;\r\n                    this.newSecurityGroupName = '';\r\n                }\r\n            }\r\n        });\r\n        this.peoplePickerSource$ = new Observable<string>(observer => {\r\n            observer.next(this.peoplePickerSearchString);\r\n        }).pipe(\r\n            mergeMap(x => {\r\n                return this.chartService.searchOrganization(x).pipe(\r\n                    //tap(y => console.log(y)),\r\n                    map(data => data.map(item => {\r\n                        if (item.JobTitle) {\r\n                            item.TypeaheadTitle = `${item.DisplayName} - ${item.JobTitle}`;\r\n                        } else {\r\n                            item.TypeaheadTitle = item.DisplayName;\r\n                        }\r\n                        return item;\r\n                    }))\r\n                );\r\n            })\r\n        );\r\n        this.securityUserPickerSource$ = new Observable<string>(observer => {\r\n            observer.next(this.securityUserPickerString);\r\n        }).pipe(\r\n            mergeMap(x => {\r\n                return this.chartService.searchOrganization(x).pipe(\r\n                    //tap(y => console.log(y)),\r\n                    map(data => data.map(item => {\r\n                        if (item.JobTitle) {\r\n                            item.TypeaheadTitle = `${item.DisplayName} - ${item.JobTitle}`;\r\n                        } else {\r\n                            item.TypeaheadTitle = item.DisplayName;\r\n                        }\r\n                        return item;\r\n                    }))\r\n                );\r\n            })\r\n        );\r\n    }\r\n\r\n    onSelectPerson($event: TypeaheadMatch) {\r\n        console.log($event);\r\n        this.newCreator = $event.item;\r\n    }\r\n\r\n    onSelectSecurityPerson($event: TypeaheadMatch) {\r\n        console.log($event);\r\n        this.addedUser = $event.item;\r\n    }\r\n\r\n    addCreator() {\r\n        if (this.newCreator === null) {\r\n            return;\r\n        }\r\n        this.model$.pipe(\r\n            take(1),\r\n            map(model => {\r\n                if (model.Creators.findIndex(x => x === this.newCreator.UniqueId) !== -1) {\r\n                    return;\r\n                }\r\n                this.store.dispatch(AdminActions.saveCreators({ creators: [...model.Creators, this.newCreator.UniqueId] }));\r\n                this.newCreator = null;\r\n                this.peoplePickerSearchString = '';\r\n            })\r\n        ).subscribe();\r\n    }\r\n\r\n    removeCreator(id: string) {\r\n        this.model$.pipe(\r\n            take(1),\r\n            map(model => {\r\n                this.store.dispatch(AdminActions.saveCreators({ creators: model.Creators.filter(x => x !== id)}));\r\n                this.newCreator = null;\r\n                this.peoplePickerSearchString = '';\r\n            })\r\n        ).subscribe();\r\n    }\r\n\r\n    updateCreatorInfo() {\r\n        this.creators.forEach(creator => {\r\n            this.adminService.getPersonName(creator.id).subscribe(name => {\r\n                creator.name = name;\r\n            });\r\n        });\r\n    }\r\n\r\n    addSecurityGroup() {\r\n        if (this.newSecurityGroupName === '' || this.newSecurityGroupName === null) {\r\n            return;\r\n        }\r\n        this.store.dispatch(AdminActions.createSecurityGroup({ name: this.newSecurityGroupName }));\r\n    }\r\n\r\n    removeSecurityGroup(groupId : number) {\r\n        this.store.dispatch(AdminActions.removeSecurityGroup({ id: groupId }));\r\n    }\r\n\r\n    addToSecurityGroup(type: 'user' | 'group') {\r\n        console.log('adding', type);\r\n        if (!this.selectedSecurityGroup) {\r\n            return;\r\n        }\r\n        const securityGroupEntry: SecurityGroupEntry = {\r\n            Id: 0,\r\n            SecurityGroupId: this.selectedSecurityGroup.Id\r\n        };\r\n        if (type === 'group') {\r\n            securityGroupEntry.GroupName = this.addedGroup.value;\r\n        }\r\n        if (type === 'user') {\r\n            securityGroupEntry.UserId = this.addedUser.UniqueId;\r\n            securityGroupEntry.UserName = this.addedUser.DisplayName;\r\n            this.securityUserPickerString = '';\r\n        }\r\n        this.store.dispatch(AdminActions.addSecurityGroupEntry({ entry: securityGroupEntry }));\r\n        this.addedUser = null;\r\n        this.addedGroup = null;\r\n    }\r\n\r\n    removeSecurityGroupEntry(id: number) {\r\n        this.store.dispatch(AdminActions.removeSecurityGroupEntry({ id }));\r\n    }\r\n\r\n    hasItems(type: 'user' | 'group'): boolean {\r\n        if (this.selectedSecurityGroup === null || this.selectedSecurityGroup.SecurityGroupEntries == null) {\r\n            return false;\r\n        }\r\n        if (type === 'user') {\r\n            return this.selectedSecurityGroup.SecurityGroupEntries.findIndex(x => !!x.UserId || !!x.UserName) !== -1;\r\n        }\r\n        if (type === 'group') {\r\n            return this.selectedSecurityGroup.SecurityGroupEntries.findIndex(x => !!x.GroupName) !== -1;\r\n        }\r\n    }\r\n\r\n    saveGlobalExternalSetting(value: boolean) {\r\n        this.store.dispatch(AdminActions.saveGlobalExternalSetting({ value }));\r\n    }\r\n\r\n    saveExternalUsersSetting(chart: SecurityChartViewModel, $event: boolean) {\r\n        this.store.dispatch(AdminActions.saveExternalUsersSetting( { chart: {...chart, areExternalUsersAllowed: $event }}));\r\n    }\r\n\r\n    userEntry = (entry: SecurityGroupEntry) => {\r\n        return !!entry.UserId || !!entry.UserName;\r\n    }\r\n\r\n    groupEntry = (entry: SecurityGroupEntry) => {\r\n        return !!entry.GroupName;\r\n    }\r\n\r\n    saveChart(chart: SecurityChartViewModel, prop: string, $event: number) {\r\n        console.log($event);\r\n        const newChart = {...chart};\r\n        newChart[prop] = $event;\r\n        this.store.dispatch(AdminActions.saveChart({ chart: newChart }));\r\n    }\r\n\r\n    ngOnDestroy(): void {\r\n        this.unsubscribe.next();\r\n        this.unsubscribe.complete();\r\n    }\r\n}\r\n","import { Injectable } from '@angular/core';\r\nimport { HttpClient } from '@angular/common/http';\r\nimport { Observable } from 'rxjs';\r\nimport { CompositeModel, SecurityGroup, SecurityChartViewModel, SecurityGroupEntry, AvailableEntries, InformationSourceViewModel, SharePointListInfo, ApiKey } from '../admin.models';\r\nimport { AppearanceFormValue } from '../admin.reducers';\r\n\r\n@Injectable()\r\nexport class AdminService {\r\n    private API_PATH = '/api/admin';\r\n    constructor(private http: HttpClient) {}\r\n\r\n    loadAdminCompositeData(): Observable<CompositeModel> {\r\n        return this.http.get<CompositeModel>(`${this.API_PATH}/composite`);\r\n    }\r\n\r\n    loadCompanyGroups(): Observable<AvailableEntries> {\r\n        return this.http.get<AvailableEntries>(`/api/security/availableentries`);\r\n    }\r\n\r\n    loadSecurityCharts(): Observable<SecurityChartViewModel[]> {\r\n        return this.http.get<SecurityChartViewModel[]>(`/api/security/charts`);\r\n    }\r\n\r\n    loadCacheSetting(): Observable<boolean> {\r\n        return this.http.get<boolean>(`${this.API_PATH}/disablecache`);\r\n    }\r\n\r\n    saveAppearance(form: AppearanceFormValue): Observable<object> {\r\n        return this.http.post(`${this.API_PATH}/settings`, {\r\n            CustomColour: form.brandColor,\r\n            CustomFooterText: form.footerText,\r\n            CustomThemeName: form.theme\r\n        });\r\n    }\r\n\r\n    removeLogo() {\r\n        return this.http.post(`${this.API_PATH}/logo/remove`, {});\r\n    }\r\n\r\n    removeCss() {\r\n        return this.http.delete(`${this.API_PATH}/customcss`);\r\n    }\r\n\r\n    postCreators(creators: string[]): Observable<string[]> {\r\n        return this.http.post<string[]>(`${this.API_PATH}/creators`, creators);\r\n    }\r\n\r\n    getPersonName(id: string): Observable<string> {\r\n        return this.http.get<string>(`/api/picker/personname/?id=${encodeURIComponent(id)}`);\r\n    }\r\n\r\n    addSecurityGroup(name: string): Observable<SecurityGroup> {\r\n        return this.http.post<SecurityGroup>(`/api/security/securitygroups`, { primitive: name });\r\n    }\r\n\r\n    removeSecurityGroup(id: number): Observable<SecurityGroup[]> {\r\n        return this.http.delete<SecurityGroup[]>(`/api/security/securitygroups/${id}`);\r\n    }\r\n\r\n    getSecurityCharts(): Observable<SecurityChartViewModel[]> {\r\n        return this.http.get<SecurityChartViewModel[]>(`/api/security/charts`);\r\n    }\r\n\r\n    addSecurityGroupEntry(entry: SecurityGroupEntry): Observable<SecurityGroup> {\r\n        return this.http.post<SecurityGroup>(`/api/security/securitygroupentry`, entry);\r\n    }\r\n\r\n    removeSecurityGroupEntry(id: number): Observable<SecurityGroup> {\r\n        return this.http.delete<SecurityGroup>(`/api/security/securitygroupentry/${id}`);\r\n    }\r\n\r\n    saveSecurityChart(chart: SecurityChartViewModel): Observable<SecurityChartViewModel> {\r\n        return this.http.post<SecurityChartViewModel>(`/api/security/chartsecuritygroups/${chart.id}`, chart);\r\n    }\r\n\r\n    saveExternalUsersSetting(chart: SecurityChartViewModel): Observable<SecurityChartViewModel> {\r\n        return this.http.post<SecurityChartViewModel>(`/api/security/externalusers/${chart.id}`, {\r\n            ...chart,\r\n            viewGroupId: 0,\r\n            adminGroupId: 0,\r\n            denyGroupId: 0\r\n        });\r\n    }\r\n\r\n    saveGlobalExternalUsersSetting(value: boolean): Observable<boolean> {\r\n        return this.http.post<boolean>(`/api/security/externalusers/global`, { areExternalUsersAllowed: value });\r\n    }\r\n\r\n    saveAdminEmail(AdminEmail: string, CompanyName: string) {\r\n        return this.http.post(`${this.API_PATH}/adminemail`, { AdminEmail, CompanyName });\r\n    }\r\n\r\n    saveCacheSetting(value: boolean): Observable<boolean> {\r\n        return this.http.post<boolean>(`${this.API_PATH}/disablecache`, { DisableCache: value });\r\n    }\r\n\r\n    getInfoSource(sourceId: string): Observable<InformationSourceViewModel> {\r\n        return this.http.get<InformationSourceViewModel>(`${this.API_PATH}/informationsource?sourceId=${sourceId}`);\r\n    }\r\n\r\n    getSharePointLists(): Observable<SharePointListInfo[]> {\r\n        return this.http.get<SharePointListInfo[]>('/api/sharepoint/alllists');\r\n    }\r\n\r\n    getSharePointListFields(id: string): Observable<Array<{[paramName: string]: string}>> {\r\n        return this.http.get<Array<{[paramName: string]: string}>>(`/api/sharepoint/fields/${id}/Host`);\r\n    }\r\n\r\n    saveInformationSource(source: InformationSourceViewModel): Observable<boolean> {\r\n        return this.http.post<boolean>(`/api/admin/saveinformationsource`, source);\r\n    }\r\n\r\n    deleteInformationSource(sourceId: string): Observable<boolean> {\r\n        return this.http.get<boolean>(`${this.API_PATH}/removeinformationsource?sourceId=${sourceId}`);\r\n    }\r\n\r\n    testInformationSource(sourceId: string): Observable<string> {\r\n        return this.http.get<string>(`/api/info/test?sourceId=${sourceId}`);\r\n    }\r\n\r\n    loadApiKeys(): Observable<ApiKey[]> {\r\n        return this.http.get<ApiKey[]>(`${this.API_PATH}/apikeys`);\r\n    }\r\n\r\n    createApiKey(): Observable<ApiKey> {\r\n        return this.http.post<ApiKey>(`${this.API_PATH}/apikeys`, {});\r\n    }\r\n\r\n    revokeApiKey(id: number) {\r\n        return this.http.delete(`${this.API_PATH}/apikeys/${id}`);\r\n    }\r\n}\r\n"]}